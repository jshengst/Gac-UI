<Folder>
  <Instance name="FilePickerControl">
    <Instance ref.CodeBehind="false" ref.Class="gaclib_controls::FilePickerControl">
      <ref.LocalizedStrings Name="Strings" Class="gaclib_controls::DialogStrings" Default="true"/>
      <ref.Parameter Name="ViewModel" Class="presentation::IFileDialogViewModel"/>
      <ref.Members><![CDATA[
        var imageFolder : GuiImageData^ = null;
        var imageFile   : GuiImageData^ = null;
        prop Selection : string{} {GetSelection}
        event RequestClose();

        func GetSelectedFiles(): IFileDialogFile^{}
        ${
          for (item in dataGrid.SelectedItems)
          {
            var file = ViewModel.Files[item] as IFileDialogFile^;
            if (file is not null)
            {
              $Yield file;
            }
          }
        }

        func GetSelection(): string{}
        {
          return ViewModel.ParseDisplayString(textBox.Text);
        }

        func LocateSelectedFolderInTreeView(): void
        {
          var fragments : IFileDialogFolder^[] = {};
          var currentFolder = ViewModel.SelectedFolder;
          if (currentFolder is null)
          {
            return;
          }

          while (currentFolder is not null and currentFolder.Type == FileDialogFolderType::Folder)
          {
            fragments.Add(currentFolder);
            currentFolder = currentFolder.Parent;
          }

          var currentNode = treeView.NodeRootProvider.RootNode;
          for (fragment in reversed fragments)
          {
            currentNode.Expanding = true;
            currentNode = currentNode.GetChild(fragment.Index);
            if (currentNode is null)
            {
              return;
            }
          }

          var index = treeView.NodeItemView.CalculateNodeVisibilityIndex(cast * currentNode);
          treeView.EnsureItemVisible(index);
          treeView.SelectItemsByClick(index, false, false, true);
        }

        func CreateFileFilter(filter: IFileDialogFilter^): IDataFilter^
        {
          if (filter is null)
          {
            return null;
          }
          else
          {
            return new IDataFilter^
            {
              override func SetCallback(value: IDataProcessorCallback*): void {}
              override func Filter(row: object): bool
              {
                return filter.FilterFile(cast (IFileDialogFile^) row);
              }
            };
          }
        }
      ]]></ref.Members>
      <ref.Ctor><![CDATA[
        {
          imageFolder  = (cast (GuiImageData^) self.ResolveResource("res", "Images/Folder", true));
          imageFile    = (cast (GuiImageData^) self.ResolveResource("res", "Images/File", true));
          ViewModel.InitLocalizedText(
              self.Strings.FileDialogTextLoadingFolders(),
              self.Strings.FileDialogTextLoadingFiles(),
              self.Strings.FileDialogErrorEmptySelection(),
              self.Strings.FileDialogErrorFileNotExist(),
              self.Strings.FileDialogErrorFileExpected(),
              self.Strings.FileDialogErrorFolderNotExist(),
              self.Strings.FileDialogErrorMultipleSelectionNotEnabled(),
              self.Strings.FileDialogAskCreateFile(),
              self.Strings.FileDialogAskOverrideFile()
            );
          treeView.ItemSource = ViewModel.RootFolder;
          dataGrid.ItemSource = ViewModel.Files;
          comboBox.SelectedIndex = ViewModel.Filters.IndexOf(ViewModel.SelectedFilter);
          ViewModel.RefreshFiles();
        }
      ]]></ref.Ctor>
      <CustomControl ref.Name="self">
        <att.ViewModel-set
            SelectedFilter-bind="comboBox.SelectedItem as *"
            SelectedFolder-bind="treeView.SelectedItem as *"
            >
          <ev.SelectedFolderChanged-eval><![CDATA[
            {
              self.LocateSelectedFolderInTreeView();
            }
          ]]></ev.SelectedFolderChanged-eval>
        </att.ViewModel-set>
        <Table AlignmentToParent="left:0 top:0 right:0 bottom:0" BorderVisible="false" CellPadding="5" MinSizeLimitation="LimitToElementAndChildren">
          <att.Rows>
            <_>composeType:MinSize</_>
            <_>composeType:Percentage percentage:1.0</_>
            <_>composeType:MinSize</_>
          </att.Rows>
          <att.Columns>
            <_>composeType:Percentage percentage:1.0</_>
          </att.Columns>

          <Cell Site="row:0 column:0">
            <Label Text-bind="ViewModel.SelectedFolder.FullPath ?? ''">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
            </Label>
          </Cell>

          <Cell Site="row:1 column:0">
            <Table AlignmentToParent="left:0 top:0 right:0 bottom:0" BorderVisible="false" CellPadding="5" MinSizeLimitation="LimitToElementAndChildren">
              <att.Rows>
                <_>composeType:Percentage percentage:1.0</_>
              </att.Rows>
              <att.Columns>
                <_>composeType:Absolute absolute:192</_>
                <_>composeType:Percentage percentage:1.0</_>
              </att.Columns>

              <ColumnSplitter ColumnsToTheLeft="1"/>

              <Cell Site="row:0 column:0">
                <BindableTreeView ref.Name="treeView" env.ItemType="IFileDialogFolder^" VerticalAlwaysVisible="false" HorizontalAlwaysVisible="false" Alt="D">
                  <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
                  <att.TextProperty>Name</att.TextProperty>
                  <att.ChildrenProperty>Folders</att.ChildrenProperty>
                  <att.ImageProperty-eval><![CDATA[
                    [let node = cast (IFileDialogFolder^) $1 in (node.Type == FileDialogFolderType::Folder ? self.imageFolder : null)]
                  ]]></att.ImageProperty-eval>
                </BindableTreeView>
              </Cell>

              <Cell Site="row:0 column:1">
                <BindableDataGrid ref.Name="dataGrid" MultiSelect-eval="ViewModel.EnabledMultipleSelection" env.ItemType="IFileDialogFile^" View="ListViewView::List" VerticalAlwaysVisible="false" HorizontalAlwaysVisible="false" Alt="F">
                  <att.AdditionalFilter-bind>self.CreateFileFilter(ViewModel.SelectedFilter)</att.AdditionalFilter-bind>
                  <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
                  <att.FocusableComposition-set>
                    <ev.keyUp-eval><![CDATA[
                      {
                        if (not arguments.ctrl and not arguments.shift and not arguments.alt and arguments.code == VKEY::KEY_RETURN)
                        {
                          if (ViewModel.TryConfirm(cast * self.RelatedControlHost, self.Selection))
                          {
                            self.RequestClose();
                          }
                        }
                      }
                    ]]></ev.keyUp-eval>
                  </att.FocusableComposition-set>
                  <att.Columns>
                    <_ TextProperty="Name"/>
                  </att.Columns>
                  <att.SmallImageProperty-eval><![CDATA[
                    [
                      let node = cast (IFileDialogFile^) $1 in (
                        node.Type == FileDialogFileType::Folder ? self.imageFolder :
                        node.Type == FileDialogFileType::File ? self.imageFile :
                        null
                      )
                    ]
                  ]]></att.SmallImageProperty-eval>
                  <ev.SelectionChanged-eval><![CDATA[
                    {
                      textBox.Text = ViewModel.GetDisplayString(self.GetSelectedFiles());
                      textBox.Select({row:0 column:0}, {row:0 column:0});
                    }
                  ]]></ev.SelectionChanged-eval>
                  <ev.ItemLeftButtonDoubleClick-eval><![CDATA[
                    {
                      var file = ViewModel.Files[arguments.itemIndex];
                      var selection = ViewModel.ParseDisplayString(ViewModel.GetDisplayString({file}));
                      GuiApplication::GetApplication().InvokeInMainThread(self.RelatedControlHost, func():void
                      {
                        if (ViewModel.TryConfirm(cast * self.RelatedControlHost, selection))
                        {
                          self.RequestClose();
                        }
                      });
                    }
                  ]]></ev.ItemLeftButtonDoubleClick-eval>
                </BindableDataGrid>
              </Cell>
            </Table>
          </Cell>

          <Cell Site="row:2 column:0">
            <Table AlignmentToParent="left:0 top:0 right:0 bottom:0" BorderVisible="false" CellPadding="5" MinSizeLimitation="LimitToElementAndChildren">
              <att.Rows>
                <_>composeType:Percentage percentage:1.0</_>
              </att.Rows>
              <att.Columns>
                <_>composeType:MinSize</_>
                <_>composeType:Percentage percentage:1.0</_>
                <_>composeType:Absolute absolute:120</_>
              </att.Columns>

              <ColumnSplitter ColumnsToTheLeft="2"/>

              <Cell Site="row:0 column:0">
                <Label Text-str="FileDialogFileName()"/>
              </Cell>

              <Cell Site="row:0 column:1">
                <SinglelineTextBox ref.Name="textBox" Alt="S">
                  <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
                  <att.FocusableComposition-set>
                    <ev.keyUp-eval><![CDATA[
                      {
                        if (not arguments.ctrl and not arguments.shift and not arguments.alt and arguments.code == VKEY::KEY_RETURN)
                        {
                          if (ViewModel.TryConfirm(cast * self.RelatedControlHost, self.Selection))
                          {
                            self.RequestClose();
                          }
                        }
                      }
                    ]]></ev.keyUp-eval>
                  </att.FocusableComposition-set>
                </SinglelineTextBox>
              </Cell>

              <Cell Site="row:0 column:2">
                <ComboBox ref.Name="comboBox" Alt="E">
                  <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
                  <att.ListControl>
                    <BindableTextList env.ItemType="IFileDialogFilter^" VerticalAlwaysVisible="false" HorizontalAlwaysVisible="false">
                      <att.ItemSource-eval>ViewModel.Filters</att.ItemSource-eval>
                      <att.TextProperty>Name</att.TextProperty>
                    </BindableTextList>
                  </att.ListControl>
                </ComboBox>
              </Cell>
            </Table>
          </Cell>
        </Table>
      </CustomControl>
    </Instance>
  </Instance>

  <Instance name="FileDialogWindowResource">
    <Instance ref.CodeBehind="false" ref.Class="gaclib_controls::FileDialogWindow" xmlns:g="gaclib_controls::*">
      <ref.LocalizedStrings Name="Strings" Class="gaclib_controls::DialogStrings" Default="true"/>
      <ref.Parameter Name="ViewModel" Class="presentation::IFileDialogViewModel"/>
      <ref.Members><![CDATA[
        func MakeOpenFileDialog() : void
        {
          buttonOK.Text = Strings.FileDialogOpen();
        }
        
        func MakeSaveFileDialog() : void
        {
          buttonOK.Text = Strings.FileDialogSave();
        }
      ]]></ref.Members>
      <ref.Ctor><![CDATA[
        {
          GuiApplication::GetApplication().InvokeInMainThread(self, func():void
          {
            filePickerControl.LocateSelectedFolderInTreeView();
          });
        }
      ]]></ref.Ctor>
      <Window
          ref.Name = "self"
          Text-eval="ViewModel.Title"
          ClientSize="x:480 y:360"
          ShowInTaskBar="false"
          MaximizedBox="false"
          MinimizedBox="false"
          IconVisible="false"
          >
        <Table AlignmentToParent="left:0 top:5 right:0 bottom:0" BorderVisible="false" CellPadding="5" MinSizeLimitation="LimitToElementAndChildren">
          <att.Rows>
            <_>composeType:Percentage percentage:1.0</_>
            <_>composeType:MinSize</_>
          </att.Rows>
          <att.Columns>
            <_>composeType:Percentage percentage:1.0</_>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
          </att.Columns>

          <Cell Site="row:0 column:0 rowSpan:1 columnSpan:3">
            <g:FilePickerControl ref.Name="filePickerControl" ViewModel-eval="ViewModel">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <ev.RequestClose-eval><![CDATA[
                {
                  GuiApplication::GetApplication().InvokeInMainThread(self.RelatedControlHost, func():void
                  {
                    self.Close();
                  });
                }
              ]]></ev.RequestClose-eval>
            </g:FilePickerControl>
          </Cell>

          <Cell Site="row:1 column:1">
            <Button ref.Name="buttonOK" Enabled-bind="not ViewModel.IsLoadingFiles" Alt="O">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0" PreferredMinSize="x:80 y:24"/>
              <ev.Clicked-eval><![CDATA[
                {
                  if (ViewModel.TryConfirm(self, filePickerControl.Selection))
                  {
                    self.Close();
                  }
                }
              ]]></ev.Clicked-eval>
            </Button>
          </Cell>

          <Cell Site="row:1 column:2">
            <Button Text-str="Cancel()" Alt="C">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0" PreferredMinSize="x:80 y:24"/>
              <ev.Clicked-eval><![CDATA[
                {
                  self.Close();
                }
              ]]></ev.Clicked-eval>
            </Button>
          </Cell>
        </Table>
      </Window>
    </Instance>
  </Instance>
</Folder>