/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GuiRemoteProtocolAst_Json.h"

namespace vl::presentation::remoteprotocol::json_visitor
{
	void AstVisitor::PrintFields(GuiRpArrayMapType* node)
	{
		BeginField(L"element");
		WriteToken(node->element);
		EndField();
		BeginField(L"keyField");
		WriteToken(node->keyField);
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpArrayType* node)
	{
		BeginField(L"element");
		Print(node->element.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpAttribute* node)
	{
		BeginField(L"cppType");
		WriteToken(node->cppType);
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpDeclaration* node)
	{
		BeginField(L"attributes");
		BeginArray();
		for (auto&& listItem : node->attributes)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpEnumDecl* node)
	{
		BeginField(L"members");
		BeginArray();
		for (auto&& listItem : node->members)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpEnumMember* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpEventDecl* node)
	{
		BeginField(L"request");
		Print(node->request.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpEventRequest* node)
	{
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpMapType* node)
	{
		BeginField(L"element");
		Print(node->element.Obj());
		EndField();
		BeginField(L"keyType");
		Print(node->keyType.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpMessageDecl* node)
	{
		BeginField(L"request");
		Print(node->request.Obj());
		EndField();
		BeginField(L"response");
		Print(node->response.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpMessageRequest* node)
	{
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpMessageResponse* node)
	{
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpOptionalType* node)
	{
		BeginField(L"element");
		Print(node->element.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpPrimitiveType* node)
	{
		BeginField(L"type");
		switch (node->type)
		{
		case vl::presentation::remoteprotocol::GuiRpPrimitiveTypes::Binary:
			WriteString(L"Binary");
			break;
		case vl::presentation::remoteprotocol::GuiRpPrimitiveTypes::Boolean:
			WriteString(L"Boolean");
			break;
		case vl::presentation::remoteprotocol::GuiRpPrimitiveTypes::Char:
			WriteString(L"Char");
			break;
		case vl::presentation::remoteprotocol::GuiRpPrimitiveTypes::Color:
			WriteString(L"Color");
			break;
		case vl::presentation::remoteprotocol::GuiRpPrimitiveTypes::Double:
			WriteString(L"Double");
			break;
		case vl::presentation::remoteprotocol::GuiRpPrimitiveTypes::Float:
			WriteString(L"Float");
			break;
		case vl::presentation::remoteprotocol::GuiRpPrimitiveTypes::Integer:
			WriteString(L"Integer");
			break;
		case vl::presentation::remoteprotocol::GuiRpPrimitiveTypes::Key:
			WriteString(L"Key");
			break;
		case vl::presentation::remoteprotocol::GuiRpPrimitiveTypes::String:
			WriteString(L"String");
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpReferenceType* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpSchema* node)
	{
		BeginField(L"declarations");
		BeginArray();
		for (auto&& listItem : node->declarations)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpStructDecl* node)
	{
		BeginField(L"members");
		BeginArray();
		for (auto&& listItem : node->members)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(L"type");
		switch (node->type)
		{
		case vl::presentation::remoteprotocol::GuiRpStructType::Class:
			WriteString(L"Class");
			break;
		case vl::presentation::remoteprotocol::GuiRpStructType::Struct:
			WriteString(L"Struct");
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpStructMember* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
		BeginField(L"type");
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpType* node)
	{
	}
	void AstVisitor::PrintFields(GuiRpUnionDecl* node)
	{
		BeginField(L"members");
		BeginArray();
		for (auto&& listItem : node->members)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(GuiRpUnionMember* node)
	{
		BeginField(L"name");
		WriteToken(node->name);
		EndField();
	}

	void AstVisitor::Visit(GuiRpPrimitiveType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"PrimitiveType", node);
		PrintFields(static_cast<GuiRpType*>(node));
		PrintFields(static_cast<GuiRpPrimitiveType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(GuiRpReferenceType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ReferenceType", node);
		PrintFields(static_cast<GuiRpType*>(node));
		PrintFields(static_cast<GuiRpReferenceType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(GuiRpOptionalType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"OptionalType", node);
		PrintFields(static_cast<GuiRpType*>(node));
		PrintFields(static_cast<GuiRpOptionalType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(GuiRpArrayType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ArrayType", node);
		PrintFields(static_cast<GuiRpType*>(node));
		PrintFields(static_cast<GuiRpArrayType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(GuiRpArrayMapType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"ArrayMapType", node);
		PrintFields(static_cast<GuiRpType*>(node));
		PrintFields(static_cast<GuiRpArrayMapType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(GuiRpMapType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"MapType", node);
		PrintFields(static_cast<GuiRpType*>(node));
		PrintFields(static_cast<GuiRpMapType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(GuiRpEnumDecl* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"EnumDecl", node);
		PrintFields(static_cast<GuiRpDeclaration*>(node));
		PrintFields(static_cast<GuiRpEnumDecl*>(node));
		EndObject();
	}

	void AstVisitor::Visit(GuiRpUnionDecl* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"UnionDecl", node);
		PrintFields(static_cast<GuiRpDeclaration*>(node));
		PrintFields(static_cast<GuiRpUnionDecl*>(node));
		EndObject();
	}

	void AstVisitor::Visit(GuiRpStructDecl* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"StructDecl", node);
		PrintFields(static_cast<GuiRpDeclaration*>(node));
		PrintFields(static_cast<GuiRpStructDecl*>(node));
		EndObject();
	}

	void AstVisitor::Visit(GuiRpMessageDecl* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"MessageDecl", node);
		PrintFields(static_cast<GuiRpDeclaration*>(node));
		PrintFields(static_cast<GuiRpMessageDecl*>(node));
		EndObject();
	}

	void AstVisitor::Visit(GuiRpEventDecl* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"EventDecl", node);
		PrintFields(static_cast<GuiRpDeclaration*>(node));
		PrintFields(static_cast<GuiRpEventDecl*>(node));
		EndObject();
	}

	AstVisitor::AstVisitor(vl::stream::StreamWriter& _writer)
		: vl::glr::JsonVisitorBase(_writer)
	{
	}

	void AstVisitor::Print(GuiRpType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<GuiRpType::IVisitor*>(this));
	}

	void AstVisitor::Print(GuiRpDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<GuiRpDeclaration::IVisitor*>(this));
	}

	void AstVisitor::Print(GuiRpAttribute* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"Attribute", node);
		PrintFields(static_cast<GuiRpAttribute*>(node));
		EndObject();
	}

	void AstVisitor::Print(GuiRpEnumMember* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"EnumMember", node);
		PrintFields(static_cast<GuiRpEnumMember*>(node));
		EndObject();
	}

	void AstVisitor::Print(GuiRpUnionMember* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"UnionMember", node);
		PrintFields(static_cast<GuiRpUnionMember*>(node));
		EndObject();
	}

	void AstVisitor::Print(GuiRpStructMember* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"StructMember", node);
		PrintFields(static_cast<GuiRpStructMember*>(node));
		EndObject();
	}

	void AstVisitor::Print(GuiRpMessageRequest* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"MessageRequest", node);
		PrintFields(static_cast<GuiRpMessageRequest*>(node));
		EndObject();
	}

	void AstVisitor::Print(GuiRpMessageResponse* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"MessageResponse", node);
		PrintFields(static_cast<GuiRpMessageResponse*>(node));
		EndObject();
	}

	void AstVisitor::Print(GuiRpEventRequest* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"EventRequest", node);
		PrintFields(static_cast<GuiRpEventRequest*>(node));
		EndObject();
	}

	void AstVisitor::Print(GuiRpSchema* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(L"Schema", node);
		PrintFields(static_cast<GuiRpSchema*>(node));
		EndObject();
	}

}
