<Styles>
  <Style ref.Path="(//Bounds + //Table + //RepeatStack + //RepeatFlow)" MinSizeLimitation="LimitToElementAndChildren"/>
  <Style ref.Path="//*.generalBackground" Color="#2D2D30"/>
  <Style ref.Path="//*.generalBorder" Color="#434346"/>
  <Style ref.Path="//*.generalFocused" Color="#007ACC"/>
  <Style ref.Path="//*.contentBackground" Color="#252526"/>
  <Style ref.Path="//*.contentBorder" Color="#3F3F46"/>
  <Style ref.Path="//*.windowBorder">
    <att.Color-bind>
      <![CDATA[
        cast Color let margin = self.CustomFramePadding in (
          (not self.Border) or (margin.left + margin.top + margin.right + margin.bottom == 0) ? "#00000000" :
          self.VisuallyEnabled and self.Activated ? "#017ACC" :
          "#434346"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.windowTitle">
    <att.Color-bind>
      <![CDATA[
        cast Color (
          self.VisuallyEnabled and self.Activated ? "#999999" :
          "#6D6D6D"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.tooltipBorder" Color="#017ACC"/>
  <Style ref.Path="//*.groupText" Color="#C7C7C7"/>
  <Style ref.Path="//*.labelDefaultText" DefaultTextColor="#F1F1F1"/>
  <Style ref.Path="//*.labelText">
    <att.Color-bind>
      <![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#6D6D6D" :
          self.TextColor
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.datePickerColors">
    <att.BackgroundColor>#2D2D30</att.BackgroundColor>
    <att.PrimaryTextColor>#FFFFFF</att.PrimaryTextColor>
    <att.SecondaryTextColor>#999999</att.SecondaryTextColor>
  </Style>
  <Style ref.Path="//*.buttonBackground">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#252526" :
          state == ButtonState::Active ? "#54545C" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#3F3F46"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.buttonBorder">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#434346" :
          state == ButtonState::Active ? "#6A6A75" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#54545C"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.buttonPolygon">
    <att.BorderColor-bind>
      <![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#6D6D6D" :
          "#F1F1F1"
        )
      ]]>
    </att.BorderColor-bind>
    <att.BackgroundColor-bind>
      <![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#6D6D6D" :
          "#F1F1F1"
        )
      ]]>
    </att.BackgroundColor-bind>
  </Style>
  <Style ref.Path="//*.buttonText">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Active ? "#F1F1F1" :
          state == ButtonState::Pressed ? "#FFFFFF" :
          "#F1F1F1"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.listBorder">
    <att.Color-bind>
      <![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.listColumnBorder" Color="#404042"/>
  <Style ref.Path="//*.textListBackgroundAndColor">
    <att.TextColor>#F1F1F1</att.TextColor>
    <SolidBackground Color="#252526"/>
  </Style>
  <Style ref.Path="//*.listViewBackgroundAndColor">
    <att.PrimaryTextColor>#F1F1F1</att.PrimaryTextColor>
    <att.SecondaryTextColor>#F1F1F1</att.SecondaryTextColor>
    <att.ItemSeparatorColor>#F1F1F1</att.ItemSeparatorColor>
    <SolidBackground Color="#252526"/>
  </Style>
  <Style ref.Path="//*.treeViewBackgroundAndColor">
    <att.TextColor>#F1F1F1</att.TextColor>
    <SolidBackground Color="#252526"/>
  </Style>
  <Style ref.Path="//*.tabHeaderBackground">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          self.Highlighted ? (
            self.Selected ? "#CC7ACC" :
            state == ButtonState::Active ? "#EA97EA" :
            state == ButtonState::Pressed ? "#EA97EA" :
            "#604360"
          ) : (
            self.Selected ? "#007ACC" :
            state == ButtonState::Active ? "#1C97EA" :
            state == ButtonState::Pressed ? "#1C97EA" :
            "#434346"
          )
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.tabHeaderBottomLine">
    <att.Color-bind>
      <![CDATA[
        cast Color (self.Highlighted ? "#CC7ACC" : "#007ACC")
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.tabDropdownBackground">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          state == ButtonState::Active ? "#1C97EA" :
          state == ButtonState::Pressed ? "#1C97EA" :
          "#434346"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.controlText">
    <att.Color-bind>
      <![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#6D6D6D" :
          "#F1F1F1"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.controlBorder">
    <att.Color-bind>
      <![CDATA[
        cast Color (
          not self.VisuallyEnabled ? "#434346" :
          self.Focused ? "#1C97EA" :
          "#54545C"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.scrollBackground" Color="#3D3D42"/>
  <Style ref.Path="//*.scrollArrowColor">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.scrollArrow">
    <att.BorderColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>
    </att.BorderColor-bind>
    <att.BackgroundColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>
    </att.BackgroundColor-bind>
  </Style>
  <Style ref.Path="//*.scrollHandle">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Active ? "#9E9E9E" :
          state == ButtonState::Pressed ? "#EFEBEF" :
          "#686868"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.trackerBackground" Color="#3F3F47"/>
  <Style ref.Path="//*.trackerBorder" Color="#55545A"/>
  <Style ref.Path="//*.progressBackground" Color="#3F3F47"/>
  <Style ref.Path="//*.progressBorder" Color="#55545A"/>
  <Style ref.Path="//*.progressFilling" Color="#07B023"/>
  <Style ref.Path="//*.itemBackground">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          self.Selected or state == ButtonState::Pressed ? "#3399FF" :
          state == ButtonState::Active ? "#3F3F46" :
          "#00000000"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.toolstripMenuBackground" Color="#1B1B1C"/>
  <Style ref.Path="//*.toolstripMenuBorder" Color="#333337"/>
  <Style ref.Path="//*.toolstripSplitter" Color1="#222224" Color2="#464648"/>
  <Style ref.Path="//*.toolstripBackground">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.toolstripBorder">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          "#007ACC"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.toolstripArrow">
    <att.BorderColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>
    </att.BorderColor-bind>
    <att.BackgroundColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>
    </att.BackgroundColor-bind>
  </Style>
  <Style ref.Path="//*.toolstripSplitBackground">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#54545C" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.toolstripSplitArrowBackground">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.Selected ? "#007ACC" :
          state == ButtonState::Active ? "#54545C" :
          "#00000000"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.toolstripSplitArrow">
    <att.BorderColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>
    </att.BorderColor-bind>
    <att.BackgroundColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Pressed or self.Selected ? "#FFFFFF" :
          state == ButtonState::Active ? "#1997EA" :
          "#999999"
        )
      ]]>
    </att.BackgroundColor-bind>
  </Style>
  <Style ref.Path="//*.menuBarItemBackground">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#1B1B1C" :
          state == ButtonState::Active ? "#3D3D40" :
          "#00000000"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.menuItemBackground">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#3D3D40" :
          state == ButtonState::Active or self.SubMenuOpening ? "#3D3D40" :
          "#00000000"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.menuItemArrow">
    <att.BorderColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>
    </att.BorderColor-bind>
    <att.BackgroundColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#555558" :
          state == ButtonState::Active or self.SubMenuOpening ? "#1997EA" :
          state == ButtonState::Pressed ? "#007ACC" :
          "#999999"
        )
      ]]>
    </att.BackgroundColor-bind>
  </Style>
  <Style ref.Path="//*.comboBackground">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#333337"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.comboArrowBackground">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#1F1F20" :
          "#00000000"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.comboArrow">
    <att.BorderColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#999999" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
          state == ButtonState::Active ? "#007ACC" :
          "#999999"
        )
      ]]>
    </att.BorderColor-bind>
    <att.BackgroundColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#2D2D30" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#3F3F46" :
          state == ButtonState::Active ? "#3F3F46" :
          "#434346"
        )
      ]]>
    </att.BackgroundColor-bind>
  </Style>
  <Style ref.Path="//*.columnHeaderBackground">
    <att.Color-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#3E3E40" :
          state == ButtonState::Pressed or self.SubMenuOpening ? "#007ACC" :
          state == ButtonState::Active ? "#3E3E40" :
          "#252527"
        )
      ]]>
    </att.Color-bind>
  </Style>
  <Style ref.Path="//*.expandableArrow">
    <att.BorderColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>
    </att.BorderColor-bind>
    <att.BackgroundColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.Selected ? "#00000000" :
          not self.VisuallyEnabled ? "#6D6D6D" :
          state == ButtonState::Pressed ? "#0A75B9" :
          state == ButtonState::Active ? "#0A75B9" :
          "#F1F1F1"
        )
      ]]>
    </att.BackgroundColor-bind>
  </Style>
  <Style ref.Path="//*.ribbonGroupBorder" Color="#3F3F46"/>
  <Style ref.Path="//*.ribbonGroupTitle" Color="#6D6D6D"/>
  <Style ref.Path="//*.ribbonMenuBorder" Color="#333337"/>
  <Style ref.Path="//*.ribbonExpandableArrow">
    <att.BorderColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#A0D0FF" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#A0D0FF"
        )
      ]]>
    </att.BorderColor-bind>
    <att.BackgroundColor-bind>
      <![CDATA[
        cast Color let state = self.State in (
          not self.VisuallyEnabled ? "#00000000" :
          state == ButtonState::Pressed ? "#004879" :
          state == ButtonState::Active ? "#A0D0FF" :
          "#00000000"
        )
      ]]>
    </att.BackgroundColor-bind>
  </Style>
  <Style ref.Path="//*.textBoxBackgroundAndColor">
    <att.TextColor>normal:{text:(cast Color "#FFFFFF") background:(cast Color "#00000000")} selectedFocused:{text:(cast Color "#FFFFFF") background:(cast Color "#007ACC")} selectedUnfocused:{text:(cast Color "#FFFFFF") background:(cast Color "#007ACC")}</att.TextColor>
    <att.CaretColor>#FFFFFF</att.CaretColor>
    <SolidBackground Color="#252526"/>
  </Style>
  <Style ref.Path="//*.documentBoxBackgroundAndColor" BaselineDocument-uri="res://DarkSkin/BaselineDocuments/Dark">
    <att.CaretColor>#FFFFFF</att.CaretColor>
    <SolidBackground Color="#252526"/>
  </Style>
</Styles>