================================(1/6)================================
module <constructor>gacuisrc_unittest::CheckedBulletTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    class CheckedBulletTemplateConstructor
    {
        @cpp:Protected
        var self : ::gacuisrc_unittest::CheckedBulletTemplate* = null of (::gacuisrc_unittest::CheckedBulletTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <gacuisrc_unittest-CheckedBulletTemplate>Initialize(<this> : ::gacuisrc_unittest::CheckedBulletTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.PreferredMinSize = {x : 32; y : 16;} of (::presentation::Size));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#00FF00"));
            }
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.PreferredMinSize = {x : 12; y : 12;} of (::presentation::Size));
            }
            {
                (<precompile>1.AlignmentToParent = {left : 2; top : 2; right : (-1); bottom : 2;} of (::presentation::Margin));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#00FF00"));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                self.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>3.PreferredMinSize = {x : 12; y : 12;} of (::presentation::Size));
            }
            {
                (<precompile>3.AlignmentToParent = {left : (-1); top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            (<precompile>4 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>4.Color = (cast (::presentation::Color) "#888888"));
            }
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                self.AddChild(<precompile>3);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gacuisrc_unittest::CheckedBulletTemplate* = null of (::gacuisrc_unittest::CheckedBulletTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gacuisrc_unittest::CheckedBulletTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gacuisrc_unittest::CheckedBulletTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gacuisrc_unittest::CheckedBulletTemplate* = null of (::gacuisrc_unittest::CheckedBulletTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (!<bind-cache>0.Selected) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gacuisrc_unittest::CheckedBulletTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gacuisrc_unittest::CheckedBulletTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(2/6)================================
module <instance>gacuisrc_unittest::CheckedBulletTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    @cpp:File("CheckedBulletTemplate")
    @cpp:Friend(typeof(CheckedBulletTemplateConstructor))
    class CheckedBulletTemplate : ::presentation::templates::GuiSelectableButtonTemplate, CheckedBulletTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gacuisrc_unittest::CheckedBulletTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gacuisrc_unittest-CheckedBulletTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(3/6)================================
module <constructor>gacuisrc_unittest::ItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    class ItemTemplateConstructor
    {
        @cpp:Protected
        var self : ::gacuisrc_unittest::ItemTemplate* = null of (::gacuisrc_unittest::ItemTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var bullet : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        func <gacuisrc_unittest-ItemTemplate>Initialize(<this> : ::gacuisrc_unittest::ItemTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.BorderVisible = true);
            }
            {
                (<precompile>0.CellPadding = 1 of (::system::Int32));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 4);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(3, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(1, 0, 1, 1);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(1, 1, 1, 1);
            }
            {
                (bullet = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("bullet", bullet);
            }
            {
                (bullet.AutoSelection = false);
            }
            {
                (bullet.AutoFocus = false);
            }
            (<precompile>3 = bullet.BoundsComposition);
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (bullet.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::gacuisrc_unittest::CheckedBulletTemplate*)();
                    }
                });
            }
            {
                <precompile>2.AddChild(bullet.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>4.PreferredMinSize = {x : 16; y : 16;} of (::presentation::Size));
            }
            {
                <precompile>4.SetSite(1, 2, 1, 1);
            }
            (<precompile>5 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>5.Stretch = true);
            }
            {
                (<precompile>4.OwnedElement = <precompile>5);
            }
            {
                <precompile>0.AddChild(<precompile>4);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(1, 3, 1, 1);
            }
            (<precompile>7 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>7.Ellipse = true);
            }
            {
                (<precompile>7.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>7.HorizontalAlignment = Left of (::presentation::Alignment));
            }
            {
                (<precompile>6.OwnedElement = <precompile>7);
            }
            {
                <precompile>0.AddChild(<precompile>6);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gacuisrc_unittest::ItemTemplate* = null of (::gacuisrc_unittest::ItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = {x : (<bind-cache>0.Level * 12); y : 0;} of (::presentation::Size);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gacuisrc_unittest::ItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LevelChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LevelChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gacuisrc_unittest::ItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.PreferredMinSize;
                    var <new> = (cast (::presentation::Size) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.PreferredMinSize = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gacuisrc_unittest::ItemTemplate* = null of (::gacuisrc_unittest::ItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Expanding of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gacuisrc_unittest::ItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ExpandingChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ExpandingChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gacuisrc_unittest::ItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = bullet.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (bullet.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gacuisrc_unittest::ItemTemplate* = null of (::gacuisrc_unittest::ItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Expandable of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gacuisrc_unittest::ItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ExpandableChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ExpandableChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gacuisrc_unittest::ItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = bullet.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (bullet.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var nodeItemView = (self.AssociatedListControl.ItemProvider.RequestView(INodeItemView::GetIdentifier()) as (INodeItemView*));
                    var node = nodeItemView.RequestNode(self.Index);
                    (node.Expanding = (!node.Expanding));
                };
                attach(bullet.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gacuisrc_unittest::ItemTemplate* = null of (::gacuisrc_unittest::ItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gacuisrc_unittest::ItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gacuisrc_unittest::ItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gacuisrc_unittest::ItemTemplate* = null of (::gacuisrc_unittest::ItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.FrameIndex ?? 0) of (::system::Int32);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gacuisrc_unittest::ItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gacuisrc_unittest::ItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.FrameIndex;
                    var <new> = (cast (::system::Int32) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gacuisrc_unittest::ItemTemplate* = null of (::gacuisrc_unittest::ItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gacuisrc_unittest::ItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gacuisrc_unittest::ItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gacuisrc_unittest::ItemTemplate* = null of (::gacuisrc_unittest::ItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gacuisrc_unittest::ItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gacuisrc_unittest::ItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gacuisrc_unittest::ItemTemplate* = null of (::gacuisrc_unittest::ItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.TextColor of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gacuisrc_unittest::ItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextColorChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextColorChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gacuisrc_unittest::ItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gacuisrc_unittest::ItemTemplate* = null of (::gacuisrc_unittest::ItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gacuisrc_unittest::ItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gacuisrc_unittest::ItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(4/6)================================
module <instance>gacuisrc_unittest::ItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    @cpp:File("ItemTemplate")
    @cpp:Friend(typeof(ItemTemplateConstructor))
    class ItemTemplate : ::presentation::templates::GuiTreeItemTemplate, ItemTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gacuisrc_unittest::ItemTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gacuisrc_unittest-ItemTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(5/6)================================
module <constructor>gacuisrc_unittest::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    class MainWindowConstructor
    {
        @cpp:Protected
        var self : ::gacuisrc_unittest::MainWindow* = null of (::gacuisrc_unittest::MainWindow*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var list : ::presentation::controls::GuiTreeView* = null of (::presentation::controls::GuiTreeView*);

        @cpp:Protected
        func <gacuisrc_unittest-MainWindow>Initialize(<this> : ::gacuisrc_unittest::MainWindow*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.ClientSize = {x : 320; y : 240;} of (::presentation::Size));
            }
            {
                (list = new (::presentation::controls::GuiTreeView*)(::presentation::theme::ThemeName::TreeView));
                <this>.SetNamedObject("list", list);
            }
            {
                (list.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiListItemTemplate*)
                {
                    {
                        return new (::gacuisrc_unittest::ItemTemplate*)();
                    }
                });
            }
            {
                (list.VerticalAlwaysVisible = false);
            }
            {
                (list.HorizontalAlwaysVisible = false);
            }
            (<precompile>0 = list.BoundsComposition);
            {
                (<precompile>0.PreferredMinSize = {x : 400; y : 300;} of (::presentation::Size));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 5; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(list);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiTreeView* = null of (::presentation::controls::GuiTreeView*);

                    var <bind-cache>1 : ::presentation::controls::GuiTreeView* = null of (::presentation::controls::GuiTreeView*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (((("GuiTreeView [" & <bind-cache>0.SelectedItemIndex) & "] -> [") & (<bind-cache>1.SelectedItem.text ?? "")) & "]");
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (list ?? null of (::presentation::controls::GuiTreeView*)));
                            (<bind-cache>1 = (list ?? null of (::presentation::controls::GuiTreeView*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectionChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectionChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiTreeView*));
                            (<bind-cache>1 = null of (::presentation::controls::GuiTreeView*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(6/6)================================
module <instance>gacuisrc_unittest::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    @cpp:File("MainWindow")
    @cpp:Friend(typeof(MainWindowConstructor))
    class MainWindow : ::presentation::controls::GuiWindow, MainWindowConstructor
    {
        func GetImage(index : int) : (GuiImageData^)
        {
            return null;
        }

        func MakeItem(name : string, item : int) : (MemoryNodeProvider^)
        {
            var treeViewItem = new (TreeViewItem^)(GetImage(item), ((("" & name) & " ") & item));
            var treeNode = new (MemoryNodeProvider^)(treeViewItem);
            return treeNode;
        }

        func InitializeItems(count : int) : (void)
        {
            {
                var <for-begin>item : ::system::Int32 = 1;
                var <for-end>item : ::system::Int32 = count;
                var item = <for-begin>item;
                while ((item <= <for-end>item))
                {
                    {
                        var mainItem = MakeItem("Item", item);
                        mainItem.Children.Add(MakeItem("Child 1st", item));
                        mainItem.Children.Add(MakeItem("Child 2nd", item));
                        mainItem.Children.Add(MakeItem("Child 3rd", item));
                        mainItem.Children[1].Children.Add(MakeItem("Leaf 2/1st", item));
                        mainItem.Children[1].Children.Add(MakeItem("Leaf 2/2nd", item));
                        mainItem.Children[2].Children.Add(MakeItem("Leaf 3/1st", item));
                        mainItem.Children[2].Children.Add(MakeItem("Leaf 3/2nd", item));
                        list.Nodes.Children.Add(mainItem);
                    }
                    (item = (item + 1));
                }
            }
        }

        new* ()
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gacuisrc_unittest::MainWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gacuisrc_unittest-MainWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

