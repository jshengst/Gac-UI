================================(1/2)================================
module <constructor>gacuisrc_unittest::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    class MainWindowConstructor
    {
        @cpp:Protected
        var self : ::gacuisrc_unittest::MainWindow* = null of (::gacuisrc_unittest::MainWindow*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>1 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var list : ::presentation::controls::GuiListView* = null of (::presentation::controls::GuiListView*);

        @cpp:Protected
        func <gacuisrc_unittest-MainWindow>Initialize(<this> : ::gacuisrc_unittest::MainWindow*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.ClientSize = {x : 640; y : 480;} of (::presentation::Size));
            }
            {
                (list = new (::presentation::controls::GuiListView*)(::presentation::theme::ThemeName::ListView));
                <this>.SetNamedObject("list", list);
            }
            {
                var <collection> = list.DataColumns;
                <collection>.Add(0 of (::system::Int64));
            }
            {
                var <collection> = list.DataColumns;
                <collection>.Add(2 of (::system::Int64));
            }
            {
                var <collection> = list.DataColumns;
                <collection>.Add(3 of (::system::Int64));
            }
            {
                (list.VerticalAlwaysVisible = false);
            }
            {
                (list.HorizontalAlwaysVisible = false);
            }
            (<precompile>5 = list.BoundsComposition);
            {
                (<precompile>5.PreferredMinSize = {x : 400; y : 300;} of (::presentation::Size));
            }
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 5; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>0 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>0.Text = "Id");
            }
            {
                var <collection> = list.Columns;
                <collection>.Add(<precompile>0);
            }
            (<precompile>1 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>1.Size = 100 of (::system::Int64));
            }
            {
                (<precompile>1.Text = "First");
            }
            {
                var <collection> = list.Columns;
                <collection>.Add(<precompile>1);
            }
            (<precompile>2 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>2.Size = 100 of (::system::Int64));
            }
            {
                (<precompile>2.Text = "Second");
            }
            {
                var <collection> = list.Columns;
                <collection>.Add(<precompile>2);
            }
            (<precompile>3 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>3.Size = 100 of (::system::Int64));
            }
            {
                (<precompile>3.Text = "Third");
            }
            {
                var <collection> = list.Columns;
                <collection>.Add(<precompile>3);
            }
            (<precompile>4 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>4.Size = 100 of (::system::Int64));
            }
            {
                (<precompile>4.Text = "Fourth");
            }
            {
                var <collection> = list.Columns;
                <collection>.Add(<precompile>4);
            }
            {
                self.AddChild(list);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiListView* = null of (::presentation::controls::GuiListView*);

                    var <bind-cache>1 : ::presentation::controls::GuiListView* = null of (::presentation::controls::GuiListView*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (((("GuiListView [" & <bind-cache>0.SelectedItemIndex) & "] -> [") & <bind-cache>1.SelectedItemText) & "]");
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (list ?? null of (::presentation::controls::GuiListView*)));
                            (<bind-cache>1 = (list ?? null of (::presentation::controls::GuiListView*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectionChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectionChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiListView*));
                            (<bind-cache>1 = null of (::presentation::controls::GuiListView*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(2/2)================================
module <instance>gacuisrc_unittest::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    @cpp:File("MainWindow")
    @cpp:Friend(typeof(MainWindowConstructor))
    class MainWindow : ::presentation::controls::GuiWindow, MainWindowConstructor
    {
        func GetLargeImage(index : int) : (GuiImageData^)
        {
            return null;
        }

        func GetSmallImage(index : int) : (GuiImageData^)
        {
            return null;
        }

        func MakeItem(name : string, item : int) : (ListViewItem^)
        {
            var index = (item == (-1)) ? (list.Items.Count + 1) : item;
            var listViewItem = new (ListViewItem^)();
            (listViewItem.Text = ((("" & name) & " ") & index));
            listViewItem.SubItems.Add(("1st:" & (index * 1)));
            listViewItem.SubItems.Add(("2nd:" & (index * 2)));
            listViewItem.SubItems.Add(("3rd:" & (index * 3)));
            listViewItem.SubItems.Add(("4th:" & (index * 4)));
            (listViewItem.LargeImage = GetLargeImage(((index - 1) % 5)));
            (listViewItem.SmallImage = GetSmallImage(((index - 1) % 5)));
            return listViewItem;
        }

        func UpdateItemText(item : ListViewItem^, text : string) : (void)
        {
            (item.Text = text);
        }

        func UpdateSubItemText(item : ListViewItem^, text : string) : (void)
        {
            (item.SubItems[0] = text);
        }

        func InitializeItems(count : int) : (void)
        {
            {
                var <for-begin>item : ::system::Int64 = 1;
                var <for-end>item : ::system::Int64 = count;
                var item = <for-begin>item;
                while ((item <= <for-end>item))
                {
                    {
                        list.Items.Add(MakeItem("Item", item));
                    }
                    (item = (item + 1));
                }
            }
        }

        new* ()
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gacuisrc_unittest::MainWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gacuisrc_unittest-MainWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

