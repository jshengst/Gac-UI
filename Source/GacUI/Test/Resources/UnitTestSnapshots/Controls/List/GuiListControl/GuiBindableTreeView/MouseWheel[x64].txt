================================(1/3)================================
module <constructor>gacuisrc_unittest::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    class MainWindowConstructor
    {
        @cpp:Protected
        var self : ::gacuisrc_unittest::MainWindow* = null of (::gacuisrc_unittest::MainWindow*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var list : ::presentation::controls::GuiBindableTreeView* = null of (::presentation::controls::GuiBindableTreeView*);

        @cpp:Protected
        var logs : ::presentation::controls::GuiTextList* = null of (::presentation::controls::GuiTextList*);

        @cpp:Protected
        func <gacuisrc_unittest-MainWindow>Initialize(<this> : ::gacuisrc_unittest::MainWindow*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.ClientSize = {x : 480; y : 320;} of (::presentation::Size));
            }
            {
                (self.Text = "GuiListControl");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.CellPadding = 5 of (::system::Int64));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 5; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>0.SetRowsAndColumns(1, 2);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Absolute; absolute : 220;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>4 = <precompile>2.BoundsComposition);
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2.Text = "Items");
            }
            {
                (list = new (::presentation::controls::GuiBindableTreeView*)(::presentation::theme::ThemeName::TreeView));
                <this>.SetNamedObject("list", list);
            }
            {
                (list.ChildrenProperty = func (<item> : ::system::Object) : (::system::Enumerable^)
                {
                    var item = (cast (TreeViewData^) <item>);
                    return item.Children;
                });
            }
            {
                (list.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (TreeViewData^) <item>);
                    return item.Text;
                });
            }
            {
                (list.VerticalAlwaysVisible = false);
            }
            {
                (list.HorizontalAlwaysVisible = false);
            }
            (<precompile>3 = list.BoundsComposition);
            {
                (<precompile>3.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                <precompile>2.AddChild(list);
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>8 = <precompile>6.BoundsComposition);
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>6.Text = "Logs");
            }
            {
                (logs = new (::presentation::controls::GuiTextList*)(::presentation::theme::ThemeName::TextList));
                <this>.SetNamedObject("logs", logs);
            }
            {
                (logs.VerticalAlwaysVisible = false);
            }
            {
                (logs.HorizontalAlwaysVisible = false);
            }
            (<precompile>7 = logs.BoundsComposition);
            {
                (<precompile>7.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                <precompile>6.AddChild(logs);
            }
            {
                <precompile>5.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                (list.ItemSource = self.items);
            }
        }

        new ()
        {
        }
    }
}

================================(2/3)================================
module <instance>gacuisrc_unittest::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gacuisrc_unittest
{
    @cpp:File("MainWindow")
    @cpp:Friend(typeof(MainWindowConstructor))
    class MainWindow : ::presentation::controls::GuiWindow, MainWindowConstructor
    {
        var items : TreeViewData^ = new (TreeViewData^)();

        func InitializeItems(start : int, count : int) : (void)
        {
            {
                var <for-begin>item : ::system::Int64 = 1;
                var <for-end>item : ::system::Int64 = count;
                var item = <for-begin>item;
                while ((item <= <for-end>item))
                {
                    {
                        items.Children.Add(new (TreeViewData^)(("Item " & (start + item))));
                    }
                    (item = (item + 1));
                }
            }
        }

        new* ()
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gacuisrc_unittest::MainWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gacuisrc_unittest-MainWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(3/3)================================
module treeviewdata;
using system::*;

class TreeViewData
{
    @cpp:Private
    var <prop>Text : string = "";

    func GetText() : (string)
    {
        return <prop>Text;
    }

    func SetText(<value> : string) : (void)
    {
        (<prop>Text = <value>);
    }

    prop Text : string{GetText, SetText}

    @cpp:Private
    var <prop>Children : observe TreeViewData^[] = {};

    func GetChildren() : (observe TreeViewData^[])
    {
        return <prop>Children;
    }

    @cpp:Protected
    func SetChildren(<value> : observe TreeViewData^[]) : (void)
    {
        (<prop>Children = <value>);
    }

    prop Children : observe TreeViewData^[]{GetChildren}

    new ()
    {
    }

    new (text : string)
    {
        (Text = text);
    }
}

