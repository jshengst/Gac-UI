<Folder>
  <LocalizedStrings name="DialogStringsInjection">
    <LocalizedStringsInjection ref.Class="demo::DialogStringsInjection" ref.InjectInto="gaclib_controls::DialogStrings">
      <Strings Locales="zh-CN">
        <String Name="OK" Text="确定"/>
        <String Name="Cancel" Text="取消"/>
        <String Name="Yes" Text="是"/>
        <String Name="No" Text="否"/>
        <String Name="Retry" Text="重试"/>
        <String Name="Abort" Text="关于"/>
        <String Name="Ignore" Text="忽略"/>
        <String Name="TryAgain" Text="再试一次"/>
        <String Name="Continue" Text="继续"/>

        <String Name="ColorDialogTitle" Text="选择颜色"/>
        <String Name="Red" Text="红色："/>
        <String Name="Green" Text="绿色："/>
        <String Name="Blue" Text="蓝色："/>
        <String Name="Color" Text="颜色："/>

        <String Name="FontDialogTitle" Text="选择字体"/>
        <String Name="FontNameGroup" Text="字体："/>
        <String Name="FontSizeGroup" Text="尺寸："/>
        <String Name="FontEffectGroup" Text="效果："/>
        <String Name="FontColorGroup" Text="颜色："/>
        <String Name="FontColorGroup2" Text="选择颜色："/>
        <String Name="FontPreviewGroup" Text="预览："/>
        <String Name="Bold" Text="粗体"/>
        <String Name="Italic" Text="斜体"/>
        <String Name="Underline" Text="下划线"/>
        <String Name="Strikeline" Text="删除线"/>
        <String Name="HAA" Text="水平抗锯齿"/>
        <String Name="VAA" Text="垂直抗锯齿"/>

        <String Name="FileDialogFileName" Text="文件名："/>
        <String Name="FileDialogOpen" Text="打开"/>
        <String Name="FileDialogSave" Text="保存"/>

        <String Name="FileDialogTextLoadingFolders" Text="（正在加载……）"/>
        <String Name="FileDialogTextLoadingFiles" Text="(正在加载文件夹和文件……)"/>
        <String Name="FileDialogErrorEmptySelection" Text="应该选中至少一个文件。"/>
        <String Name="FileDialogErrorFileNotExist" Text="下列文件不存在："/>
        <String Name="FileDialogErrorFileExpected" Text="下列文件夹不应该被选中："/>
        <String Name="FileDialogErrorFolderNotExist" Text="文件夹不存在："/>
        <String Name="FileDialogErrorMultipleSelectionNotEnabled" Text="本对话框不支持多选。"/>
        <String Name="FileDialogAskCreateFile" Text="你确定想要创建下列文件吗？"/>
        <String Name="FileDialogAskOverrideFile" Text="你确定想要覆盖下列文件吗？"/>
      </Strings>
    </LocalizedStringsInjection>
  </LocalizedStrings>
  
  <Instance name="LocalizedDialogsTabPageResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::LocalizedDialogsTabPage" xmlns:demo="demo::*">
      <TabPage ref.Name="self" Text="Dialogs">
        <Table AlignmentToParent="left:0 top:0 right:0 bottom:0" CellPadding="5" MinSizeLimitation="LimitToElementAndChildren">
          <att.Rows>
            <_>composeType:MinSize</_>
            <_>composeType:Percentage percentage:1.0</_>
          </att.Rows>
          <att.Columns>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
            <_>composeType:Percentage percentage:1.0</_>
          </att.Columns>

          <Cell Site="row:0 column:0">
            <SolidLabel Font-bind="self.DisplayFont" Color="#FFFFFF" Text="Locale only works in FakeDialogService (default in Hosted Mode)" VerticalAlignment="Center"/>
          </Cell>

          <Cell Site="row:0 column:1">
            <demo:LocaleSelector>
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
            </demo:LocaleSelector>
          </Cell>

          <Cell Site="row:1 column:0 columnSpan:3">
            <Tab>
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <att.Pages>
                <demo:LocalizedMessageDialogTabPage Alt="M"/>
                <demo:LocalizedColorDialogTabPage Alt="C"/>
                <demo:LocalizedFontDialogTabPage Alt="F"/>
                <demo:LocalizedFileDialogTabPage Alt="F"/>
              </att.Pages>
            </Tab>
          </Cell>
        </Table>
      </TabPage>
    </Instance>
  </Instance>

  <Instance name="LocalizedMessageDialogTabPageResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::LocalizedMessageDialogTabPage">
      <ref.Members><![CDATA[
        var inputValues : INativeDialogService::MessageBoxButtonsInput[] = {
          INativeDialogService::MessageBoxButtonsInput::DisplayOK;
          INativeDialogService::MessageBoxButtonsInput::DisplayOKCancel;
          INativeDialogService::MessageBoxButtonsInput::DisplayYesNo;
          INativeDialogService::MessageBoxButtonsInput::DisplayYesNoCancel;
          INativeDialogService::MessageBoxButtonsInput::DisplayRetryCancel;
          INativeDialogService::MessageBoxButtonsInput::DisplayAbortRetryIgnore;
          INativeDialogService::MessageBoxButtonsInput::DisplayCancelTryAgainContinue;
        };
        var inputTexts : string[] = {
          "DisplayOK";
          "DisplayOKCancel";
          "DisplayYesNo";
          "DisplayYesNoCancel";
          "DisplayRetryCancel";
          "DisplayAbortRetryIgnore";
          "DisplayCancelTryAgainContinue";
        };

        var defaultButtonValues : INativeDialogService::MessageBoxDefaultButton[] = {
          INativeDialogService::MessageBoxDefaultButton::DefaultFirst;
          INativeDialogService::MessageBoxDefaultButton::DefaultSecond;
          INativeDialogService::MessageBoxDefaultButton::DefaultThird;
        };
        var defaultButtonTexts : string[] = {
          "DefaultFirst";
          "DefaultSecond";
          "DefaultThird";
        };

        var iconValues : INativeDialogService::MessageBoxIcons[] = {
          INativeDialogService::MessageBoxIcons::IconNone;
          INativeDialogService::MessageBoxIcons::IconError;
          INativeDialogService::MessageBoxIcons::IconQuestion;
          INativeDialogService::MessageBoxIcons::IconWarning;
          INativeDialogService::MessageBoxIcons::IconInformation;
        };
        var iconTexts : string[] = {
          "IconNone";
          "IconError";
          "IconQuestion";
          "IconWarning";
          "IconInformation";
        };

        var outputValues : INativeDialogService::MessageBoxButtonsOutput[] = {
          INativeDialogService::MessageBoxButtonsOutput::SelectOK;
          INativeDialogService::MessageBoxButtonsOutput::SelectCancel;
          INativeDialogService::MessageBoxButtonsOutput::SelectYes;
          INativeDialogService::MessageBoxButtonsOutput::SelectNo;
          INativeDialogService::MessageBoxButtonsOutput::SelectRetry;
          INativeDialogService::MessageBoxButtonsOutput::SelectAbort;
          INativeDialogService::MessageBoxButtonsOutput::SelectIgnore;
          INativeDialogService::MessageBoxButtonsOutput::SelectTryAgain;
          INativeDialogService::MessageBoxButtonsOutput::SelectContinue;
        };
        var outputTexts : string[] = {
          "SelectOK";
          "SelectCancel";
          "SelectYes";
          "SelectNo";
          "SelectRetry";
          "SelectAbort";
          "SelectIgnore";
          "SelectTryAgain";
          "SelectContinue";
        };
      ]]></ref.Members>
      <ref.Ctor><![CDATA[
        {
          self.comboInput.SelectedIndex = 0;
          self.comboDefaultButton.SelectedIndex = 0;
          self.comboIcon.SelectedIndex = 0;
        }
      ]]></ref.Ctor>
      <TabPage ref.Name="self" Text="MessageDialog">
        <MessageDialog ref.Name="dialog"/>
        <Table CellPadding="5" BorderVisible="true" AlignmentToParent="left:0 top:0 right:0 bottom:0" MinSizeLimitation="LimitToElementAndChildren">
          <att.Rows>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
          </att.Rows>
          <att.Columns>
            <_>composeType:MinSize</_>
            <_>composeType:Absolute absolute:200</_>
            <_>composeType:Percentage percentage:1.0</_>
          </att.Columns>

          <Cell Site="row:0 column:0"><Label Text="Title:"/></Cell>
          <Cell Site="row:1 column:0"><Label Text="Text:"/></Cell>
          <Cell Site="row:2 column:0"><Label Text="Input:"/></Cell>
          <Cell Site="row:3 column:0"><Label Text="DefaultButton:"/></Cell>
          <Cell Site="row:4 column:0"><Label Text="Icon:"/></Cell>
          <Cell Site="row:5 column:0"><Label Text="Output:"/></Cell>

          <Cell Site="row:0 column:1">
            <SinglelineTextBox ref.Name="txtTitle" Text="The Title">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
            </SinglelineTextBox>
          </Cell>

          <Cell Site="row:1 column:1">
            <SinglelineTextBox ref.Name="txtText" Text="This is a message!">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
            </SinglelineTextBox>
          </Cell>

          <Cell Site="row:2 column:1">
            <ComboBox ref.Name="comboInput">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <att.ListControl>
                <BindableTextList ItemSource-eval="self.inputTexts" TextProperty-eval="[cast string $1]" HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false"/>
              </att.ListControl>
            </ComboBox>
          </Cell>

          <Cell Site="row:3 column:1">
            <ComboBox ref.Name="comboDefaultButton">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <att.ListControl>
                <BindableTextList ItemSource-eval="self.defaultButtonTexts" TextProperty-eval="[cast string $1]" HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false"/>
              </att.ListControl>
            </ComboBox>
          </Cell>

          <Cell Site="row:4 column:1">
            <ComboBox ref.Name="comboIcon">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <att.ListControl>
                <BindableTextList ItemSource-eval="self.iconTexts" TextProperty-eval="[cast string $1]" HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false"/>
              </att.ListControl>
            </ComboBox>
          </Cell>

          <Cell Site="row:5 column:1">
            <Label ref.Name="lblOutput"/>
          </Cell>

          <Cell Site="row:6 column:1">
            <Button Text="Show Dialog">
              <ev.Clicked-eval><![CDATA[
                {
                  dialog.Title = txtTitle.Text;
                  dialog.Text = txtText.Text;
                  dialog.Input = self.inputValues[comboInput.SelectedIndex];
                  dialog.DefaultButton = self.defaultButtonValues[comboDefaultButton.SelectedIndex];
                  dialog.Icon = self.iconValues[comboIcon.SelectedIndex];
                  var result = dialog.ShowDialog();
                  lblOutput.Text = self.outputTexts[self.outputValues.IndexOf(result)];
                }
              ]]></ev.Clicked-eval>
            </Button>
          </Cell>
        </Table>
      </TabPage>
    </Instance>
  </Instance>

  <Instance name="LocalizedColorDialogTabPageResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::LocalizedColorDialogTabPage">
      <TabPage ref.Name="self" Text="ColorDialog">
        <ColorDialog ref.Name="dialog" EnabledCustomColor="true"/>
        <Table CellPadding="5" BorderVisible="true" AlignmentToParent="left:0 top:0 right:0 bottom:0" MinSizeLimitation="LimitToElementAndChildren">
          <att.Rows>
            <_>composeType:Absolute absolute:30</_>
            <_>composeType:MinSize</_>
          </att.Rows>
          <att.Columns>
            <_>composeType:Absolute absolute:100</_>
            <_>composeType:Percentage percentage:1.0</_>
          </att.Columns>

          <Cell Site="row:0 column:0">
            <SolidBackground ref.Name="background" Color="#FFFFFF"/>
          </Cell>

          <Cell Site="row:1 column:0">
            <Button Text="Show Dialog">
              <ev.Clicked-eval><![CDATA[
                {
                  dialog.SelectedColor = background.Color;
                  if (dialog.ShowDialog())
                  {
                    background.Color = dialog.SelectedColor;
                  }
                }
              ]]></ev.Clicked-eval>
            </Button>
          </Cell>
        </Table>
      </TabPage>
    </Instance>
  </Instance>

  <Instance name="LocalizedFontDialogTabPageResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::LocalizedFontDialogTabPage">
      <TabPage ref.Name="self" Text="FontDialog">
        <FontDialog ref.Name="dialog" ForceFontExist="true"/>
        <Table CellPadding="5" BorderVisible="true" AlignmentToParent="left:0 top:0 right:0 bottom:0" MinSizeLimitation="LimitToElementAndChildren">
          <att.Rows>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
            <_>composeType:MinSize</_>
          </att.Rows>
          <att.Columns>
            <_>composeType:MinSize</_>
            <_>composeType:Percentage percentage:1.0</_>
          </att.Columns>

          <Cell Site="row:0 column:0">
            <SolidLabel ref.Name="label" Font-eval="self.DisplayFont" Color="#FFFFFF" Text="Sample Text"/>
          </Cell>

          <Cell Site="row:1 column:0">
            <CheckBox ref.Name="checkEffect" Text="Effect" Selected="false"/>
          </Cell>

          <Cell Site="row:2 column:0">
            <Button Text="Show Dialog">
              <ev.Clicked-eval><![CDATA[
                {
                  dialog.ShowEffect = checkEffect.Selected;
                  dialog.SelectedFont = label.Font;
                  dialog.SelectedColor = label.Color;
                  if (dialog.ShowDialog())
                  {
                    label.Font = dialog.SelectedFont;
                    label.Color = dialog.SelectedColor;
                  }
                }
              ]]></ev.Clicked-eval>
            </Button>
          </Cell>
        </Table>
      </TabPage>
    </Instance>
  </Instance>

  <Instance name="LocalizedFileDialogTabPageResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::LocalizedFileDialogTabPage">
      <ref.Members><![CDATA[
        func SetDialogProperties(dialog : GuiFileDialogBase*) : void
        {
          dialog.Title = txtTitle.Text;
          dialog.Directory = txtDirectory.Text;
          dialog.FileName = txtFileName.Text;
          dialog.Filter = txtFilter.Text;
          dialog.FilterIndex = (cast int txtFilterIndex.Text) ?? 0;
          dialog.DefaultExtension = txtDefaultExtension.Text;

          var options : INativeDialogService::FileDialogOptions = None;
          if (chkFileDialogAllowMultipleSelection.Selected) { options = options | INativeDialogService::FileDialogOptions::FileDialogAllowMultipleSelection; }
          if (chkFileDialogFileMustExist.Selected)          { options = options | INativeDialogService::FileDialogOptions::FileDialogFileMustExist;          }
          if (chkFileDialogShowReadOnlyCheckBox.Selected)   { options = options | INativeDialogService::FileDialogOptions::FileDialogShowReadOnlyCheckBox;   }
          if (chkFileDialogDereferenceLinks.Selected)       { options = options | INativeDialogService::FileDialogOptions::FileDialogDereferenceLinks;       }
          if (chkFileDialogShowNetworkButton.Selected)      { options = options | INativeDialogService::FileDialogOptions::FileDialogShowNetworkButton;      }
          if (chkFileDialogPromptCreateFile.Selected)       { options = options | INativeDialogService::FileDialogOptions::FileDialogPromptCreateFile;       }
          if (chkFileDialogPromptOverwriteFile.Selected)    { options = options | INativeDialogService::FileDialogOptions::FileDialogPromptOverwriteFile;    }
          if (chkFileDialogDirectoryMustExist.Selected)     { options = options | INativeDialogService::FileDialogOptions::FileDialogDirectoryMustExist;     }
          if (chkFileDialogAddToRecent.Selected)            { options = options | INativeDialogService::FileDialogOptions::FileDialogAddToRecent;            }
          dialog.Options = options;
        }
      ]]></ref.Members>
      <TabPage ref.Name="self" Text="Open/Save FileDialog">
        <OpenFileDialog ref.Name="dialogOpen"/>
        <SaveFileDialog ref.Name="dialogSave"/>
        <Stack Direction="Vertical" Padding="5" AlignmentToParent="left:5 top:5 right:5 bottom:5" MinSizeLimitation="LimitToElementAndChildren">
          <StackItem>
            <Table CellPadding="5" BorderVisible="false" AlignmentToParent="left:0 top:0 right:0 bottom:0" MinSizeLimitation="LimitToElementAndChildren">
              <att.Rows>
                <_>composeType:MinSize</_>
                <_>composeType:MinSize</_>
                <_>composeType:MinSize</_>
                <_>composeType:MinSize</_>
                <_>composeType:MinSize</_>
                <_>composeType:MinSize</_>
                <_>composeType:Percentage percentage:1.0</_>
              </att.Rows>
              <att.Columns>
                <_>composeType:MinSize</_>
                <_>composeType:Absolute absolute:200</_>
                <_>composeType:MinSize</_>
                <_>composeType:Percentage percentage:1.0</_>
              </att.Columns>

              <Cell Site="row:0 column:0"><Label Text="Title:"/></Cell>
              <Cell Site="row:1 column:0"><Label Text="Directory:"/></Cell>
              <Cell Site="row:2 column:0"><Label Text="FileName:"/></Cell>
              <Cell Site="row:3 column:0"><Label Text="Filter:"/></Cell>
              <Cell Site="row:4 column:0"><Label Text="FilterIndex:"/></Cell>
              <Cell Site="row:5 column:0"><Label Text="DefaultExtension:"/></Cell>

              <Cell Site="row:0 column:1">
                <SinglelineTextBox ref.Name="txtTitle" Text="The Title">
                  <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
                </SinglelineTextBox>
              </Cell>

              <Cell Site="row:1 column:1">
                <SinglelineTextBox ref.Name="txtDirectory" Text="C:\">
                  <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
                </SinglelineTextBox>
              </Cell>

              <Cell Site="row:2 column:1">
                <SinglelineTextBox ref.Name="txtFileName" Text="C:\File.txt">
                  <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
                </SinglelineTextBox>
              </Cell>

              <Cell Site="row:3 column:1">
                <SinglelineTextBox ref.Name="txtFilter" Text="Text Files (*.txt)|*.txt|XML Files (*.xml)|*.xml|All Files (*.*)|*.*">
                  <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
                </SinglelineTextBox>
              </Cell>

              <Cell Site="row:4 column:1">
                <SinglelineTextBox ref.Name="txtFilterIndex" Text="0">
                  <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
                </SinglelineTextBox>
              </Cell>

              <Cell Site="row:5 column:1">
                <SinglelineTextBox ref.Name="txtDefaultExtension" Text="txt">
                  <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
                </SinglelineTextBox>
              </Cell>

              <Cell Site="row:0 column:2 rowSpan:7">
                <Stack Direction="Vertical" AlignmentToParent="left:0 top:0 right:0 bottom:0" MinSizeLimitation="LimitToElementAndChildren">
                  <StackItem><CheckBox ref.Name="chkFileDialogAllowMultipleSelection" Text="FileDialogAllowMultipleSelection"/></StackItem>
                  <StackItem><CheckBox ref.Name="chkFileDialogFileMustExist" Text="FileDialogFileMustExist"/></StackItem>
                  <StackItem><CheckBox ref.Name="chkFileDialogShowReadOnlyCheckBox" Text="FileDialogShowReadOnlyCheckBox"/></StackItem>
                  <StackItem><CheckBox ref.Name="chkFileDialogDereferenceLinks" Text="FileDialogDereferenceLinks"/></StackItem>
                  <StackItem><CheckBox ref.Name="chkFileDialogShowNetworkButton" Text="FileDialogShowNetworkButton"/></StackItem>
                  <StackItem><CheckBox ref.Name="chkFileDialogPromptCreateFile" Text="FileDialogPromptCreateFile"/></StackItem>
                  <StackItem><CheckBox ref.Name="chkFileDialogPromptOverwriteFile" Text="FileDialogPromptOverwriteFile"/></StackItem>
                  <StackItem><CheckBox ref.Name="chkFileDialogDirectoryMustExist" Text="FileDialogDirectoryMustExist"/></StackItem>
                  <StackItem><CheckBox ref.Name="chkFileDialogAddToRecent" Text="FileDialogAddToRecent"/></StackItem>
                </Stack>
              </Cell>
            </Table>
          </StackItem>

          <StackItem><Label Text="Selected Files:"/></StackItem>

          <StackItem>
            <BindableTextList ref.Name="lstFiles" VerticalAlwaysVisible="false" HorizontalAlwaysVisible="false">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0" PreferredMinSize="y:80"/>
              <att.TextProperty-eval>[cast string $1]</att.TextProperty-eval>
            </BindableTextList>
          </StackItem>

          <StackItem>
            <Stack Direction="Horizontal" Padding="5" AlignmentToParent="left:0 top:0 right:0 bottom:0" MinSizeLimitation="LimitToElementAndChildren">
              <StackItem>
                <Button Text="Show Open File Dialog">
                  <ev.Clicked-eval><![CDATA[
                    {
                      self.SetDialogProperties(dialogOpen);
                      if (dialogOpen.ShowDialog())
                      {
                        lstFiles.ItemSource = dialogOpen.FileNames;
                      }
                    }
                  ]]></ev.Clicked-eval>
                </Button>
              </StackItem>
              <StackItem>
                <Button Text="Show Save File Dialog">
                  <ev.Clicked-eval><![CDATA[
                    {
                      self.SetDialogProperties(dialogSave);
                      if (dialogSave.ShowDialog())
                      {
                        lstFiles.ItemSource = {dialogSave.FileName} of string[];
                      }
                    }
                  ]]></ev.Clicked-eval>
                </Button>
              </StackItem>
            </Stack>
          </StackItem>
        </Stack>
      </TabPage>
    </Instance>
  </Instance>
</Folder>