@ValueType
enum presentation::Alignment {
    Bottom = 2,
    Center = 1,
    Left = 0,
    Right = 2,
    Top = 0,
}

@ValueType
enum presentation::AxisDirection {
    DownLeft = 4,
    DownRight = 5,
    LeftDown = 0,
    LeftUp = 2,
    RightDown = 1,
    RightUp = 3,
    UpLeft = 6,
    UpRight = 7,
}

@ValueType
enum presentation::BoolOption {
    AlwaysFalse = 1,
    AlwaysTrue = 0,
    Customizable = 2,
}

@ValueType
@Serializable
struct presentation::Color {
    property a : system::UInt8;
    property b : system::UInt8;
    property g : system::UInt8;
    property r : system::UInt8;
    property value : system::UInt32;
}

class presentation::DocumentContainerRun : presentation::DocumentRun {
    property runs : system::List<presentation::DocumentRun^>^ { get }

}

class presentation::DocumentContentRun : presentation::DocumentRun {
    property RepresentationText : system::String { get:GetRepresentationText }

    function GetRepresentationText() : system::String;

}

class presentation::DocumentEmbeddedObjectRun : presentation::DocumentInlineObjectRun {
    property name : system::String;

    constructor () : presentation::DocumentEmbeddedObjectRun^;
}

@ValueType
@Serializable
struct presentation::DocumentFontSize {
    property relative : system::Boolean;
    property size : system::Double;
}

class presentation::DocumentHyperlinkRun : presentation::DocumentStyleApplicationRun {
    property activeStyleName : system::String;
    property normalStyleName : system::String;
    property reference : system::String;

    constructor () : presentation::DocumentHyperlinkRun^;
}

class presentation::DocumentHyperlinkRun::Package : system::ReferenceType {
    property end : system::Int64;
    property hyperlinks : system::List<presentation::DocumentHyperlinkRun^>^ { get }
    property row : system::Int64;
    property start : system::Int64;

}

class presentation::DocumentImageRun : presentation::DocumentInlineObjectRun {
    property frameIndex : system::Int64;
    property image : presentation::INativeImage^;
    property source : system::String;

    constructor () : presentation::DocumentImageRun^;
}

class presentation::DocumentInlineObjectRun : presentation::DocumentContentRun {
    property baseline : system::Int64;
    property size : presentation::Size;

}

class presentation::DocumentModel : system::ReferenceType {
    property paragraphs : system::List<presentation::DocumentParagraphRun^>^ { get }
    property styles : system::Dictionary<system::String, presentation::DocumentStyle^>^ { get }

    function GetText(skipNonTextContent : system::Boolean) : system::String;
    static function LoadFromXml(resource : presentation::GuiResourceItem^, xml : system::XmlDocument^, workingDirectory : presentation::GuiResourcePathResolver^, errors : system::List<presentation::GuiResourceError>^) : presentation::DocumentModel^;
    function SaveToXml() : system::XmlDocument^;

    constructor () : presentation::DocumentModel^;
}

class presentation::DocumentParagraphRun : presentation::DocumentContainerRun {
    property alignment : presentation::Alignment?;

    function GetText(skipNonTextContent : system::Boolean) : system::String;

    constructor () : presentation::DocumentParagraphRun^;
}

class presentation::DocumentRun : system::ReferenceType {
}

class presentation::DocumentStyle : system::ReferenceType {
    property parentStyleName : system::String;
    property resolvedStyles : presentation::DocumentStyleProperties^;
    property styles : presentation::DocumentStyleProperties^;

    constructor () : presentation::DocumentStyle^;
}

class presentation::DocumentStyleApplicationRun : presentation::DocumentContainerRun {
    property styleName : system::String;

    constructor () : presentation::DocumentStyleApplicationRun^;
}

class presentation::DocumentStyleProperties : system::ReferenceType {
    property antialias : system::Boolean?;
    property backgroundColor : presentation::Color?;
    property bold : system::Boolean?;
    property color : presentation::Color?;
    property face : system::String?;
    property italic : system::Boolean?;
    property size : presentation::DocumentFontSize?;
    property strikeline : system::Boolean?;
    property underline : system::Boolean?;
    property verticalAntialias : system::Boolean?;

    constructor () : presentation::DocumentStyleProperties^;
}

class presentation::DocumentStylePropertiesRun : presentation::DocumentContainerRun {
    property style : presentation::DocumentStyleProperties^;

    constructor () : presentation::DocumentStylePropertiesRun^;
}

class presentation::DocumentTextRun : presentation::DocumentContentRun {
    property text : system::String;

    constructor () : presentation::DocumentTextRun^;
}

@ValueType
enum presentation::FileDialogFileType {
    File = 2,
    Folder = 1,
    Placeholder = 0,
}

@ValueType
enum presentation::FileDialogFolderType {
    Folder = 2,
    Placeholder = 1,
    Root = 0,
}

@ValueType
struct presentation::FontProperties {
    property antialias : system::Boolean;
    property bold : system::Boolean;
    property fontFamily : system::String;
    property italic : system::Boolean;
    property size : system::Int64;
    property strikeline : system::Boolean;
    property underline : system::Boolean;
    property verticalAntialias : system::Boolean;
}

@ValueType
@Serializable
primitive presentation::GlobalStringKey;

@ValueType
struct presentation::GridPos {
    property column : system::Int64;
    property row : system::Int64;
}

class presentation::GuiImageData : system::ReferenceType {
    property FrameIndex : system::Int64 { get:GetFrameIndex }
    property Image : presentation::INativeImage^ { get:GetImage }

    function GetFrameIndex() : system::Int64;
    function GetImage() : presentation::INativeImage^;

    constructor () : presentation::GuiImageData^;
    constructor (image : presentation::INativeImage^, frameIndex : system::Int64) : presentation::GuiImageData^;
}

class presentation::GuiResource : system::ReferenceType {
    property WorkingDirectory : system::String { get:GetWorkingDirectory }

    function GetDocumentByPath(path : system::String) : presentation::DocumentModel^;
    function GetImageByPath(path : system::String) : presentation::GuiImageData^;
    function GetStringByPath(path : system::String) : system::String;
    function GetWorkingDirectory() : system::String;
    function GetXmlByPath(path : system::String) : system::XmlDocument^;

    constructor () : presentation::GuiResource^;
}

@ValueType
struct presentation::GuiResourceError {
    property location : presentation::GuiResourceLocation;
    property message : system::String;
    property position : presentation::GuiResourceTextPos;
}

class presentation::GuiResourceFolder : presentation::GuiResourceNodeBase {
    property Folders : system::ReadonlyList<presentation::GuiResourceFolder^>^ { get:GetFolders }
    property Items : system::ReadonlyList<presentation::GuiResourceItem^>^ { get:GetItems }

    function AddFolder(name : system::String, folder : presentation::GuiResourceFolder^) : system::Boolean;
    function AddItem(name : system::String, item : presentation::GuiResourceItem^) : system::Boolean;
    function ClearFolders() : system::Void;
    function ClearItems() : system::Void;
    function CreateValueByPath(path : system::String, typeName : system::String, value : system::ReferenceType^) : system::Boolean;
    function GetFolder(name : system::String) : presentation::GuiResourceFolder^;
    function GetFolderByPath(path : system::String) : presentation::GuiResourceFolder^;
    function GetFolders() : system::ReadonlyList<presentation::GuiResourceFolder^>^;
    function GetItem(name : system::String) : presentation::GuiResourceItem^;
    function GetItems() : system::ReadonlyList<presentation::GuiResourceItem^>^;
    function GetValueByPath(path : system::String) : system::ReferenceType^;
    function RemoveFolder(name : system::String) : presentation::GuiResourceFolder^;
    function RemoveItem(name : system::String) : presentation::GuiResourceItem^;

}

class presentation::GuiResourceItem : presentation::GuiResourceNodeBase {
    function AsDocument() : presentation::DocumentModel^;
    function AsImage() : presentation::GuiImageData^;
    function AsString() : presentation::GuiTextData^;
    function AsXml() : system::XmlDocument^;
    function GetContent() : system::ReferenceType^;
    function SetContent(typeName : system::String, value : system::ReferenceType^) : system::Void;

}

@ValueType
struct presentation::GuiResourceLocation {
    property filePath : system::String;
    property resourcePath : system::String;
}

class presentation::GuiResourceNodeBase : system::ReferenceType {
    property FileAbsolutePath : system::String { get:GetFileAbsolutePath }
    property FileContentPath : system::String { get:GetFileContentPath }
    property Name : system::String { get:GetName }
    property Parent : presentation::GuiResourceFolder* { get:GetParent }
    property ResourcePath : system::String { get:GetResourcePath }

    function GetFileAbsolutePath() : system::String;
    function GetFileContentPath() : system::String;
    function GetName() : system::String;
    function GetParent() : presentation::GuiResourceFolder*;
    function GetResourcePath() : system::String;
    function SetFileContentPath(content : system::String, absolute : system::String) : system::Void;

}

class presentation::GuiResourcePathResolver : system::ReferenceType {
    function ResolveResource(protocol : system::String, path : system::String) : system::ReferenceType^;

    constructor (resource : presentation::GuiResource^, workingDirectory : system::String) : presentation::GuiResourcePathResolver^;
}

@ValueType
struct presentation::GuiResourceTextPos {
    property column : system::Int64;
    property originalLocation : presentation::GuiResourceLocation;
    property row : system::Int64;
}

@ValueType
enum presentation::GuiResourceUsage {
    DataOnly = 0,
    InstanceClass = 1,
}

class presentation::GuiTextData : system::ReferenceType {
    property Text : system::String { get:GetText }

    function GetText() : system::String;

    constructor () : presentation::GuiTextData^;
    constructor (text : system::String) : presentation::GuiTextData^;
}

interface presentation::IColorDialogViewModel : presentation::IDialogConfirmation {
    property Color : presentation::Color { get:GetColor set:SetColor }

    function GetColor() : presentation::Color;
    function SetColor(value : presentation::Color) : system::Void;

}

interface presentation::ICommonFontDialogViewModel : system::Interface {
    property FontList : system::ReadonlyList<system::String>^ { get:GetFontList }
    property FontMustExist : system::Boolean { get:GetFontMustExist }

    function GetFontList() : system::ReadonlyList<system::String>^;
    function GetFontMustExist() : system::Boolean;

}

interface presentation::IDialogConfirmation : system::Interface {
    property Confirmed : system::Boolean { get:GetConfirmed set:SetConfirmed }

    function GetConfirmed() : system::Boolean;
    function SetConfirmed(value : system::Boolean) : system::Void;

}

interface presentation::IFileDialogFile : system::Interface {
    property AssociatedFolder : presentation::IFileDialogFolder^ { get:GetAssociatedFolder }
    property Name : system::String { get:GetName }
    property Type : presentation::FileDialogFileType { get:GetType }

    function GetAssociatedFolder() : presentation::IFileDialogFolder^;
    function GetName() : system::String;
    function GetType() : presentation::FileDialogFileType;

}

interface presentation::IFileDialogFilter : system::Interface {
    property DefaultExtension : system::String? { get:GetDefaultExtension }
    property Filter : system::String { get:GetFilter }
    property Name : system::String { get:GetName }

    function FilterFile(file : presentation::IFileDialogFile^) : system::Boolean;
    function GetDefaultExtension() : system::String?;
    function GetFilter() : system::String;
    function GetName() : system::String;

}

interface presentation::IFileDialogFolder : system::Interface {
    property Folders : system::ObservableList<presentation::IFileDialogFolder^>^ { get:GetFolders }
    property FullPath : system::String { get:GetFullPath }
    property Index : system::Int64 { get:GetIndex }
    property Name : system::String { get:GetName }
    property Parent : presentation::IFileDialogFolder^ { get:GetParent }
    property Type : presentation::FileDialogFolderType { get:GetType }

    function GetFolders() : system::ObservableList<presentation::IFileDialogFolder^>^;
    function GetFullPath() : system::String;
    function GetIndex() : system::Int64;
    function GetName() : system::String;
    function GetParent() : presentation::IFileDialogFolder^;
    function GetType() : presentation::FileDialogFolderType;
    function TryGetFolder(name : system::String) : presentation::IFileDialogFolder^;

}

interface presentation::IFileDialogViewModel : system::Interface {
    event IsLoadingFilesChanged : system::Function<system::Void>^ observing {
        IsLoadingFiles,
    }
    event SelectedFilterChanged : system::Function<system::Void>^ observing {
        SelectedFilter,
    }
    event SelectedFolderChanged : system::Function<system::Void>^ observing {
        SelectedFolder,
    }

    property DefaultExtension : system::String { get:GetDefaultExtension }
    property EnabledMultipleSelection : system::Boolean { get:GetEnabledMultipleSelection }
    property Files : system::ObservableList<presentation::IFileDialogFile^>^ { get:GetFiles }
    property Filters : system::ReadonlyList<presentation::IFileDialogFilter^>^ { get:GetFilters }
    property IsLoadingFiles : system::Boolean { get:GetIsLoadingFiles event:IsLoadingFilesChanged }
    property RootFolder : presentation::IFileDialogFolder^ { get:GetRootFolder }
    property SelectedFilter : presentation::IFileDialogFilter^ { get:GetSelectedFilter set:SetSelectedFilter event:SelectedFilterChanged }
    property SelectedFolder : presentation::IFileDialogFolder^ { get:GetSelectedFolder set:SetSelectedFolder event:SelectedFolderChanged }
    property Title : system::String { get:GetTitle }

    function GetDefaultExtension() : system::String;
    function GetDisplayString(files : system::Enumerable<presentation::IFileDialogFile^>^) : system::String;
    function GetEnabledMultipleSelection() : system::Boolean;
    function GetFiles() : system::ObservableList<presentation::IFileDialogFile^>^;
    function GetFilters() : system::ReadonlyList<presentation::IFileDialogFilter^>^;
    function GetIsLoadingFiles() : system::Boolean;
    function GetRootFolder() : presentation::IFileDialogFolder^;
    function GetSelectedFilter() : presentation::IFileDialogFilter^;
    function GetSelectedFolder() : presentation::IFileDialogFolder^;
    function GetTitle() : system::String;
    function InitLocalizedText(textLoadingFolders : system::String, textLoadingFiles : system::String, dialogErrorEmptySelection : system::String, dialogErrorFileNotExist : system::String, dialogErrorFileExpected : system::String, dialogErrorFolderNotExist : system::String, dialogErrorMultipleSelectionNotEnabled : system::String, dialogAskCreateFile : system::String, dialogAskOverrideFile : system::String) : system::Void;
    function ParseDisplayString(displayString : system::String) : system::Enumerable<system::String>^;
    function RefreshFiles() : system::Void;
    function SetSelectedFilter(value : presentation::IFileDialogFilter^) : system::Void;
    function SetSelectedFolder(value : presentation::IFileDialogFolder^) : system::Void;
    function TryConfirm(owner : presentation::controls::GuiWindow*, selection : system::Enumerable<system::String>^) : system::Boolean;

}

interface presentation::IFullFontDialogViewModel : presentation::ICommonFontDialogViewModel, presentation::IColorDialogViewModel {
    property Font : presentation::FontProperties { get:GetFont set:SetFont }

    function GetFont() : presentation::FontProperties;
    function SelectColor(owner : presentation::controls::GuiWindow*) : system::Boolean;
    function SetFont(value : presentation::FontProperties) : system::Void;

}

interface presentation::IGuiResourceManager : system::Interface {
    function GetResource(name : system::String) : presentation::GuiResource^;
    function GetResourceFromClassName(name : system::String) : presentation::GuiResource^;
    @InvokeTemplate:::vl::presentation::GetResourceManager($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::GetResourceManager)
    static function GetResourceManager() : presentation::IGuiResourceManager*;
    function SetResource(name : presentation::GuiResource^, resource : system::List<presentation::GuiResourceError>^, usage : presentation::GuiResourceUsage) : system::Void;

}

interface presentation::IMessageBoxDialogAction : system::Interface {
    property Button : presentation::INativeDialogService::MessageBoxButtonsOutput { get:GetButton }

    function GetButton() : presentation::INativeDialogService::MessageBoxButtonsOutput;
    function PerformAction() : system::Void;

}

interface presentation::IMessageBoxDialogViewModel : system::Interface {
    property Buttons : system::ReadonlyList<presentation::IMessageBoxDialogAction^>^ { get:GetButtons }
    property DefaultButton : presentation::IMessageBoxDialogAction^ { get:GetDefaultButton }
    property Icon : presentation::INativeDialogService::MessageBoxIcons { get:GetIcon }
    property Result : presentation::IMessageBoxDialogAction^ { get:GetResult }
    property Text : system::String { get:GetText }
    property Title : system::String { get:GetTitle }

    function GetButtons() : system::ReadonlyList<presentation::IMessageBoxDialogAction^>^;
    function GetDefaultButton() : presentation::IMessageBoxDialogAction^;
    function GetIcon() : presentation::INativeDialogService::MessageBoxIcons;
    function GetResult() : presentation::IMessageBoxDialogAction^;
    function GetText() : system::String;
    function GetTitle() : system::String;

}

interface presentation::INativeAsyncService : system::Interface {
    function DelayExecute(proc : system::Function<system::Void>^, milliseconds : system::Int64) : presentation::INativeDelay^;
    function DelayExecuteInMainThread(proc : system::Function<system::Void>^, milliseconds : system::Int64) : presentation::INativeDelay^;
    function InvokeAsync(proc : system::Function<system::Void>^) : system::Void;
    function InvokeInMainThread(window : presentation::INativeWindow*, proc : system::Function<system::Void>^) : system::Void;
    function InvokeInMainThreadAndWait(window : presentation::INativeWindow*, proc : system::Function<system::Void>^, milliseconds : system::Int64) : system::Boolean;
    function IsInMainThread(type : presentation::INativeWindow*) : system::Boolean;

}

interface presentation::INativeClipboardReader : system::Interface {
    function ContainsDocument() : system::Boolean;
    function ContainsImage() : system::Boolean;
    function ContainsText() : system::Boolean;
    function GetDocument() : presentation::DocumentModel^;
    function GetImage() : presentation::INativeImage^;
    function GetText() : system::String;

}

interface presentation::INativeClipboardService : system::Interface {
    function ReadClipboard() : presentation::INativeClipboardReader^;
    function WriteClipboard() : presentation::INativeClipboardWriter^;

}

interface presentation::INativeClipboardWriter : system::Interface {
    function SetDocument(value : presentation::DocumentModel^) : system::Void;
    function SetImage(value : presentation::INativeImage^) : system::Void;
    function SetText(value : system::String) : system::Void;
    function Submit() : system::Boolean;

}

interface presentation::INativeController : system::Interface {
    property ExecutablePath : system::String { get:GetExecutablePath }

    function AsyncService() : presentation::INativeAsyncService*;
    function ClipboardService() : presentation::INativeClipboardService*;
    @InvokeTemplate:::vl::presentation::GetCurrentController($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::GetCurrentController)
    static function GetCurrentController() : presentation::INativeController*;
    function GetExecutablePath() : system::String;
    function ImageService() : presentation::INativeImageService*;
    function InputService() : presentation::INativeInputService*;
    function ResourceService() : presentation::INativeResourceService*;
    function ScreenService() : presentation::INativeScreenService*;

}

interface presentation::INativeCursor : system::Interface {
    function GetSystemCursorType() : presentation::INativeCursor::SystemCursorType;
    function IsSystemCursor() : system::Boolean;

    @InvokeTemplate:::vl::reflection::description::INativeCursor_Constructor1($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::INativeCursor_Constructor1)
    constructor () : presentation::INativeCursor*;
    @InvokeTemplate:::vl::reflection::description::INativeCursor_Constructor2($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::INativeCursor_Constructor2)
    constructor ( : presentation::INativeCursor::SystemCursorType) : presentation::INativeCursor*;
}

@ValueType
enum presentation::INativeCursor::SystemCursorType {
    Arrow = 2,
    Cross = 3,
    Hand = 4,
    Help = 5,
    IBeam = 6,
    LargeWaiting = 1,
    SizeAll = 7,
    SizeNESW = 8,
    SizeNS = 9,
    SizeNWSE = 10,
    SizeWE = 11,
    SmallWaiting = 0,
}

interface presentation::INativeDelay : system::Interface {
    property Status : presentation::INativeDelay::ExecuteStatus { get:GetStatus }

    function Cancel() : system::Boolean;
    function Delay(milliseconds : system::Int64) : system::Boolean;
    function GetStatus() : presentation::INativeDelay::ExecuteStatus;

}

@ValueType
enum presentation::INativeDelay::ExecuteStatus {
    Canceled = 3,
    Executed = 2,
    Executing = 1,
    Pending = 0,
}

@ValueType
enum presentation::INativeDialogService::ColorDialogCustomColorOptions {
    CustomColorDisabled = 0,
    CustomColorEnabled = 1,
    CustomColorOpened = 2,
}

@ValueType
@Flags
enum presentation::INativeDialogService::FileDialogOptions {
    FileDialogAddToRecent = 256,
    FileDialogAllowMultipleSelection = 1,
    FileDialogDereferenceLinks = 8,
    FileDialogDirectoryMustExist = 128,
    FileDialogFileMustExist = 2,
    FileDialogPromptCreateFile = 32,
    FileDialogPromptOverwriteFile = 64,
    FileDialogShowNetworkButton = 16,
    FileDialogShowReadOnlyCheckBox = 4,
    None = 0,
}

@ValueType
enum presentation::INativeDialogService::FileDialogTypes {
    FileDialogOpen = 0,
    FileDialogOpenPreview = 1,
    FileDialogSave = 2,
    FileDialogSavePreview = 3,
}

@ValueType
enum presentation::INativeDialogService::MessageBoxButtonsInput {
    DisplayAbortRetryIgnore = 5,
    DisplayCancelTryAgainContinue = 6,
    DisplayOK = 0,
    DisplayOKCancel = 1,
    DisplayRetryCancel = 4,
    DisplayYesNo = 2,
    DisplayYesNoCancel = 3,
}

@ValueType
enum presentation::INativeDialogService::MessageBoxButtonsOutput {
    SelectAbort = 5,
    SelectCancel = 1,
    SelectContinue = 8,
    SelectIgnore = 6,
    SelectNo = 3,
    SelectOK = 0,
    SelectRetry = 4,
    SelectTryAgain = 7,
    SelectYes = 2,
}

@ValueType
enum presentation::INativeDialogService::MessageBoxDefaultButton {
    DefaultFirst = 0,
    DefaultSecond = 1,
    DefaultThird = 2,
}

@ValueType
enum presentation::INativeDialogService::MessageBoxIcons {
    IconError = 1,
    IconInformation = 4,
    IconNone = 0,
    IconQuestion = 2,
    IconWarning = 3,
}

@ValueType
enum presentation::INativeDialogService::MessageBoxModalOptions {
    ModalSystem = 2,
    ModalTask = 1,
    ModalWindow = 0,
}

interface presentation::INativeImage : system::Interface {
    function GetFormat() : presentation::INativeImage::FormatType;
    function GetFrame(index : system::Int64) : presentation::INativeImageFrame*;
    function GetFrameCount() : system::Int64;

    @InvokeTemplate:::vl::reflection::description::INativeImage_Constructor($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::INativeImage_Constructor)
    constructor (filePath : system::String) : presentation::INativeImage^;
}

@ValueType
enum presentation::INativeImage::FormatType {
    Bmp = 0,
    Gif = 1,
    Icon = 2,
    Jpeg = 3,
    Png = 4,
    Tiff = 5,
    Unknown = 7,
    Wmp = 6,
}

interface presentation::INativeImageFrame : system::Interface {
    function GetImage() : presentation::INativeImage*;
    function GetSize() : presentation::Size;

}

interface presentation::INativeImageService : system::Interface {
    function CreateImageFromFile(path : system::String) : presentation::INativeImage^;

}

interface presentation::INativeInputService : system::Interface {
    function GetKey(name : system::String) : presentation::VKEY;
    function GetKeyName(code : presentation::VKEY) : system::String;
    function IsKeyPressing(code : presentation::VKEY) : system::Boolean;
    function IsKeyToggled(code : presentation::VKEY) : system::Boolean;
    function RegisterGlobalShortcutKey(ctrl : system::Boolean, shift : system::Boolean, alt : system::Boolean, key : presentation::VKEY) : system::Int64;
    function UnregisterGlobalShortcutKey(id : system::Int64) : system::Boolean;

}

interface presentation::INativeResourceService : system::Interface {
    property DefaultFont : presentation::FontProperties { get:GetDefaultFont set:SetDefaultFont }
    property DefaultSystemCursor : presentation::INativeCursor* { get:GetDefaultSystemCursor }

    function EnumerateFonts(fonts : system::List<system::String>^) : system::Void;
    function GetDefaultFont() : presentation::FontProperties;
    function GetDefaultSystemCursor() : presentation::INativeCursor*;
    function GetSystemCursor(type : presentation::INativeCursor::SystemCursorType) : presentation::INativeCursor*;
    function SetDefaultFont(value : presentation::FontProperties) : system::Void;

}

interface presentation::INativeScreen : system::Interface {
    property Bounds : presentation::NativeRect { get:GetBounds }
    property ClientBounds : presentation::NativeRect { get:GetClientBounds }
    property Name : system::String { get:GetName }
    property ScalingX : system::Double { get:GetScalingX }
    property ScalingY : system::Double { get:GetScalingY }

    function GetBounds() : presentation::NativeRect;
    function GetClientBounds() : presentation::NativeRect;
    function GetName() : system::String;
    function GetScalingX() : system::Double;
    function GetScalingY() : system::Double;
    function IsPrimary() : system::Boolean;

}

interface presentation::INativeScreenService : system::Interface {
    property ScreenCount : system::Int64 { get:GetScreenCount }

    function GetScreen(index : system::Int64) : presentation::INativeScreen*;
    function GetScreen(window : presentation::INativeWindow*) : presentation::INativeScreen*;
    function GetScreenCount() : system::Int64;

}

interface presentation::INativeWindow : system::Interface {
    property Border : system::Boolean { get:GetBorder set:SetBorder }
    property Bounds : presentation::NativeRect { get:GetBounds set:SetBounds }
    property CaretPoint : presentation::NativePoint { get:GetCaretPoint set:SetCaretPoint }
    property ClientBoundsInScreen : presentation::NativeRect { get:GetClientBoundsInScreen }
    property ClientSize : presentation::NativeSize { get:GetClientSize set:SetClientSize }
    property CustomFramePadding : presentation::NativeMargin { get:GetCustomFramePadding }
    property Icon : presentation::GuiImageData^ { get:GetIcon set:SetIcon }
    property IconVisible : system::Boolean { get:GetIconVisible set:SetIconVisible }
    property MaximizedBox : system::Boolean { get:GetMaximizedBox set:SetMaximizedBox }
    property MinimizedBox : system::Boolean { get:GetMinimizedBox set:SetMinimizedBox }
    property Parent : presentation::INativeWindow* { get:GetParent set:SetParent }
    property SizeBox : system::Boolean { get:GetSizeBox set:SetSizeBox }
    property SizeState : presentation::INativeWindow::WindowSizeState { get:GetSizeState }
    property Title : system::String { get:GetTitle set:SetTitle }
    property TitleBar : system::Boolean { get:GetTitleBar set:SetTitleBar }
    property TopMost : system::Boolean { get:GetTopMost set:SetTopMost }
    property WindowCursor : presentation::INativeCursor* { get:GetWindowCursor set:SetWindowCursor }
    property WindowMode : presentation::INativeWindow::WindowMode { get:GetWindowMode }

    function Disable() : system::Void;
    function DisableActivate() : system::Void;
    function DisableCustomFrameMode() : system::Void;
    function Enable() : system::Void;
    function EnableActivate() : system::Void;
    function EnableCustomFrameMode() : system::Void;
    function GetBorder() : system::Boolean;
    function GetBounds() : presentation::NativeRect;
    function GetCaretPoint() : presentation::NativePoint;
    function GetClientBoundsInScreen() : presentation::NativeRect;
    function GetClientSize() : presentation::NativeSize;
    function GetCustomFramePadding() : presentation::NativeMargin;
    function GetIcon() : presentation::GuiImageData^;
    function GetIconVisible() : system::Boolean;
    function GetMaximizedBox() : system::Boolean;
    function GetMinimizedBox() : system::Boolean;
    function GetParent() : presentation::INativeWindow*;
    function GetSizeBox() : system::Boolean;
    function GetSizeState() : presentation::INativeWindow::WindowSizeState;
    function GetTitle() : system::String;
    function GetTitleBar() : system::Boolean;
    function GetTopMost() : system::Boolean;
    function GetWindowCursor() : presentation::INativeCursor*;
    function GetWindowMode() : presentation::INativeWindow::WindowMode;
    function Hide( : system::Boolean) : system::Void;
    function HideInTaskBar() : system::Void;
    function IsActivated() : system::Boolean;
    function IsAppearedInTaskBar() : system::Boolean;
    function IsCapturing() : system::Boolean;
    function IsCustomFrameModeEnabled() : system::Boolean;
    function IsEnabled() : system::Boolean;
    function IsEnabledActivate() : system::Boolean;
    function IsRenderingAsActivated() : system::Boolean;
    function IsVisible() : system::Boolean;
    function RedrawContent() : system::Void;
    function ReleaseCapture() : system::Boolean;
    function RequireCapture() : system::Boolean;
    function SetActivate() : system::Void;
    function SetBorder(value : system::Boolean) : system::Void;
    function SetBounds(value : presentation::NativeRect) : system::Void;
    function SetCaretPoint(value : presentation::NativePoint) : system::Void;
    function SetClientSize(value : presentation::NativeSize) : system::Void;
    function SetIcon(value : presentation::GuiImageData^) : system::Void;
    function SetIconVisible(value : system::Boolean) : system::Void;
    function SetMaximizedBox(value : system::Boolean) : system::Void;
    function SetMinimizedBox(value : system::Boolean) : system::Void;
    function SetParent(value : presentation::INativeWindow*) : system::Void;
    function SetSizeBox(value : system::Boolean) : system::Void;
    function SetTitle(value : system::String) : system::Void;
    function SetTitleBar(value : system::Boolean) : system::Void;
    function SetTopMost(value : system::Boolean) : system::Void;
    function SetWindowCursor(value : presentation::INativeCursor*) : system::Void;
    function Show() : system::Void;
    function ShowDeactivated() : system::Void;
    function ShowInTaskBar() : system::Void;
    function ShowMaximized() : system::Void;
    function ShowMinimized() : system::Void;
    function ShowRestored() : system::Void;

}

@ValueType
enum presentation::INativeWindow::WindowMode {
    Menu = 3,
    Normal = 0,
    Popup = 1,
    Tooltip = 2,
}

@ValueType
enum presentation::INativeWindow::WindowSizeState {
    Maximized = 2,
    Minimized = 0,
    Restored = 1,
}

@ValueType
enum presentation::INativeWindowListener::HitTestResult {
    BorderBottom = 4,
    BorderLeft = 1,
    BorderLeftBottom = 7,
    BorderLeftTop = 5,
    BorderNoSizing = 0,
    BorderRight = 2,
    BorderRightBottom = 8,
    BorderRightTop = 6,
    BorderTop = 3,
    ButtonClose = 12,
    ButtonMaximum = 11,
    ButtonMinimum = 10,
    Client = 13,
    Icon = 14,
    NoDecision = 15,
    Title = 9,
}

interface presentation::ISimpleFontDialogViewModel : presentation::ICommonFontDialogViewModel, presentation::IDialogConfirmation {
    property FontFamily : system::String { get:GetFontFamily set:SetFontFamily }
    property FontSize : system::Int64 { get:GetFontSize set:SetFontSize }

    function GetFontFamily() : system::String;
    function GetFontSize() : system::Int64;
    function SetFontFamily(value : system::String) : system::Void;
    function SetFontSize(value : system::Int64) : system::Void;

}

@ValueType
struct presentation::Margin {
    property bottom : system::Int64;
    property left : system::Int64;
    property right : system::Int64;
    property top : system::Int64;
}

@ValueType
struct presentation::NativeCoordinate {
    property value : system::Int64;
}

@ValueType
enum presentation::NativeGlobalShortcutKeyResult {
    NotSupported = 18446744073709551614,
    Occupied = 18446744073709551615,
    ValidIdBegins = 0,
}

@ValueType
struct presentation::NativeMargin {
    property bottom : presentation::NativeCoordinate;
    property left : presentation::NativeCoordinate;
    property right : presentation::NativeCoordinate;
    property top : presentation::NativeCoordinate;
}

@ValueType
struct presentation::NativePoint {
    property x : presentation::NativeCoordinate;
    property y : presentation::NativeCoordinate;
}

@ValueType
struct presentation::NativeRect {
    property x1 : presentation::NativeCoordinate;
    property x2 : presentation::NativeCoordinate;
    property y1 : presentation::NativeCoordinate;
    property y2 : presentation::NativeCoordinate;
}

@ValueType
struct presentation::NativeSize {
    property x : presentation::NativeCoordinate;
    property y : presentation::NativeCoordinate;
}

@ValueType
struct presentation::NativeWindowFrameConfig {
    property BorderOption : presentation::BoolOption;
    property CustomFrameEnabled : presentation::BoolOption;
    property IconVisibleOption : presentation::BoolOption;
    property MaximizedBoxOption : presentation::BoolOption;
    property MinimizedBoxOption : presentation::BoolOption;
    property SizeBoxOption : presentation::BoolOption;
    property TitleBarOption : presentation::BoolOption;
}

@ValueType
struct presentation::Point {
    property x : system::Int64;
    property y : system::Int64;
}

@ValueType
struct presentation::Rect {
    property x1 : system::Int64;
    property x2 : system::Int64;
    property y1 : system::Int64;
    property y2 : system::Int64;
}

@ValueType
struct presentation::Size {
    property x : system::Int64;
    property y : system::Int64;
}

@ValueType
struct presentation::TextPos {
    property column : system::Int64;
    property row : system::Int64;
}

@ValueType
enum presentation::VKEY {
    KEY_0 = 48,
    KEY_1 = 49,
    KEY_2 = 50,
    KEY_3 = 51,
    KEY_4 = 52,
    KEY_5 = 53,
    KEY_6 = 54,
    KEY_7 = 55,
    KEY_8 = 56,
    KEY_9 = 57,
    KEY_A = 65,
    KEY_ACCEPT = 30,
    KEY_ADD = 107,
    KEY_APOSTROPHE = 222,
    KEY_APPS = 93,
    KEY_ATTN = 246,
    KEY_B = 66,
    KEY_BACK = 8,
    KEY_BACKSLASH = 220,
    KEY_BROWSER_BACK = 166,
    KEY_BROWSER_FAVORITES = 171,
    KEY_BROWSER_FORWARD = 167,
    KEY_BROWSER_HOME = 172,
    KEY_BROWSER_REFRESH = 168,
    KEY_BROWSER_SEARCH = 170,
    KEY_BROWSER_STOP = 169,
    KEY_C = 67,
    KEY_CANCEL = 3,
    KEY_CAPITAL = 20,
    KEY_CLEAR = 12,
    KEY_CONTROL = 17,
    KEY_CONVERT = 28,
    KEY_CRSEL = 247,
    KEY_D = 68,
    KEY_DECIMAL = 110,
    KEY_DELETE = 46,
    KEY_DIVIDE = 111,
    KEY_DOWN = 40,
    KEY_E = 69,
    KEY_END = 35,
    KEY_EREOF = 249,
    KEY_ESCAPE = 27,
    KEY_EXECUTE = 43,
    KEY_EXSEL = 248,
    KEY_F = 70,
    KEY_F1 = 112,
    KEY_F10 = 121,
    KEY_F11 = 122,
    KEY_F12 = 123,
    KEY_F13 = 124,
    KEY_F14 = 125,
    KEY_F15 = 126,
    KEY_F16 = 127,
    KEY_F17 = 128,
    KEY_F18 = 129,
    KEY_F19 = 130,
    KEY_F2 = 113,
    KEY_F20 = 131,
    KEY_F21 = 132,
    KEY_F22 = 133,
    KEY_F23 = 134,
    KEY_F24 = 135,
    KEY_F3 = 114,
    KEY_F4 = 115,
    KEY_F5 = 116,
    KEY_F6 = 117,
    KEY_F7 = 118,
    KEY_F8 = 119,
    KEY_F9 = 120,
    KEY_FINAL = 24,
    KEY_G = 71,
    KEY_GRAVE_ACCENT = 192,
    KEY_H = 72,
    KEY_HANJA = 25,
    KEY_HELP = 47,
    KEY_HOME = 36,
    KEY_I = 73,
    KEY_ICO_00 = 228,
    KEY_ICO_CLEAR = 230,
    KEY_ICO_HELP = 227,
    KEY_INSERT = 45,
    KEY_J = 74,
    KEY_JUNJA = 23,
    KEY_K = 75,
    KEY_KANA_HANGUL = 21,
    KEY_KANJI = 25,
    KEY_L = 76,
    KEY_LAUNCH_APP1 = 182,
    KEY_LAUNCH_APP2 = 183,
    KEY_LAUNCH_MAIL = 180,
    KEY_LAUNCH_MEDIA_SELECT = 181,
    KEY_LBUTTON = 1,
    KEY_LCONTROL = 162,
    KEY_LEFT = 37,
    KEY_LEFT_BRACKET = 221,
    KEY_LMENU = 164,
    KEY_LSHIFT = 160,
    KEY_LWIN = 91,
    KEY_M = 77,
    KEY_MBUTTON = 4,
    KEY_MEDIA_NEXT_TRACK = 176,
    KEY_MEDIA_PLAY_PAUSE = 179,
    KEY_MEDIA_PREV_TRACK = 177,
    KEY_MEDIA_STOP = 178,
    KEY_MENU = 18,
    KEY_MODECHANGE = 31,
    KEY_MULTIPLY = 106,
    KEY_N = 78,
    KEY_NEXT = 34,
    KEY_NONAME = 252,
    KEY_NONCONVERT = 29,
    KEY_NUMLOCK = 144,
    KEY_NUMPAD0 = 96,
    KEY_NUMPAD1 = 97,
    KEY_NUMPAD2 = 98,
    KEY_NUMPAD3 = 99,
    KEY_NUMPAD4 = 100,
    KEY_NUMPAD5 = 101,
    KEY_NUMPAD6 = 102,
    KEY_NUMPAD7 = 103,
    KEY_NUMPAD8 = 104,
    KEY_NUMPAD9 = 105,
    KEY_O = 79,
    KEY_OEM_1 = 186,
    KEY_OEM_102 = 226,
    KEY_OEM_2 = 191,
    KEY_OEM_3 = 192,
    KEY_OEM_4 = 219,
    KEY_OEM_5 = 220,
    KEY_OEM_6 = 221,
    KEY_OEM_7 = 222,
    KEY_OEM_8 = 223,
    KEY_OEM_ATTN = 240,
    KEY_OEM_AUTO = 243,
    KEY_OEM_AX = 225,
    KEY_OEM_BACKTAB = 245,
    KEY_OEM_CLEAR = 254,
    KEY_OEM_COMMA = 188,
    KEY_OEM_COPY = 242,
    KEY_OEM_CUSEL = 239,
    KEY_OEM_ENLW = 244,
    KEY_OEM_FINISH = 241,
    KEY_OEM_FJ_JISHO = 146,
    KEY_OEM_FJ_LOYA = 149,
    KEY_OEM_FJ_MASSHOU = 147,
    KEY_OEM_FJ_ROYA = 150,
    KEY_OEM_FJ_TOUROKU = 148,
    KEY_OEM_JUMP = 234,
    KEY_OEM_MINUS = 189,
    KEY_OEM_NEC_EQUAL = 146,
    KEY_OEM_PA1 = 235,
    KEY_OEM_PA2 = 236,
    KEY_OEM_PA3 = 237,
    KEY_OEM_PERIOD = 190,
    KEY_OEM_PLUS = 187,
    KEY_OEM_RESET = 233,
    KEY_OEM_WSCTRL = 238,
    KEY_P = 80,
    KEY_PA1 = 253,
    KEY_PACKET = 231,
    KEY_PAUSE = 19,
    KEY_PLAY = 250,
    KEY_PRINT = 42,
    KEY_PRIOR = 33,
    KEY_PROCESSKEY = 229,
    KEY_Q = 81,
    KEY_R = 82,
    KEY_RBUTTON = 2,
    KEY_RCONTROL = 163,
    KEY_RETURN = 13,
    KEY_RIGHT = 39,
    KEY_RIGHT_BRACKET = 219,
    KEY_RMENU = 165,
    KEY_RSHIFT = 161,
    KEY_RWIN = 92,
    KEY_S = 83,
    KEY_SCROLL = 145,
    KEY_SELECT = 41,
    KEY_SEMICOLON = 186,
    KEY_SEPARATOR = 108,
    KEY_SHIFT = 16,
    KEY_SLASH = 191,
    KEY_SLEEP = 95,
    KEY_SNAPSHOT = 44,
    KEY_SPACE = 32,
    KEY_SUBTRACT = 109,
    KEY_T = 84,
    KEY_TAB = 9,
    KEY_U = 85,
    KEY_UNKNOWN = 18446744073709551615,
    KEY_UP = 38,
    KEY_V = 86,
    KEY_VOLUME_DOWN = 174,
    KEY_VOLUME_MUTE = 173,
    KEY_VOLUME_UP = 175,
    KEY_W = 87,
    KEY_X = 88,
    KEY_XBUTTON1 = 5,
    KEY_XBUTTON2 = 6,
    KEY_Y = 89,
    KEY_Z = 90,
    KEY_ZOOM = 251,
}

@ValueType
enum presentation::compositions::ControlSignal {
    ParentLineChanged = 1,
    RenderTargetChanged = 0,
    ServiceAdded = 2,
    UpdateFullfilled = 4,
    UpdateRequested = 3,
}

@ValueType
enum presentation::compositions::FlowAlignment {
    Center = 1,
    Extend = 3,
    Left = 0,
    Right = 2,
}

class presentation::compositions::GuiAxis : presentation::compositions::IGuiAxis {
    property Direction : presentation::AxisDirection { get:GetDirection }

    function GetDirection() : presentation::AxisDirection;

    constructor (axisDirection : presentation::AxisDirection) : presentation::compositions::GuiAxis^;
}

class presentation::compositions::GuiBoundsComposition : presentation::compositions::GuiGraphicsComposition {
    property AlignmentToParent : presentation::Margin { get:GetAlignmentToParent set:SetAlignmentToParent }
    property ExpectedBounds : presentation::Rect { get:GetExpectedBounds set:SetExpectedBounds }

    function GetAlignmentToParent() : presentation::Margin;
    function GetExpectedBounds() : presentation::Rect;
    function IsAlignedToParent() : system::Boolean;
    function SetAlignmentToParent(value : presentation::Margin) : system::Void;
    function SetExpectedBounds(value : presentation::Rect) : system::Void;

    constructor () : presentation::compositions::GuiBoundsComposition*;
}

class presentation::compositions::GuiCellComposition : presentation::compositions::GuiGraphicsComposition {
    property Column : system::Int64 { get:GetColumn }
    property ColumnSpan : system::Int64 { get:GetColumnSpan }
    property Row : system::Int64 { get:GetRow }
    property RowSpan : system::Int64 { get:GetRowSpan }
    property TableParent : presentation::compositions::GuiTableComposition* { get:GetTableParent }

    function GetColumn() : system::Int64;
    function GetColumnSpan() : system::Int64;
    function GetRow() : system::Int64;
    function GetRowSpan() : system::Int64;
    function GetTableParent() : presentation::compositions::GuiTableComposition*;
    function SetSite(row : system::Int64, column : system::Int64, rowSpan : system::Int64, columnSpan : system::Int64) : system::Boolean;

    constructor () : presentation::compositions::GuiCellComposition*;
}

@ValueType
struct presentation::compositions::GuiCellOption {
    property absolute : system::Int64;
    property composeType : presentation::compositions::GuiCellOption::ComposeType;
    property percentage : system::Double;
}

@ValueType
enum presentation::compositions::GuiCellOption::ComposeType {
    Absolute = 0,
    MinSize = 2,
    Percentage = 1,
}

class presentation::compositions::GuiCharEventArgs : presentation::compositions::GuiEventArgs {
    property alt : system::Boolean;
    property capslock : system::Boolean;
    property code : system::Char;
    property ctrl : system::Boolean;
    property shift : system::Boolean;

    constructor () : presentation::compositions::GuiCharEventArgs^;
    constructor (composition : presentation::compositions::GuiGraphicsComposition*) : presentation::compositions::GuiCharEventArgs^;
}

class presentation::compositions::GuiColumnSplitterComposition : presentation::compositions::GuiTableSplitterCompositionBase {
    property ColumnsToTheLeft : system::Int64 { get:GetColumnsToTheLeft set:SetColumnsToTheLeft }

    function GetColumnsToTheLeft() : system::Int64;
    function SetColumnsToTheLeft(value : system::Int64) : system::Void;

    constructor () : presentation::compositions::GuiColumnSplitterComposition*;
}

class presentation::compositions::GuiControlSignalEventArgs : presentation::compositions::GuiEventArgs {
    property controlSignal : presentation::compositions::ControlSignal;

}

class presentation::compositions::GuiDefaultAxis : presentation::compositions::IGuiAxis {
    constructor () : presentation::compositions::GuiDefaultAxis^;
}

class presentation::compositions::GuiEventArgs : system::ReferenceType {
    property compositionSource : presentation::compositions::GuiGraphicsComposition*;
    property eventSource : presentation::compositions::GuiGraphicsComposition*;
    property handled : system::Boolean;

    constructor () : presentation::compositions::GuiEventArgs^;
    constructor (composition : presentation::compositions::GuiGraphicsComposition*) : presentation::compositions::GuiEventArgs^;
}

class presentation::compositions::GuiFlowComposition : presentation::compositions::GuiBoundsComposition {
    property Alignment : presentation::compositions::FlowAlignment { get:GetAlignment set:SetAlignment }
    property Axis : presentation::compositions::IGuiAxis^ { get:GetAxis set:SetAxis }
    property ColumnPadding : system::Int64 { get:GetColumnPadding set:SetColumnPadding }
    property ExtraMargin : presentation::Margin { get:GetExtraMargin set:SetExtraMargin }
    property FlowItems : system::ReadonlyList<presentation::compositions::GuiFlowItemComposition*>^ { get:GetFlowItems }
    property RowPadding : system::Int64 { get:GetRowPadding set:SetRowPadding }

    function GetAlignment() : presentation::compositions::FlowAlignment;
    function GetAxis() : presentation::compositions::IGuiAxis^;
    function GetColumnPadding() : system::Int64;
    function GetExtraMargin() : presentation::Margin;
    function GetFlowItems() : system::ReadonlyList<presentation::compositions::GuiFlowItemComposition*>^;
    function GetRowPadding() : system::Int64;
    function InsertFlowItem(index : system::Int64, item : presentation::compositions::GuiFlowItemComposition*) : system::Boolean;
    function SetAlignment(value : presentation::compositions::FlowAlignment) : system::Void;
    function SetAxis(value : presentation::compositions::IGuiAxis^) : system::Void;
    function SetColumnPadding(value : system::Int64) : system::Void;
    function SetExtraMargin(value : presentation::Margin) : system::Void;
    function SetRowPadding(value : system::Int64) : system::Void;

    constructor () : presentation::compositions::GuiFlowComposition*;
}

class presentation::compositions::GuiFlowItemComposition : presentation::compositions::GuiGraphicsComposition {
    property ExtraMargin : presentation::Margin { get:GetExtraMargin set:SetExtraMargin }
    property FlowOption : presentation::compositions::GuiFlowOption { get:GetFlowOption set:SetFlowOption }

    function GetExtraMargin() : presentation::Margin;
    function GetFlowOption() : presentation::compositions::GuiFlowOption;
    function SetExtraMargin(value : presentation::Margin) : system::Void;
    function SetFlowOption(value : presentation::compositions::GuiFlowOption) : system::Void;

    constructor () : presentation::compositions::GuiFlowItemComposition*;
}

@ValueType
struct presentation::compositions::GuiFlowOption {
    property baseline : presentation::compositions::GuiFlowOption::BaselineType;
    property distance : system::Int64;
    property percentage : system::Double;
}

@ValueType
enum presentation::compositions::GuiFlowOption::BaselineType {
    FromBottom = 2,
    FromTop = 1,
    Percentage = 0,
}

class presentation::compositions::GuiGraphicsComposition : system::ReferenceType {
    event CachedBoundsChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CachedBounds,
        CachedClientArea,
    }
    event CachedMinSizeChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CachedMinSize,
        CachedMinClientSize,
    }
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event caretNotify : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event charInput : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiCharEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event clipboardNotify : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event gotFocus : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event horizontalWheel : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiMouseEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event keyDown : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiKeyEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event keyUp : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiKeyEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event leftButtonDoubleClick : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiMouseEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event leftButtonDown : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiMouseEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event leftButtonUp : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiMouseEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event lostFocus : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event middleButtonDoubleClick : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiMouseEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event middleButtonDown : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiMouseEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event middleButtonUp : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiMouseEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event mouseEnter : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event mouseLeave : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event mouseMove : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiMouseEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event previewCharInput : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiCharEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event previewKey : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiKeyEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event renderTargetChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event rightButtonDoubleClick : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiMouseEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event rightButtonDown : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiMouseEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event rightButtonUp : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiMouseEventArgs*>^;
    @AttachTemplate:::vl::__vwsn::EventAttach($This->GetEventReceiver()->$Name, $Handler)
    @DetachTemplate:::vl::__vwsn::EventDetach($This->GetEventReceiver()->$Name, $Handler)
    @InvokeTemplate:::vl::__vwsn::EventInvoke($This->GetEventReceiver()->$Name, $Handler)
    event verticalWheel : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiMouseEventArgs*>^;

    property AssociatedControl : presentation::controls::GuiControl* { get:GetAssociatedControl }
    property AssociatedCursor : presentation::INativeCursor* { get:GetAssociatedCursor set:SetAssociatedCursor }
    property AssociatedHitTestResult : presentation::INativeWindowListener::HitTestResult { get:GetAssociatedHitTestResult set:SetAssociatedHitTestResult }
    property CachedBounds : presentation::Rect { get:GetCachedBounds event:CachedBoundsChanged }
    property CachedClientArea : presentation::Rect { get:GetCachedClientArea event:CachedBoundsChanged }
    property CachedMinClientSize : presentation::Size { get:GetCachedMinClientSize event:CachedMinSizeChanged }
    property CachedMinSize : presentation::Size { get:GetCachedMinSize event:CachedMinSizeChanged }
    property Children : system::ReadonlyList<presentation::compositions::GuiGraphicsComposition*>^ { get:GetChildren }
    property EventuallyVisible : system::Boolean { get:GetEventuallyVisible }
    property GlobalBounds : presentation::Rect { get:GetGlobalBounds }
    property InternalMargin : presentation::Margin { get:GetInternalMargin set:SetInternalMargin }
    property MinSizeLimitation : presentation::compositions::GuiGraphicsComposition::MinSizeLimitation { get:GetMinSizeLimitation set:SetMinSizeLimitation }
    property OwnedElement : presentation::elements::IGuiGraphicsElement^ { get:GetOwnedElement set:SetOwnedElement }
    property Parent : presentation::compositions::GuiGraphicsComposition* { get:GetParent }
    property PreferredMinSize : presentation::Size { get:GetPreferredMinSize set:SetPreferredMinSize }
    property RelatedControl : presentation::controls::GuiControl* { get:GetRelatedControl }
    property RelatedControlHost : presentation::controls::GuiControlHost* { get:GetRelatedControlHost }
    property RelatedCursor : presentation::INativeCursor* { get:GetRelatedCursor }
    property RelatedHitTestResult : presentation::INativeWindowListener::HitTestResult { get:GetRelatedHitTestResult }
    property TransparentToMouse : system::Boolean { get:GetTransparentToMouse set:SetTransparentToMouse }
    property Visible : system::Boolean { get:GetVisible set:SetVisible }

    function AddChild(child : presentation::compositions::GuiGraphicsComposition*) : system::Boolean;
    function FindVisibleComposition(location : presentation::Point, forMouseEvent : system::Boolean) : presentation::compositions::GuiGraphicsComposition*;
    function GetAssociatedControl() : presentation::controls::GuiControl*;
    function GetAssociatedCursor() : presentation::INativeCursor*;
    function GetAssociatedHitTestResult() : presentation::INativeWindowListener::HitTestResult;
    function GetCachedBounds() : presentation::Rect;
    function GetCachedClientArea() : presentation::Rect;
    function GetCachedMinClientSize() : presentation::Size;
    function GetCachedMinSize() : presentation::Size;
    @InvokeTemplate:$This->Children($Arguments)
    @ClosureTemplate:::vl::Func<$Func>($This, &$Type::Children)
    function GetChildren() : system::ReadonlyList<presentation::compositions::GuiGraphicsComposition*>^;
    function GetEventuallyVisible() : system::Boolean;
    function GetGlobalBounds() : presentation::Rect;
    function GetInternalMargin() : presentation::Margin;
    function GetMinSizeLimitation() : presentation::compositions::GuiGraphicsComposition::MinSizeLimitation;
    function GetOwnedElement() : presentation::elements::IGuiGraphicsElement^;
    function GetParent() : presentation::compositions::GuiGraphicsComposition*;
    function GetPreferredMinSize() : presentation::Size;
    function GetRelatedControl() : presentation::controls::GuiControl*;
    function GetRelatedControlHost() : presentation::controls::GuiControlHost*;
    function GetRelatedCursor() : presentation::INativeCursor*;
    function GetRelatedHitTestResult() : presentation::INativeWindowListener::HitTestResult;
    function GetTransparentToMouse() : system::Boolean;
    function GetVisible() : system::Boolean;
    function InsertChild(index : system::Int64, child : presentation::compositions::GuiGraphicsComposition*) : system::Boolean;
    function MoveChild(child : presentation::compositions::GuiGraphicsComposition*, newIndex : system::Int64) : system::Boolean;
    function RemoveChild(child : presentation::compositions::GuiGraphicsComposition*) : system::Boolean;
    function Render(size : presentation::Size) : system::Void;
    @InvokeTemplate:::vl::presentation::compositions::SafeDeleteComposition($This, $Arguments)
    @ClosureTemplate:::vl::Func<$Func>($This, &::vl::presentation::compositions::SafeDeleteComposition)
    function SafeDelete() : system::Void;
    function SetAssociatedCursor(value : presentation::INativeCursor*) : system::Void;
    function SetAssociatedHitTestResult(value : presentation::INativeWindowListener::HitTestResult) : system::Void;
    function SetInternalMargin(value : presentation::Margin) : system::Void;
    function SetMinSizeLimitation(value : presentation::compositions::GuiGraphicsComposition::MinSizeLimitation) : system::Void;
    function SetOwnedElement(value : presentation::elements::IGuiGraphicsElement^) : system::Void;
    function SetPreferredMinSize(value : presentation::Size) : system::Void;
    function SetTransparentToMouse(value : system::Boolean) : system::Void;
    function SetVisible(value : system::Boolean) : system::Void;

}

@ValueType
enum presentation::compositions::GuiGraphicsComposition::MinSizeLimitation {
    LimitToElement = 1,
    LimitToElementAndChildren = 2,
    NoLimit = 0,
}

class presentation::compositions::GuiItemEventArgs : presentation::compositions::GuiEventArgs {
    property itemIndex : system::Int64;

    constructor () : presentation::compositions::GuiItemEventArgs^;
    constructor (composition : presentation::compositions::GuiGraphicsComposition*) : presentation::compositions::GuiItemEventArgs^;
}

class presentation::compositions::GuiItemMouseEventArgs : presentation::compositions::GuiMouseEventArgs {
    property itemIndex : system::Int64;

    constructor () : presentation::compositions::GuiItemMouseEventArgs^;
    constructor (composition : presentation::compositions::GuiGraphicsComposition*) : presentation::compositions::GuiItemMouseEventArgs^;
}

class presentation::compositions::GuiKeyEventArgs : presentation::compositions::GuiEventArgs {
    property alt : system::Boolean;
    property autoRepeatKeyDown : system::Boolean;
    property capslock : system::Boolean;
    property code : presentation::VKEY;
    property ctrl : system::Boolean;
    property shift : system::Boolean;

    constructor () : presentation::compositions::GuiKeyEventArgs^;
    constructor (composition : presentation::compositions::GuiGraphicsComposition*) : presentation::compositions::GuiKeyEventArgs^;
}

class presentation::compositions::GuiMouseEventArgs : presentation::compositions::GuiEventArgs {
    property ctrl : system::Boolean;
    property left : system::Boolean;
    property middle : system::Boolean;
    property nonClient : system::Boolean;
    property right : system::Boolean;
    property shift : system::Boolean;
    property wheel : system::Int64;
    property x : system::Int64;
    property y : system::Int64;

    constructor () : presentation::compositions::GuiMouseEventArgs^;
    constructor (composition : presentation::compositions::GuiGraphicsComposition*) : presentation::compositions::GuiMouseEventArgs^;
}

class presentation::compositions::GuiNodeEventArgs : presentation::compositions::GuiEventArgs {
    property node : presentation::controls::tree::INodeProvider*;

    constructor () : presentation::compositions::GuiNodeEventArgs^;
    constructor (composition : presentation::compositions::GuiGraphicsComposition*) : presentation::compositions::GuiNodeEventArgs^;
}

class presentation::compositions::GuiNodeMouseEventArgs : presentation::compositions::GuiMouseEventArgs {
    property node : presentation::controls::tree::INodeProvider*;

    constructor () : presentation::compositions::GuiNodeMouseEventArgs^;
    constructor (composition : presentation::compositions::GuiGraphicsComposition*) : presentation::compositions::GuiNodeMouseEventArgs^;
}

class presentation::compositions::GuiNonVirtialRepeatCompositionBase : presentation::compositions::GuiBoundsComposition, presentation::compositions::GuiRepeatCompositionBase {
    event ItemInserted : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemEventArgs*>^;
    event ItemRemoved : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemEventArgs*>^;

}

class presentation::compositions::GuiPartialViewComposition : presentation::compositions::GuiGraphicsComposition {
    property HeightPageSize : system::Double { get:GetHeightPageSize set:SetHeightPageSize }
    property HeightRatio : system::Double { get:GetHeightRatio set:SetHeightRatio }
    property WidthPageSize : system::Double { get:GetWidthPageSize set:SetWidthPageSize }
    property WidthRatio : system::Double { get:GetWidthRatio set:SetWidthRatio }

    function GetHeightPageSize() : system::Double;
    function GetHeightRatio() : system::Double;
    function GetWidthPageSize() : system::Double;
    function GetWidthRatio() : system::Double;
    function SetHeightPageSize(value : system::Double) : system::Void;
    function SetHeightRatio(value : system::Double) : system::Void;
    function SetWidthPageSize(value : system::Double) : system::Void;
    function SetWidthRatio(value : system::Double) : system::Void;

    constructor () : presentation::compositions::GuiPartialViewComposition*;
}

class presentation::compositions::GuiRepeatCompositionBase : system::ReferenceType {
    event ContextChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Context,
    }

    property Context : system::Object { get:GetContext set:SetContext event:ContextChanged }
    property ItemSource : system::Enumerable^ { get:GetItemSource set:SetItemSource }
    property ItemTemplate : system::Function<presentation::templates::GuiTemplate*, system::Object>^ { get:GetItemTemplate set:SetItemTemplate }

    function GetContext() : system::Object;
    function GetItemSource() : system::Enumerable^;
    function GetItemTemplate() : system::Function<presentation::templates::GuiTemplate*, system::Object>^;
    function SetContext(value : system::Object) : system::Void;
    function SetItemSource(value : system::Enumerable^) : system::Void;
    function SetItemTemplate(value : system::Function<presentation::templates::GuiTemplate*, system::Object>^) : system::Void;

}

class presentation::compositions::GuiRepeatFixedHeightItemComposition : presentation::compositions::GuiVirtualRepeatCompositionBase {
    constructor () : presentation::compositions::GuiRepeatFixedHeightItemComposition*;
}

class presentation::compositions::GuiRepeatFixedHeightMultiColumnItemComposition : presentation::compositions::GuiVirtualRepeatCompositionBase {
    constructor () : presentation::compositions::GuiRepeatFixedHeightMultiColumnItemComposition*;
}

class presentation::compositions::GuiRepeatFixedSizeMultiColumnItemComposition : presentation::compositions::GuiVirtualRepeatCompositionBase {
    constructor () : presentation::compositions::GuiRepeatFixedSizeMultiColumnItemComposition*;
}

class presentation::compositions::GuiRepeatFlowComposition : presentation::compositions::GuiFlowComposition, presentation::compositions::GuiNonVirtialRepeatCompositionBase {
    constructor () : presentation::compositions::GuiRepeatFlowComposition*;
}

class presentation::compositions::GuiRepeatFreeHeightItemComposition : presentation::compositions::GuiVirtualRepeatCompositionBase {
    constructor () : presentation::compositions::GuiRepeatFreeHeightItemComposition*;
}

class presentation::compositions::GuiRepeatStackComposition : presentation::compositions::GuiStackComposition, presentation::compositions::GuiNonVirtialRepeatCompositionBase {
    constructor () : presentation::compositions::GuiRepeatStackComposition*;
}

class presentation::compositions::GuiRequestEventArgs : presentation::compositions::GuiEventArgs {
    property cancel : system::Boolean;

    constructor () : presentation::compositions::GuiRequestEventArgs^;
    constructor (composition : presentation::compositions::GuiGraphicsComposition*) : presentation::compositions::GuiRequestEventArgs^;
}

class presentation::compositions::GuiResponsiveCompositionBase : presentation::compositions::GuiBoundsComposition {
    event CurrentLevelChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CurrentLevel,
    }
    event LevelCountChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        LevelCount,
    }

    property CurrentLevel : system::Int64 { get:GetCurrentLevel event:CurrentLevelChanged }
    property Direction : presentation::compositions::ResponsiveDirection { get:GetDirection set:SetDirection }
    property LevelCount : system::Int64 { get:GetLevelCount event:LevelCountChanged }

    function GetCurrentLevel() : system::Int64;
    function GetDirection() : presentation::compositions::ResponsiveDirection;
    function GetLevelCount() : system::Int64;
    function LevelDown() : system::Boolean;
    function LevelUp() : system::Boolean;
    function SetDirection(value : presentation::compositions::ResponsiveDirection) : system::Void;

}

class presentation::compositions::GuiResponsiveContainerComposition : presentation::compositions::GuiBoundsComposition {
    property ResponsiveTarget : presentation::compositions::GuiResponsiveCompositionBase* { get:GetResponsiveTarget set:SetResponsiveTarget }

    function GetResponsiveTarget() : presentation::compositions::GuiResponsiveCompositionBase*;
    function SetResponsiveTarget(value : presentation::compositions::GuiResponsiveCompositionBase*) : system::Void;

    constructor () : presentation::compositions::GuiResponsiveContainerComposition*;
}

class presentation::compositions::GuiResponsiveFixedComposition : presentation::compositions::GuiResponsiveCompositionBase {
    constructor () : presentation::compositions::GuiResponsiveFixedComposition*;
}

class presentation::compositions::GuiResponsiveGroupComposition : presentation::compositions::GuiResponsiveCompositionBase {
    constructor () : presentation::compositions::GuiResponsiveGroupComposition*;
}

class presentation::compositions::GuiResponsiveSharedComposition : presentation::compositions::GuiBoundsComposition {
    property Shared : presentation::controls::GuiControl* { get:GetShared set:SetShared }

    function GetShared() : presentation::controls::GuiControl*;
    function SetShared(value : presentation::controls::GuiControl*) : system::Void;

    constructor () : presentation::compositions::GuiResponsiveSharedComposition*;
}

class presentation::compositions::GuiResponsiveStackComposition : presentation::compositions::GuiResponsiveCompositionBase {
    constructor () : presentation::compositions::GuiResponsiveStackComposition*;
}

class presentation::compositions::GuiResponsiveViewComposition : presentation::compositions::GuiResponsiveCompositionBase {
    event BeforeSwitchingView : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemEventArgs*>^;

    property CurrentView : presentation::compositions::GuiResponsiveCompositionBase* { get:GetCurrentView }
    property SharedControls : system::List<presentation::controls::GuiControl*>^ { get:GetSharedControls }
    property Views : system::List<presentation::compositions::GuiResponsiveCompositionBase*>^ { get:GetViews }

    function GetCurrentView() : presentation::compositions::GuiResponsiveCompositionBase*;
    function GetSharedControls() : system::List<presentation::controls::GuiControl*>^;
    function GetViews() : system::List<presentation::compositions::GuiResponsiveCompositionBase*>^;

    constructor () : presentation::compositions::GuiResponsiveViewComposition*;
}

class presentation::compositions::GuiRowSplitterComposition : presentation::compositions::GuiTableSplitterCompositionBase {
    property RowsToTheTop : system::Int64 { get:GetRowsToTheTop set:SetRowsToTheTop }

    function GetRowsToTheTop() : system::Int64;
    function SetRowsToTheTop(value : system::Int64) : system::Void;

    constructor () : presentation::compositions::GuiRowSplitterComposition*;
}

class presentation::compositions::GuiSharedSizeItemComposition : presentation::compositions::GuiBoundsComposition {
    property Group : system::String { get:GetGroup set:SetGroup }
    property SharedHeight : system::Boolean { get:GetSharedHeight set:SetSharedHeight }
    property SharedWidth : system::Boolean { get:GetSharedWidth set:SetSharedWidth }

    function GetGroup() : system::String;
    function GetSharedHeight() : system::Boolean;
    function GetSharedWidth() : system::Boolean;
    function SetGroup(value : system::String) : system::Void;
    function SetSharedHeight(value : system::Boolean) : system::Void;
    function SetSharedWidth(value : system::Boolean) : system::Void;

    constructor () : presentation::compositions::GuiSharedSizeItemComposition*;
}

class presentation::compositions::GuiSharedSizeRootComposition : presentation::compositions::GuiBoundsComposition {
    constructor () : presentation::compositions::GuiSharedSizeRootComposition*;
}

class presentation::compositions::GuiShortcutKeyManager : presentation::compositions::IGuiShortcutKeyManager {
    constructor () : presentation::compositions::GuiShortcutKeyManager*;
}

class presentation::compositions::GuiSideAlignedComposition : presentation::compositions::GuiGraphicsComposition {
    property Direction : presentation::compositions::GuiSideAlignedComposition::Direction { get:GetDirection set:SetDirection }
    property MaxLength : system::Int64 { get:GetMaxLength set:SetMaxLength }
    property MaxRatio : system::Double { get:GetMaxRatio set:SetMaxRatio }

    function GetDirection() : presentation::compositions::GuiSideAlignedComposition::Direction;
    function GetMaxLength() : system::Int64;
    function GetMaxRatio() : system::Double;
    function SetDirection(value : presentation::compositions::GuiSideAlignedComposition::Direction) : system::Void;
    function SetMaxLength(value : system::Int64) : system::Void;
    function SetMaxRatio(value : system::Double) : system::Void;

    constructor () : presentation::compositions::GuiSideAlignedComposition*;
}

@ValueType
enum presentation::compositions::GuiSideAlignedComposition::Direction {
    Bottom = 3,
    Left = 0,
    Right = 2,
    Top = 1,
}

class presentation::compositions::GuiStackComposition : presentation::compositions::GuiBoundsComposition {
    property Direction : presentation::compositions::GuiStackComposition::Direction { get:GetDirection set:SetDirection }
    property ExtraMargin : presentation::Margin { get:GetExtraMargin set:SetExtraMargin }
    property Padding : system::Int64 { get:GetPadding set:SetPadding }
    property StackItems : system::ReadonlyList<presentation::compositions::GuiStackItemComposition*>^ { get:GetStackItems }

    function EnsureVisible(index : system::Int64) : system::Boolean;
    function GetDirection() : presentation::compositions::GuiStackComposition::Direction;
    function GetExtraMargin() : presentation::Margin;
    function GetPadding() : system::Int64;
    function GetStackItems() : system::ReadonlyList<presentation::compositions::GuiStackItemComposition*>^;
    function InsertStackItem(index : system::Int64, item : presentation::compositions::GuiStackItemComposition*) : system::Boolean;
    function IsStackItemClipped() : system::Boolean;
    function SetDirection(value : presentation::compositions::GuiStackComposition::Direction) : system::Void;
    function SetExtraMargin(value : presentation::Margin) : system::Void;
    function SetPadding(value : system::Int64) : system::Void;

    constructor () : presentation::compositions::GuiStackComposition*;
}

@ValueType
enum presentation::compositions::GuiStackComposition::Direction {
    Horizontal = 0,
    ReversedHorizontal = 2,
    ReversedVertical = 3,
    Vertical = 1,
}

class presentation::compositions::GuiStackItemComposition : presentation::compositions::GuiGraphicsComposition {
    property ExtraMargin : presentation::Margin { get:GetExtraMargin set:SetExtraMargin }

    function GetExtraMargin() : presentation::Margin;
    function SetExtraMargin(value : presentation::Margin) : system::Void;

    constructor () : presentation::compositions::GuiStackItemComposition*;
}

class presentation::compositions::GuiTableComposition : presentation::compositions::GuiBoundsComposition {
    event ConfigChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;

    property BorderVisible : system::Boolean { get:GetBorderVisible set:SetBorderVisible }
    property CellPadding : system::Int64 { get:GetCellPadding set:SetCellPadding }
    property Columns : system::Int64 { get:GetColumns set:SetColumns }
    property Rows : system::Int64 { get:GetRows set:SetRows }

    function GetBorderVisible() : system::Boolean;
    function GetCellPadding() : system::Int64;
    function GetColumnOption(column : system::Int64) : presentation::compositions::GuiCellOption;
    function GetColumns() : system::Int64;
    function GetRowOption(row : system::Int64) : presentation::compositions::GuiCellOption;
    function GetRows() : system::Int64;
    function GetSitedCell(rows : system::Int64, columns : system::Int64) : presentation::compositions::GuiCellComposition*;
    function SetBorderVisible(value : system::Boolean) : system::Void;
    function SetCellPadding(value : system::Int64) : system::Void;
    function SetColumnOption(column : system::Int64, option : presentation::compositions::GuiCellOption) : system::Void;
    @InvokeTemplate:::vl::reflection::description::GuiTableComposition_SetColumns($This, $Arguments)
    @ClosureTemplate:::vl::Func<$Func>($This, &::vl::reflection::description::GuiTableComposition_SetColumns)
    function SetColumns(value : system::Int64) : system::Void;
    function SetRowOption(row : system::Int64, option : presentation::compositions::GuiCellOption) : system::Void;
    @InvokeTemplate:::vl::reflection::description::GuiTableComposition_SetRows($This, $Arguments)
    @ClosureTemplate:::vl::Func<$Func>($This, &::vl::reflection::description::GuiTableComposition_SetRows)
    function SetRows(value : system::Int64) : system::Void;
    function SetRowsAndColumns(rows : system::Int64, columns : system::Int64) : system::Boolean;

    constructor () : presentation::compositions::GuiTableComposition*;
}

class presentation::compositions::GuiTableSplitterCompositionBase : presentation::compositions::GuiGraphicsComposition {
    property TableParent : presentation::compositions::GuiTableComposition* { get:GetTableParent }

    function GetTableParent() : presentation::compositions::GuiTableComposition*;

}

class presentation::compositions::GuiVirtualRepeatCompositionBase : presentation::compositions::GuiBoundsComposition, presentation::compositions::GuiRepeatCompositionBase {
    event AdoptedSizeInvalidated : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        AdoptedSize,
    }
    event AxisChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Axis,
    }
    event TotalSizeChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TotalSize,
    }
    event ViewLocationChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ViewLocation,
    }

    property AdoptedSize : presentation::Size { get:GetAdoptedSize event:AdoptedSizeInvalidated }
    property Axis : presentation::compositions::IGuiAxis^ { get:GetAxis set:SetAxis event:AxisChanged }
    property TotalSize : presentation::Size { get:GetTotalSize event:TotalSizeChanged }
    property UseMinimumTotalSize : system::Boolean { get:GetUseMinimumTotalSize set:SetUseMinimumTotalSize }
    property ViewLocation : presentation::Point { get:GetViewLocation set:SetViewLocation event:ViewLocationChanged }

    function EnsureItemVisible(itemIndex : system::Int64) : presentation::compositions::VirtualRepeatEnsureItemVisibleResult;
    function FindItemByRealKeyDirection(itemIndex : system::Int64, key : presentation::compositions::KeyDirection) : system::Int64;
    function FindItemByVirtualKeyDirection(itemIndex : system::Int64, key : presentation::compositions::KeyDirection) : system::Int64;
    function GetAdoptedSize( : presentation::Size) : presentation::Size;
    function GetAdoptedSize(expectedSize : presentation::Size) : presentation::Size;
    function GetAxis() : presentation::compositions::IGuiAxis^;
    function GetTotalSize() : presentation::Size;
    function GetUseMinimumTotalSize() : system::Boolean;
    function GetViewLocation() : presentation::Point;
    function GetVisibleIndex(style : presentation::templates::GuiTemplate*) : system::Int64;
    function GetVisibleStyle(itemIndex : system::Int64) : presentation::templates::GuiTemplate*;
    function InvalidateLayout() : system::Void;
    function ResetLayout(recreateVisibleStyles : system::Boolean) : system::Void;
    function SetAxis(value : presentation::compositions::IGuiAxis^) : system::Void;
    function SetUseMinimumTotalSize(value : system::Boolean) : system::Void;
    function SetViewLocation(value : presentation::Point) : system::Void;

}

class presentation::compositions::GuiWindowComposition : presentation::compositions::GuiGraphicsComposition {
    constructor () : presentation::compositions::GuiWindowComposition*;
}

interface presentation::compositions::IGuiAltAction : system::Interface {
    property Alt : system::String { get:GetAlt }

    function GetActivatingAltHost() : presentation::compositions::IGuiAltActionHost*;
    function GetAlt() : system::String;
    function GetAltComposition() : presentation::compositions::GuiGraphicsComposition*;
    @InvokeTemplate:::vl::presentation::controls::QueryServiceHelper<::vl::presentation::compositions::IGuiAltAction>::GetIdentifier($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::QueryServiceHelper<::vl::presentation::compositions::IGuiAltAction>::GetIdentifier)
    static function GetIdentifier() : system::String;
    function IsAltAvailable() : system::Boolean;
    function IsAltEnabled() : system::Boolean;
    function OnActiveAlt() : system::Void;

}

interface presentation::compositions::IGuiAltActionContainer : system::Interface {
    property AltActionCount : system::Int64 { get:GetAltActionCount }

    function GetAltAction(index : system::Int64) : presentation::compositions::IGuiAltAction*;
    function GetAltActionCount() : system::Int64;
    @InvokeTemplate:::vl::presentation::controls::QueryServiceHelper<::vl::presentation::compositions::IGuiAltActionContainer>::GetIdentifier($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::QueryServiceHelper<::vl::presentation::compositions::IGuiAltActionContainer>::GetIdentifier)
    static function GetIdentifier() : system::String;

}

interface presentation::compositions::IGuiAltActionHost : system::Interface {
    property AltComposition : presentation::compositions::GuiGraphicsComposition* { get:GetAltComposition }
    property PreviousAltHost : presentation::compositions::IGuiAltActionHost* { get:GetPreviousAltHost }

    @InvokeTemplate:::vl::reflection::description::IGuiAltActionHost_CollectAltActions($This, $Arguments)
    @ClosureTemplate:::vl::Func<$Func>($This, &::vl::reflection::description::IGuiAltActionHost_CollectAltActions)
    function CollectAltActions(actions : system::List<presentation::compositions::IGuiAltAction*>^) : system::Void;
    function GetAltComposition() : presentation::compositions::GuiGraphicsComposition*;
    @InvokeTemplate:::vl::presentation::controls::QueryServiceHelper<::vl::presentation::compositions::IGuiAltActionHost>::GetIdentifier($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::QueryServiceHelper<::vl::presentation::compositions::IGuiAltActionHost>::GetIdentifier)
    static function GetIdentifier() : system::String;
    function GetPreviousAltHost() : presentation::compositions::IGuiAltActionHost*;
    function OnActivatedAltHost(previousHost : presentation::compositions::IGuiAltActionHost*) : system::Void;
    function OnDeactivatedAltHost() : system::Void;

}

interface presentation::compositions::IGuiAxis : system::Interface {
    function RealKeyDirectionToVirtualKeyDirection(key : presentation::compositions::KeyDirection) : presentation::compositions::KeyDirection;
    function RealMarginToVirtualMargin(margin : presentation::Margin) : presentation::Margin;
    function RealPointToVirtualPoint(realFullSize : presentation::Size, point : presentation::Point) : presentation::Point;
    function RealRectToVirtualRect(realFullSize : presentation::Size, rect : presentation::Rect) : presentation::Rect;
    function RealSizeToVirtualSize(size : presentation::Size) : presentation::Size;
    function VirtualMarginToRealMargin(margin : presentation::Margin) : presentation::Margin;
    function VirtualPointToRealPoint(realFullSize : presentation::Size, point : presentation::Point) : presentation::Point;
    function VirtualRectToRealRect(realFullSize : presentation::Size, rect : presentation::Rect) : presentation::Rect;
    function VirtualSizeToRealSize(size : presentation::Size) : presentation::Size;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IGuiAxis>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IGuiAxis>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::compositions::IGuiAxis^;
}

interface presentation::compositions::IGuiShortcutKeyItem : system::Interface {
    property Manager : presentation::compositions::IGuiShortcutKeyManager* { get:GetManager }
    property Name : system::String { get:GetName }

    function GetManager() : presentation::compositions::IGuiShortcutKeyManager*;
    function GetName() : system::String;

}

interface presentation::compositions::IGuiShortcutKeyManager : system::Interface {
    property ItemCount : system::Int64 { get:GetItemCount }

    function CreateNewShortcut(ctrl : system::Boolean, shift : system::Boolean, alt : system::Boolean, ket : presentation::VKEY) : presentation::compositions::IGuiShortcutKeyItem*;
    function CreateShortcutIfNotExist(ctrl : system::Boolean, shift : system::Boolean, alt : system::Boolean, ket : presentation::VKEY) : presentation::compositions::IGuiShortcutKeyItem*;
    function DestroyShortcut(ctrl : presentation::compositions::IGuiShortcutKeyItem*) : system::Boolean;
    function GetItem(index : system::Int64) : presentation::compositions::IGuiShortcutKeyItem*;
    function GetItemCount() : system::Int64;
    function TryGetShortcut(ctrl : system::Boolean, shift : system::Boolean, alt : system::Boolean, ket : presentation::VKEY) : presentation::compositions::IGuiShortcutKeyItem*;

}

interface presentation::compositions::IGuiTabAction : system::Interface {
    property AcceptTabInput : system::Boolean { get:GetAcceptTabInput }
    property TabPriority : system::Int64 { get:GetTabPriority }

    function GetAcceptTabInput() : system::Boolean;
    @InvokeTemplate:::vl::presentation::controls::QueryServiceHelper<::vl::presentation::compositions::IGuiTabAction>::GetIdentifier($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::QueryServiceHelper<::vl::presentation::compositions::IGuiTabAction>::GetIdentifier)
    static function GetIdentifier() : system::String;
    function GetTabPriority() : system::Int64;
    function IsTabAvailable() : system::Boolean;
    function IsTabEnabled() : system::Boolean;

}

@ValueType
enum presentation::compositions::KeyDirection {
    Down = 1,
    End = 5,
    Home = 4,
    Left = 2,
    PageDown = 7,
    PageLeft = 8,
    PageRight = 9,
    PageUp = 6,
    Right = 3,
    Up = 0,
}

@ValueType
enum presentation::compositions::ResponsiveDirection {
    Both = 3,
    Horizontal = 1,
    Vertical = 2,
}

@ValueType
enum presentation::compositions::VirtualRepeatEnsureItemVisibleResult {
    ItemNotExists = 0,
    Moved = 1,
    NotMoved = 2,
}

@ValueType
enum presentation::controls::ButtonState {
    Active = 1,
    Normal = 0,
    Pressed = 2,
}

@ValueType
enum presentation::controls::ColumnSortingState {
    Ascending = 1,
    Descending = 2,
    NotSorted = 0,
}

@ValueType
struct presentation::controls::GalleryPos {
    property group : system::Int64;
    property item : system::Int64;
}

class presentation::controls::GuiApplication : system::ReferenceType {
    event LocaleChanged : system::Function<system::Void>^ observing {
        Locale,
    }

    property ExecutableFolder : system::String { get:GetExecutableFolder }
    property ExecutablePath : system::String { get:GetExecutablePath }
    property GlobalShortcutKeyManager : presentation::compositions::IGuiShortcutKeyManager* { get:GetGlobalShortcutKeyManager }
    property Locale : system::Locale { get:GetLocale set:SetLocale event:LocaleChanged }
    property MainWindow : presentation::controls::GuiWindow* { get:GetMainWindow }
    property TooltipOwner : presentation::controls::GuiControl* { get:GetTooltipOwner }
    property Windows : system::ReadonlyList<presentation::controls::GuiWindow*>^ { get:GetWindows }

    function CloseTooltip() : system::Void;
    function DelayExecute(proc : system::Function<system::Void>^, milliseconds : system::Int64) : presentation::INativeDelay^;
    function DelayExecuteInMainThread(proc : system::Function<system::Void>^, milliseconds : system::Int64) : presentation::INativeDelay^;
    @InvokeTemplate:::vl::presentation::controls::GetApplication($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::GetApplication)
    static function GetApplication() : presentation::controls::GuiApplication*;
    function GetExecutableFolder() : system::String;
    function GetExecutablePath() : system::String;
    function GetGlobalShortcutKeyManager() : presentation::compositions::IGuiShortcutKeyManager*;
    function GetLocale() : system::Locale;
    function GetMainWindow() : presentation::controls::GuiWindow*;
    function GetTooltipOwner() : presentation::controls::GuiControl*;
    function GetWindowFromNative(nativeWindow : presentation::INativeWindow*) : presentation::controls::GuiWindow*;
    function GetWindows() : system::ReadonlyList<presentation::controls::GuiWindow*>^;
    function InvokeAsync(proc : system::Function<system::Void>^) : system::Void;
    function InvokeInMainThread(controlHost : presentation::controls::GuiControlHost*, proc : system::Function<system::Void>^) : system::Void;
    function InvokeInMainThreadAndWait(controlHost : presentation::controls::GuiControlHost*, proc : system::Function<system::Void>^, milliseconds : system::Int64) : system::Boolean;
    function IsInMainThread( : presentation::controls::GuiControlHost*) : system::Boolean;
    function Run(mainWindow : presentation::controls::GuiWindow*) : system::Void;
    function RunGuiTask(controlHost : presentation::controls::GuiControlHost*, proc : system::Function<system::Void>^) : system::Void;
    function RunOneCycle() : system::Boolean;
    function SetLocale(value : system::Locale) : system::Void;
    function ShowTooltip(owner : presentation::controls::GuiControl*, tooltip : presentation::controls::GuiControl*, preferredContentWidth : system::Int64, location : presentation::Point) : system::Void;

}

class presentation::controls::GuiBindableDataGrid : presentation::controls::GuiVirtualDataGrid {
    event LargeImagePropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        LargeImageProperty,
    }
    event SmallImagePropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SmallImageProperty,
    }

    property AdditionalFilter : presentation::controls::list::IDataFilter^ { get:GetAdditionalFilter set:SetAdditionalFilter }
    property Columns : system::List<presentation::controls::list::DataColumn^>^ { get:GetColumns }
    property DataColumns : system::List<system::Int64>^ { get:GetDataColumns }
    property ItemSource : system::Enumerable^ { get:GetItemSource set:SetItemSource }
    property LargeImageProperty : system::Function<presentation::GuiImageData^, system::Object>^ { get:GetLargeImageProperty set:SetLargeImageProperty event:LargeImagePropertyChanged }
    property SelectedCellValue : system::Object { get:GetSelectedCellValue event:SelectedCellChanged }
    property SelectedRowValue : system::Object { get:GetSelectedRowValue event:SelectedCellChanged }
    property SmallImageProperty : system::Function<presentation::GuiImageData^, system::Object>^ { get:GetSmallImageProperty set:SetSmallImageProperty event:SmallImagePropertyChanged }

    function GetAdditionalFilter() : presentation::controls::list::IDataFilter^;
    function GetColumns() : system::List<presentation::controls::list::DataColumn^>^;
    function GetDataColumns() : system::List<system::Int64>^;
    function GetItemSource() : system::Enumerable^;
    function GetLargeImageProperty() : system::Function<presentation::GuiImageData^, system::Object>^;
    function GetSelectedCellValue() : system::Object;
    function GetSelectedRowValue() : system::Object;
    function GetSmallImageProperty() : system::Function<presentation::GuiImageData^, system::Object>^;
    function NotifyItemDataModified(start : system::Int64, count : system::Int64) : system::Boolean;
    function SetAdditionalFilter(value : presentation::controls::list::IDataFilter^) : system::Void;
    function SetItemSource(value : system::Enumerable^) : system::Void;
    function SetLargeImageProperty(value : system::Function<presentation::GuiImageData^, system::Object>^) : system::Void;
    function SetSmallImageProperty(value : system::Function<presentation::GuiImageData^, system::Object>^) : system::Void;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiBindableDataGrid*;
}

class presentation::controls::GuiBindableListView : presentation::controls::GuiVirtualListView {
    event LargeImagePropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        LargeImageProperty,
    }
    event SmallImagePropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SmallImageProperty,
    }

    property Columns : system::List<presentation::controls::list::ListViewColumn^>^ { get:GetColumns }
    property DataColumns : system::List<system::Int64>^ { get:GetDataColumns }
    property ItemSource : system::Enumerable^ { get:GetItemSource set:SetItemSource }
    property LargeImageProperty : system::Function<presentation::GuiImageData^, system::Object>^ { get:GetLargeImageProperty set:SetLargeImageProperty event:LargeImagePropertyChanged }
    property SelectedItem : system::Object { get:GetSelectedItem event:SelectionChanged }
    property SmallImageProperty : system::Function<presentation::GuiImageData^, system::Object>^ { get:GetSmallImageProperty set:SetSmallImageProperty event:SmallImagePropertyChanged }

    function GetColumns() : system::List<presentation::controls::list::ListViewColumn^>^;
    function GetDataColumns() : system::List<system::Int64>^;
    function GetItemSource() : system::Enumerable^;
    function GetLargeImageProperty() : system::Function<presentation::GuiImageData^, system::Object>^;
    function GetSelectedItem() : system::Object;
    function GetSmallImageProperty() : system::Function<presentation::GuiImageData^, system::Object>^;
    function NotifyItemDataModified(start : system::Int64, count : system::Int64) : system::Boolean;
    function SetItemSource(value : system::Enumerable^) : system::Void;
    function SetLargeImageProperty(value : system::Function<presentation::GuiImageData^, system::Object>^) : system::Void;
    function SetSmallImageProperty(value : system::Function<presentation::GuiImageData^, system::Object>^) : system::Void;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiBindableListView*;
}

class presentation::controls::GuiBindableListView::ItemSource : presentation::controls::list::ItemProviderBase, presentation::controls::list::IListViewItemView, presentation::controls::list::ListViewColumnItemArranger::IColumnItemView {
}

class presentation::controls::GuiBindableRibbonGalleryList : presentation::controls::GuiRibbonGallery, presentation::controls::list::GroupedDataSource {
    event ItemApplied : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemEventArgs*>^;
    event ItemTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ItemTemplate,
    }
    event PreviewStarted : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemEventArgs*>^;
    event PreviewStopped : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemEventArgs*>^;
    event SelectionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SelectedIndex,
        SelectedItem,
    }

    property ItemTemplate : system::Function<presentation::templates::GuiListItemTemplate*, system::Object>^ { get:GetItemTemplate set:SetItemTemplate event:ItemTemplateChanged }
    property MaxCount : system::Int64 { get:GetMaxCount set:SetMaxCount }
    property MinCount : system::Int64 { get:GetMinCount set:SetMinCount }
    property SelectedIndex : system::Int64 { get:GetSelectedIndex event:SelectionChanged }
    property SelectedItem : system::Object { get:GetSelectedItem event:SelectionChanged }
    property SubMenu : presentation::controls::GuiToolstripMenu* { get:GetSubMenu }
    property VisibleItemCount : system::Int64 { get:GetVisibleItemCount set:SetVisibleItemCount }

    function ApplyItem(index : system::Int64) : system::Void;
    function GalleryPosToIndex(pos : presentation::controls::GalleryPos) : system::Int64;
    function GetItemTemplate() : system::Function<presentation::templates::GuiListItemTemplate*, system::Object>^;
    function GetMaxCount() : system::Int64;
    function GetMinCount() : system::Int64;
    function GetSelectedIndex() : system::Int64;
    function GetSelectedItem() : system::Object;
    function GetSubMenu() : presentation::controls::GuiToolstripMenu*;
    function GetVisibleItemCount() : system::Int64;
    function IndexToGalleryPos(index : system::Int64) : presentation::controls::GalleryPos;
    function SelectItem(index : system::Int64) : system::Void;
    function SetItemTemplate(value : system::Function<presentation::templates::GuiListItemTemplate*, system::Object>^) : system::Void;
    function SetMaxCount(value : system::Int64) : system::Void;
    function SetMinCount(value : system::Int64) : system::Void;
    function SetVisibleItemCount(value : system::Int64) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiRibbonGalleryListTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiBindableRibbonGalleryList*;
}

class presentation::controls::GuiBindableTextList : presentation::controls::GuiVirtualTextList {
    event CheckedPropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CheckedProperty,
    }
    event TextPropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TextProperty,
    }

    property CheckedProperty : system::Function<system::Boolean, system::Object, system::Boolean, system::Boolean>^ { get:GetCheckedProperty set:SetCheckedProperty event:CheckedPropertyChanged }
    property ItemSource : system::Enumerable^ { get:GetItemSource set:SetItemSource }
    property SelectedItem : system::Object { get:GetSelectedItem event:SelectionChanged }
    property TextProperty : system::Function<system::String, system::Object>^ { get:GetTextProperty set:SetTextProperty event:TextPropertyChanged }

    function GetCheckedProperty() : system::Function<system::Boolean, system::Object, system::Boolean, system::Boolean>^;
    function GetItemSource() : system::Enumerable^;
    function GetSelectedItem() : system::Object;
    function GetTextProperty() : system::Function<system::String, system::Object>^;
    function NotifyItemDataModified(start : system::Int64, count : system::Int64) : system::Boolean;
    function SetCheckedProperty(value : system::Function<system::Boolean, system::Object, system::Boolean, system::Boolean>^) : system::Void;
    function SetItemSource(value : system::Enumerable^) : system::Void;
    function SetTextProperty(value : system::Function<system::String, system::Object>^) : system::Void;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiBindableTextList*;
}

class presentation::controls::GuiBindableTextList::ItemSource : presentation::controls::list::ItemProviderBase, presentation::controls::list::ITextItemView {
}

class presentation::controls::GuiBindableTreeView : presentation::controls::GuiVirtualTreeView {
    event ChildrenPropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ChildrenProperty,
    }
    event ImagePropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ImageProperty,
    }
    event TextPropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TextProperty,
    }

    property ChildrenProperty : system::Function<system::Enumerable^, system::Object>^ { get:GetChildrenProperty set:SetChildrenProperty event:ChildrenPropertyChanged }
    property ImageProperty : system::Function<presentation::GuiImageData^, system::Object>^ { get:GetImageProperty set:SetImageProperty event:ImagePropertyChanged }
    property ItemSource : system::Object { get:GetItemSource set:SetItemSource }
    property ReverseMappingProperty : system::Function<system::Object, system::Object, system::Object, system::Boolean>^ { get:GetReverseMappingProperty }
    property SelectedItem : system::Object { get:GetSelectedItem event:SelectionChanged }
    property TextProperty : system::Function<system::String, system::Object>^ { get:GetTextProperty set:SetTextProperty event:TextPropertyChanged }

    function GetChildrenProperty() : system::Function<system::Enumerable^, system::Object>^;
    function GetImageProperty() : system::Function<presentation::GuiImageData^, system::Object>^;
    function GetItemSource() : system::Object;
    function GetReverseMappingProperty() : system::Function<system::Object, system::Object, system::Object, system::Boolean>^;
    function GetSelectedItem() : system::Object;
    function GetTextProperty() : system::Function<system::String, system::Object>^;
    function NotifyNodeDataModified(value : system::Object) : system::Void;
    function SetChildrenProperty(value : system::Function<system::Enumerable^, system::Object>^) : system::Void;
    function SetImageProperty(value : system::Function<presentation::GuiImageData^, system::Object>^) : system::Void;
    function SetItemSource(value : system::Object) : system::Void;
    function SetTextProperty(value : system::Function<system::String, system::Object>^) : system::Void;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiBindableTreeView*;
    constructor (themeName : presentation::theme::ThemeName, reverseMappingProperty : system::Function<system::Object, system::Object, system::Object, system::Boolean>^) : presentation::controls::GuiBindableTreeView*;
}

class presentation::controls::GuiBindableTreeView::ItemSource : presentation::controls::tree::NodeRootProviderBase, presentation::controls::tree::ITreeViewItemView {
}

class presentation::controls::GuiBindableTreeView::ItemSourceNode : presentation::controls::tree::INodeProvider {
}

class presentation::controls::GuiButton : presentation::controls::GuiControl {
    event Clicked : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;

    property AutoFocus : system::Boolean { get:GetAutoFocus set:SetAutoFocus }
    property ClickOnMouseUp : system::Boolean { get:GetClickOnMouseUp set:SetClickOnMouseUp }
    property IgnoreChildControlMouseEvents : system::Boolean { get:GetIgnoreChildControlMouseEvents set:SetIgnoreChildControlMouseEvents }

    function GetAutoFocus() : system::Boolean;
    function GetClickOnMouseUp() : system::Boolean;
    function GetIgnoreChildControlMouseEvents() : system::Boolean;
    function SetAutoFocus(value : system::Boolean) : system::Void;
    function SetClickOnMouseUp(value : system::Boolean) : system::Void;
    function SetIgnoreChildControlMouseEvents(value : system::Boolean) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiButtonTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiButton*;
}

class presentation::controls::GuiColorDialog : presentation::controls::GuiDialogBase {
    event SelectedColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SelectedColor,
    }

    property CustomColors : system::List<presentation::Color>^ { get:GetCustomColors }
    property EnabledCustomColor : system::Boolean { get:GetEnabledCustomColor set:SetEnabledCustomColor }
    property OpenedCustomColor : system::Boolean { get:GetOpenedCustomColor set:SetOpenedCustomColor }
    property SelectedColor : presentation::Color { get:GetSelectedColor set:SetSelectedColor event:SelectedColorChanged }

    function GetCustomColors() : system::List<presentation::Color>^;
    function GetEnabledCustomColor() : system::Boolean;
    function GetOpenedCustomColor() : system::Boolean;
    function GetSelectedColor() : presentation::Color;
    function SetEnabledCustomColor(value : system::Boolean) : system::Void;
    function SetOpenedCustomColor(value : system::Boolean) : system::Void;
    function SetSelectedColor(value : presentation::Color) : system::Void;
    function ShowDialog() : system::Boolean;

    constructor () : presentation::controls::GuiColorDialog*;
}

class presentation::controls::GuiComboBoxBase : presentation::controls::GuiMenuButton {
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiComboBoxTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiComboBoxBase*;
}

class presentation::controls::GuiComboBoxListControl : presentation::controls::GuiComboBoxBase {
    event ItemTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ItemTemplate,
    }
    event SelectedIndexChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SelectedIndex,
        SelectedItem,
    }

    property ContainedListControl : presentation::controls::GuiSelectableListControl* { get:GetContainedListControl }
    property ItemProvider : presentation::controls::list::IItemProvider* { get:GetItemProvider }
    property ItemTemplate : system::Function<presentation::templates::GuiTemplate*, system::Object>^ { get:GetItemTemplate set:SetItemTemplate event:ItemTemplateChanged }
    property SelectedIndex : system::Int64 { get:GetSelectedIndex set:SetSelectedIndex event:SelectedIndexChanged }
    property SelectedItem : system::Object { get:GetSelectedItem event:SelectedIndexChanged }

    function GetContainedListControl() : presentation::controls::GuiSelectableListControl*;
    function GetItemProvider() : presentation::controls::list::IItemProvider*;
    function GetItemTemplate() : system::Function<presentation::templates::GuiTemplate*, system::Object>^;
    function GetSelectedIndex() : system::Int64;
    function GetSelectedItem() : system::Object;
    function SetItemTemplate(value : system::Function<presentation::templates::GuiTemplate*, system::Object>^) : system::Void;
    function SetSelectedIndex(value : system::Int64) : system::Void;

    constructor (themeName : presentation::theme::ThemeName, containedListControl : presentation::controls::GuiSelectableListControl*) : presentation::controls::GuiComboBoxListControl*;
}

class presentation::controls::GuiComboButton : presentation::controls::GuiComboBoxBase {
    constructor (themeName : presentation::theme::ThemeName, dropdownControl : presentation::controls::GuiControl*) : presentation::controls::GuiComboButton*;
}

class presentation::controls::GuiComponent : system::ReferenceType {
}

class presentation::controls::GuiControl : system::ReferenceType {
    event AltChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Alt,
    }
    event ContextChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Context,
    }
    event ControlSignalTrigerred : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiControlSignalEventArgs*>^;
    event ControlTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ControlTemplate,
    }
    event ControlThemeNameChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ControlThemeName,
    }
    event DisplayFontChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        DisplayFont,
    }
    event EnabledChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Enabled,
    }
    event FocusedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Focused,
    }
    event FontChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Font,
    }
    event TextChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Text,
    }
    event VisibleChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Visible,
    }
    event VisuallyEnabledChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        VisuallyEnabled,
    }

    property AcceptTabInput : system::Boolean { get:GetAcceptTabInput set:SetAcceptTabInput }
    property Alt : system::String { get:GetAlt set:SetAlt event:AltChanged }
    property BoundsComposition : presentation::compositions::GuiBoundsComposition* { get:GetBoundsComposition }
    property ChildrenCount : system::Int64 { get:GetChildrenCount }
    property ContainerComposition : presentation::compositions::GuiGraphicsComposition* { get:GetContainerComposition }
    property Context : system::Object { get:GetContext set:SetContext event:ContextChanged }
    property ControlTemplate : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^ { get:GetControlTemplate set:SetControlTemplate event:ControlTemplateChanged }
    property ControlTemplateObject : presentation::templates::GuiControlTemplate* { get:GetControlTemplateObject }
    property ControlThemeName : presentation::theme::ThemeName { get:GetControlThemeName set:SetControlThemeName event:ControlThemeNameChanged }
    property DisplayFont : presentation::FontProperties { get:GetDisplayFont event:DisplayFontChanged }
    property DisposedFlag : presentation::controls::GuiDisposedFlag^ { get:GetDisposedFlag }
    property Enabled : system::Boolean { get:GetEnabled set:SetEnabled event:EnabledChanged }
    property FocusableComposition : presentation::compositions::GuiGraphicsComposition* { get:GetFocusableComposition }
    property Focused : system::Boolean { get:GetFocused event:FocusedChanged }
    property Font : presentation::FontProperties? { get:GetFont set:SetFont event:FontChanged }
    property Parent : presentation::controls::GuiControl* { get:GetParent }
    property RelatedControlHost : presentation::controls::GuiControlHost* { get:GetRelatedControlHost }
    property TabPriority : system::Int64 { get:GetTabPriority set:SetTabPriority }
    property Tag : system::Object { get:GetTag set:SetTag }
    property Text : system::String { get:GetText set:SetText event:TextChanged }
    property TooltipControl : presentation::controls::GuiControl* { get:GetTooltipControl set:SetTooltipControl }
    property TooltipWidth : system::Int64 { get:GetTooltipWidth set:SetTooltipWidth }
    property Visible : system::Boolean { get:GetVisible set:SetVisible event:VisibleChanged }
    property VisuallyEnabled : system::Boolean { get:GetVisuallyEnabled event:VisuallyEnabledChanged }

    function AddChild(control : presentation::controls::GuiControl*) : system::Boolean;
    function AddService(identifier : system::String, value : system::Interface^) : system::Boolean;
    function CloseTooltip() : system::Void;
    function DisplayTooltip(location : presentation::Point) : system::Boolean;
    function GetAcceptTabInput() : system::Boolean;
    function GetAlt() : system::String;
    function GetBoundsComposition() : presentation::compositions::GuiBoundsComposition*;
    function GetChild(index : system::Int64) : presentation::controls::GuiControl*;
    function GetChildrenCount() : system::Int64;
    function GetContainerComposition() : presentation::compositions::GuiGraphicsComposition*;
    function GetContext() : system::Object;
    function GetControlTemplate() : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    function GetControlTemplateObject() : presentation::templates::GuiControlTemplate*;
    function GetControlThemeName() : presentation::theme::ThemeName;
    function GetDisplayFont() : presentation::FontProperties;
    function GetDisposedFlag() : presentation::controls::GuiDisposedFlag^;
    function GetEnabled() : system::Boolean;
    function GetFocusableComposition() : presentation::compositions::GuiGraphicsComposition*;
    function GetFocused() : system::Boolean;
    function GetFont() : presentation::FontProperties?;
    function GetParent() : presentation::controls::GuiControl*;
    function GetRelatedControlHost() : presentation::controls::GuiControlHost*;
    function GetTabPriority() : system::Int64;
    function GetTag() : system::Object;
    function GetText() : system::String;
    function GetTooltipControl() : presentation::controls::GuiControl*;
    function GetTooltipWidth() : system::Int64;
    function GetVisible() : system::Boolean;
    function GetVisuallyEnabled() : system::Boolean;
    function HasChild(control : presentation::controls::GuiControl*) : system::Boolean;
    function QueryService(identifier : system::String) : system::Interface*;
    @InvokeTemplate:::vl::presentation::compositions::SafeDeleteControl($This, $Arguments)
    @ClosureTemplate:::vl::Func<$Func>($This, &::vl::presentation::compositions::SafeDeleteControl)
    function SafeDelete() : system::Void;
    function SetAcceptTabInput(value : system::Boolean) : system::Void;
    function SetActivatingAltHost(host : presentation::compositions::IGuiAltActionHost*) : system::Void;
    function SetAlt(value : system::String) : system::Boolean;
    function SetContext(value : system::Object) : system::Void;
    function SetControlTemplate(value : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^) : system::Void;
    function SetControlThemeName(value : presentation::theme::ThemeName) : system::Void;
    function SetControlThemeNameAndTemplate(themeNameValue : presentation::theme::ThemeName, controlTemplateValue : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^) : system::Void;
    function SetEnabled(value : system::Boolean) : system::Void;
    function SetFocused() : system::Void;
    function SetFont(value : presentation::FontProperties?) : system::Void;
    function SetTabPriority(value : system::Int64) : system::Void;
    function SetTag(value : system::Object) : system::Void;
    function SetText(value : system::String) : system::Void;
    function SetTooltipControl(value : presentation::controls::GuiControl*) : presentation::controls::GuiControl*;
    function SetTooltipWidth(value : system::Int64) : system::Void;
    function SetVisible(value : system::Boolean) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiControlTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiControl*;
}

class presentation::controls::GuiControlHost : presentation::controls::GuiControl, presentation::controls::GuiInstanceRootObject {
    event WindowActivated : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event WindowClosed : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event WindowClosing : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiRequestEventArgs*>^;
    event WindowDeactivated : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event WindowDestroying : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event WindowGotFocus : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event WindowLostFocus : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event WindowOpened : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event WindowReadyToClose : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;

    property ClientSize : presentation::Size { get:GetClientSize set:SetClientSize }
    property EnabledActivate : system::Boolean { get:GetEnabledActivate set:SetEnabledActivate }
    property Location : presentation::NativePoint { get:GetLocation set:SetLocation }
    property MainComposition : presentation::compositions::GuiGraphicsComposition* { get:GetMainComposition }
    property RelatedScreen : presentation::INativeScreen* { get:GetRelatedScreen }
    property RenderingAsActivated : system::Boolean { get:GetRenderingAsActivated }
    property ShortcutKeyManager : presentation::compositions::IGuiShortcutKeyManager* { get:GetShortcutKeyManager set:SetShortcutKeyManager }
    property ShowInTaskBar : system::Boolean { get:GetShowInTaskBar set:SetShowInTaskBar }
    property TopMost : system::Boolean { get:GetTopMost set:SetTopMost }

    function Close() : system::Void;
    function DeleteAfterProcessingAllEvents(callback : system::Function<system::Void>^) : system::Void;
    function ForceCalculateSizeImmediately() : system::Void;
    function GetClientSize() : presentation::Size;
    function GetEnabledActivate() : system::Boolean;
    function GetLocation() : presentation::NativePoint;
    function GetMainComposition() : presentation::compositions::GuiGraphicsComposition*;
    function GetOpening() : system::Boolean;
    function GetRelatedScreen() : presentation::INativeScreen*;
    function GetRenderingAsActivated() : system::Boolean;
    function GetShortcutKeyManager() : presentation::compositions::IGuiShortcutKeyManager*;
    function GetShowInTaskBar() : system::Boolean;
    function GetTopMost() : system::Boolean;
    function Hide() : system::Void;
    function SetBounds(location : presentation::NativePoint, size : presentation::Size) : system::Void;
    function SetClientSize(value : presentation::Size) : system::Void;
    function SetEnabledActivate(value : system::Boolean) : system::Void;
    function SetLocation(value : presentation::NativePoint) : system::Void;
    function SetShortcutKeyManager(value : presentation::compositions::IGuiShortcutKeyManager*) : system::Void;
    function SetShowInTaskBar(value : system::Boolean) : system::Void;
    function SetTopMost(value : system::Boolean) : system::Void;
    function Show() : system::Void;
    function ShowDeactivated() : system::Void;
    function ShowMaximized() : system::Void;
    function ShowMinimized() : system::Void;
    function ShowRestored() : system::Void;

    constructor (themeName : presentation::theme::ThemeName, mode : presentation::INativeWindow::WindowMode) : presentation::controls::GuiControlHost*;
}

class presentation::controls::GuiCustomControl : presentation::controls::GuiControl, presentation::controls::GuiInstanceRootObject {
    property FocusableComposition : presentation::compositions::GuiGraphicsComposition* { get:GetFocusableComposition set:SetFocusableComposition }

    function SetFocusableComposition(value : presentation::compositions::GuiGraphicsComposition*) : system::Void;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiCustomControl*;
}

class presentation::controls::GuiDateComboBox : presentation::controls::GuiComboBoxBase {
    event SelectedDateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SelectedDate,
    }

    property DatePicker : presentation::controls::GuiDatePicker* { get:GetDatePicker }
    property SelectedDate : system::DateTime { get:GetSelectedDate set:SetSelectedDate event:SelectedDateChanged }

    function GetDatePicker() : presentation::controls::GuiDatePicker*;
    function GetSelectedDate() : system::DateTime;
    function SetSelectedDate(value : system::DateTime) : system::Void;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiDateComboBox*;
}

class presentation::controls::GuiDatePicker : presentation::controls::GuiControl {
    event DateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Date,
    }
    event DateFormatChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        DateFormat,
    }
    event DateLocaleChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        DateLocale,
    }
    event DateNavigated : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event DateSelected : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;

    property Date : system::DateTime { get:GetDate set:SetDate event:DateChanged }
    property DateFormat : system::String { get:GetDateFormat set:SetDateFormat event:DateFormatChanged }
    property DateLocale : system::Locale { get:GetDateLocale set:SetDateLocale event:DateLocaleChanged }

    function GetDate() : system::DateTime;
    function GetDateFormat() : system::String;
    function GetDateLocale() : system::Locale;
    function SetDate(value : system::DateTime) : system::Void;
    function SetDateFormat(value : system::String) : system::Void;
    function SetDateLocale(value : system::Locale) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiDatePickerTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiDatePicker*;
}

class presentation::controls::GuiDialogBase : presentation::controls::GuiComponent {
}

class presentation::controls::GuiDisposedFlag : system::ReferenceType {
    function IsDisposed() : system::Boolean;

}

class presentation::controls::GuiDocumentCommonInterface : system::ReferenceType {
    event ActiveHyperlinkChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event ActiveHyperlinkExecuted : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event ModifiedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Modified,
    }
    event SelectionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SelectionText,
        SelectionModel,
    }
    event UndoRedoChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;

    property ActiveHyperlinkReference : system::String { get:GetActiveHyperlinkReference }
    property CaretBegin : presentation::TextPos { get:GetCaretBegin }
    property CaretEnd : presentation::TextPos { get:GetCaretEnd }
    property Document : presentation::DocumentModel^ { get:GetDocument set:SetDocument }
    property DocumentItems : system::ReadonlyDictionary<system::String, presentation::controls::GuiDocumentItem^>^ { get:GetDocumentItems }
    property EditMode : presentation::controls::GuiDocumentCommonInterface::EditMode { get:GetEditMode set:SetEditMode }
    property Modified : system::Boolean { get:GetModified event:ModifiedChanged }
    property SelectionModel : presentation::DocumentModel^ { get:GetSelectionModel set:SetSelectionModel event:SelectionChanged }
    property SelectionText : system::String { get:GetSelectionText set:SetSelectionText event:SelectionChanged }

    function AddDocumentItem(value : presentation::controls::GuiDocumentItem^) : system::Boolean;
    function CalculateCaretFromPoint(point : presentation::Point) : presentation::TextPos;
    function CanCopy() : system::Boolean;
    function CanCut() : system::Boolean;
    function CanPaste() : system::Boolean;
    function CanRedo() : system::Boolean;
    function CanUndo() : system::Boolean;
    function ClearStyle(begin : presentation::TextPos, end : presentation::TextPos) : system::Void;
    function ClearUndoRedo() : system::Void;
    function Copy() : system::Boolean;
    function Cut() : system::Boolean;
    function EditHyperlink(paragraphIndex : system::Int64, begin : system::Int64, end : system::Int64, reference : system::String, normalStyleName : system::String, activeStyleName : system::String) : system::Void;
    function EditImage(begin : presentation::TextPos, end : presentation::TextPos, image : presentation::GuiImageData^) : system::Void;
    function EditRun(begin : presentation::TextPos, end : presentation::TextPos, model : presentation::DocumentModel^, copy : system::Boolean) : system::Void;
    function EditStyle(begin : presentation::TextPos, end : presentation::TextPos, style : presentation::DocumentStyleProperties^) : system::Void;
    function EditStyleName(begin : presentation::TextPos, end : presentation::TextPos, styleName : system::String) : system::Void;
    function EditText(begin : presentation::TextPos, end : presentation::TextPos, frontSide : system::Boolean, text : system::ReadonlyList<system::String>^) : system::Void;
    function GetActiveHyperlinkReference() : system::String;
    function GetCaretBegin() : presentation::TextPos;
    function GetCaretBounds(caret : presentation::TextPos, frontSide : system::Boolean) : presentation::Rect;
    function GetCaretEnd() : presentation::TextPos;
    function GetDocument() : presentation::DocumentModel^;
    function GetDocumentItems() : system::ReadonlyDictionary<system::String, presentation::controls::GuiDocumentItem^>^;
    function GetEditMode() : presentation::controls::GuiDocumentCommonInterface::EditMode;
    function GetModified() : system::Boolean;
    function GetSelectionModel() : presentation::DocumentModel^;
    function GetSelectionText() : system::String;
    function NotifyModificationSaved() : system::Void;
    function NotifyParagraphUpdated(index : system::Int64, oldCount : system::Int64, newCount : system::Int64, updatedText : system::Boolean) : system::Void;
    function Paste() : system::Boolean;
    function Redo() : system::Boolean;
    function RemoveDocumentItem(value : presentation::controls::GuiDocumentItem^) : system::Boolean;
    function RemoveHyperlink(paragraphIndex : system::Int64, begin : system::Int64, end : system::Int64) : system::Void;
    function RemoveStyleName(begin : presentation::TextPos, end : presentation::TextPos) : system::Void;
    function RenameStyle(oldStyleName : system::String, newStyleName : system::String) : system::Void;
    function SelectAll() : system::Void;
    function SetCaret(begin : presentation::TextPos, end : presentation::TextPos) : system::Void;
    function SetDocument(value : presentation::DocumentModel^) : system::Void;
    function SetEditMode(value : presentation::controls::GuiDocumentCommonInterface::EditMode) : system::Void;
    function SetParagraphAlignment(begin : presentation::TextPos, end : presentation::TextPos, alignment : presentation::Alignment?) : system::Void;
    function SetParagraphAlignments(begin : presentation::TextPos, end : presentation::TextPos, alignments : system::ReadonlyList<presentation::Alignment?>^) : system::Void;
    function SetSelectionModel(value : presentation::DocumentModel^) : system::Void;
    function SetSelectionText(value : system::String) : system::Void;
    function SummarizeParagraphAlignment(begin : presentation::TextPos, end : presentation::TextPos) : presentation::Alignment?;
    function SummarizeStyle(begin : presentation::TextPos, end : presentation::TextPos) : presentation::DocumentStyleProperties^;
    function SummarizeStyleName(begin : presentation::TextPos, end : presentation::TextPos) : system::String?;
    function Undo() : system::Boolean;

}

@ValueType
enum presentation::controls::GuiDocumentCommonInterface::EditMode {
    Editable = 2,
    Selectable = 1,
    ViewOnly = 0,
}

class presentation::controls::GuiDocumentItem : system::ReferenceType {
    property Container : presentation::compositions::GuiGraphicsComposition* { get:GetContainer }
    property Name : system::String { get:GetName }

    function GetContainer() : presentation::compositions::GuiGraphicsComposition*;
    function GetName() : system::String;

    constructor (name : system::String) : presentation::controls::GuiDocumentItem^;
}

class presentation::controls::GuiDocumentLabel : presentation::controls::GuiControl, presentation::controls::GuiDocumentCommonInterface {
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiDocumentLabelTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiDocumentLabel*;
}

class presentation::controls::GuiDocumentViewer : presentation::controls::GuiScrollContainer, presentation::controls::GuiDocumentCommonInterface {
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiDocumentViewerTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiDocumentViewer*;
}

class presentation::controls::GuiFileDialogBase : presentation::controls::GuiDialogBase {
    event FileNameChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        FileName,
    }
    event FilterIndexChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        FilterIndex,
    }

    property DefaultExtension : system::String { get:GetDefaultExtension set:SetDefaultExtension }
    property Directory : system::String { get:GetDirectory set:SetDirectory }
    property EnabledPreview : system::Boolean { get:GetEnabledPreview set:SetEnabledPreview }
    property FileName : system::String { get:GetFileName set:SetFileName event:FileNameChanged }
    property Filter : system::String { get:GetFilter set:SetFilter }
    property FilterIndex : system::Int64 { get:GetFilterIndex set:SetFilterIndex event:FilterIndexChanged }
    property Options : presentation::INativeDialogService::FileDialogOptions { get:GetOptions set:SetOptions }
    property Title : system::String { get:GetTitle set:SetTitle }

    function GetDefaultExtension() : system::String;
    function GetDirectory() : system::String;
    function GetEnabledPreview() : system::Boolean;
    function GetFileName() : system::String;
    function GetFilter() : system::String;
    function GetFilterIndex() : system::Int64;
    function GetOptions() : presentation::INativeDialogService::FileDialogOptions;
    function GetTitle() : system::String;
    function SetDefaultExtension(value : system::String) : system::Void;
    function SetDirectory(value : system::String) : system::Void;
    function SetEnabledPreview(value : system::Boolean) : system::Void;
    function SetFileName(value : system::String) : system::Void;
    function SetFilter(value : system::String) : system::Void;
    function SetFilterIndex(value : system::Int64) : system::Void;
    function SetOptions(value : presentation::INativeDialogService::FileDialogOptions) : system::Void;
    function SetTitle(value : system::String) : system::Void;

}

class presentation::controls::GuiFontDialog : presentation::controls::GuiDialogBase {
    event SelectedColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SelectedColor,
    }
    event SelectedFontChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SelectedFont,
    }

    property ForceFontExist : system::Boolean { get:GetForceFontExist set:SetForceFontExist }
    property SelectedColor : presentation::Color { get:GetSelectedColor set:SetSelectedColor event:SelectedColorChanged }
    property SelectedFont : presentation::FontProperties { get:GetSelectedFont set:SetSelectedFont event:SelectedFontChanged }
    property ShowEffect : system::Boolean { get:GetShowEffect set:SetShowEffect }
    property ShowSelection : system::Boolean { get:GetShowSelection set:SetShowSelection }

    function GetForceFontExist() : system::Boolean;
    function GetSelectedColor() : presentation::Color;
    function GetSelectedFont() : presentation::FontProperties;
    function GetShowEffect() : system::Boolean;
    function GetShowSelection() : system::Boolean;
    function SetForceFontExist(value : system::Boolean) : system::Void;
    function SetSelectedColor(value : presentation::Color) : system::Void;
    function SetSelectedFont(value : presentation::FontProperties) : system::Void;
    function SetShowEffect(value : system::Boolean) : system::Void;
    function SetShowSelection(value : system::Boolean) : system::Void;
    function ShowDialog() : system::Boolean;

    constructor () : presentation::controls::GuiFontDialog*;
}

class presentation::controls::GuiInstanceRootObject : system::ReferenceType {
    function AddAnimation(animation : presentation::controls::IGuiAnimation^) : system::Boolean;
    function AddComponent(component : presentation::controls::GuiComponent*) : system::Boolean;
    function AddControlHostComponent(controlHost : presentation::controls::GuiControlHost*) : system::Boolean;
    function AddSubscription(subscription : system::Subscription^) : system::Subscription^;
    function FinalizeGeneralInstance(thisObject : presentation::controls::GuiInstanceRootObject*) : system::Void;
    function FinalizeInstanceRecursively(thisObject : presentation::templates::GuiTemplate*) : system::Void;
    function FinalizeInstanceRecursively(thisObject : presentation::controls::GuiCustomControl*) : system::Void;
    function FinalizeInstanceRecursively(thisObject : presentation::controls::GuiControlHost*) : system::Void;
    function GetNamedObject(name : system::String) : system::Object;
    function KillAnimation(animation : presentation::controls::IGuiAnimation^) : system::Boolean;
    function ResolveResource(protocol : system::String, path : system::String, ensureExist : system::Boolean) : system::ReferenceType^;
    function SetNamedObject(name : system::String, namedObject : system::Object) : system::Void;
    function SetResourceResolver(resolver : presentation::GuiResourcePathResolver^) : system::Void;
    function UpdateSubscriptions() : system::Void;

}

class presentation::controls::GuiLabel : presentation::controls::GuiControl {
    property TextColor : presentation::Color { get:GetTextColor set:SetTextColor }

    function GetTextColor() : presentation::Color;
    function SetTextColor(value : presentation::Color) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiLabelTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiLabel*;
}

class presentation::controls::GuiListControl : presentation::controls::GuiScrollView {
    event AdoptedSizeInvalidated : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event ArrangerChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Arranger,
    }
    event AxisChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Axis,
    }
    event ItemLeftButtonDoubleClick : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemMouseEventArgs*>^;
    event ItemLeftButtonDown : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemMouseEventArgs*>^;
    event ItemLeftButtonUp : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemMouseEventArgs*>^;
    event ItemMiddleButtonDoubleClick : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemMouseEventArgs*>^;
    event ItemMiddleButtonDown : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemMouseEventArgs*>^;
    event ItemMiddleButtonUp : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemMouseEventArgs*>^;
    event ItemMouseEnter : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemEventArgs*>^;
    event ItemMouseLeave : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemEventArgs*>^;
    event ItemMouseMove : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemMouseEventArgs*>^;
    event ItemRightButtonDoubleClick : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemMouseEventArgs*>^;
    event ItemRightButtonDown : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemMouseEventArgs*>^;
    event ItemRightButtonUp : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemMouseEventArgs*>^;
    event ItemTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ItemTemplate,
    }

    property Arranger : presentation::controls::GuiListControl::IItemArranger* { get:GetArranger set:SetArranger event:ArrangerChanged }
    property Axis : presentation::compositions::IGuiAxis* { get:GetAxis set:SetAxis event:AxisChanged }
    property DisplayItemBackground : system::Boolean { get:GetDisplayItemBackground set:SetDisplayItemBackground }
    property ItemProvider : presentation::controls::list::IItemProvider* { get:GetItemProvider }
    property ItemTemplate : system::Function<presentation::templates::GuiListItemTemplate*, system::Object>^ { get:GetItemTemplate set:SetItemTemplate event:ItemTemplateChanged }

    function EnsureItemVisible(itemIndex : system::Int64) : system::Boolean;
    function GetAdoptedSize(expectedSize : presentation::Size) : presentation::Size;
    function GetArranger() : presentation::controls::GuiListControl::IItemArranger*;
    function GetAxis() : presentation::compositions::IGuiAxis*;
    function GetDisplayItemBackground() : system::Boolean;
    function GetItemProvider() : presentation::controls::list::IItemProvider*;
    function GetItemTemplate() : system::Function<presentation::templates::GuiListItemTemplate*, system::Object>^;
    function SetArranger(value : presentation::controls::GuiListControl::IItemArranger^) : system::Void;
    function SetAxis(value : presentation::compositions::IGuiAxis^) : system::Void;
    function SetDisplayItemBackground(value : system::Boolean) : system::Void;
    function SetItemTemplate(value : system::Function<presentation::templates::GuiListItemTemplate*, system::Object>^) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiListControlTemplate*;

    constructor (themeName : presentation::theme::ThemeName, itemProvider : presentation::controls::list::IItemProvider*, acceptFocus : system::Boolean) : presentation::controls::GuiListControl*;
}

@ValueType
enum presentation::controls::GuiListControl::EnsureItemVisibleResult {
    ItemNotExists = 0,
    Moved = 1,
    NotMoved = 2,
}

interface presentation::controls::GuiListControl::IItemArranger : presentation::controls::list::IItemProviderCallback {
    property Callback : presentation::controls::GuiListControl::IItemArrangerCallback* { get:GetCallback set:SetCallback }
    property TotalSize : presentation::Size { get:GetTotalSize }

    function AttachListControl(value : presentation::controls::GuiListControl*) : system::Void;
    function DetachListControl() : system::Void;
    function EnsureItemVisible(itemIndex : system::Int64) : presentation::controls::GuiListControl::EnsureItemVisibleResult;
    function FindItemByVirtualKeyDirection(itemIndex : system::Int64, key : presentation::compositions::KeyDirection) : system::Int64;
    function GetAdoptedSize(expectedSize : presentation::Size) : presentation::Size;
    function GetCallback() : presentation::controls::GuiListControl::IItemArrangerCallback*;
    function GetTotalSize() : presentation::Size;
    function GetVisibleIndex(style : presentation::templates::GuiListItemTemplate*) : system::Int64;
    function GetVisibleStyle(itemIndex : system::Int64) : presentation::templates::GuiListItemTemplate*;
    function OnViewChanged(bounds : presentation::Rect) : system::Void;
    function ReloadVisibleStyles() : system::Void;
    function SetCallback(value : presentation::controls::GuiListControl::IItemArrangerCallback*) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<GuiListControl::IItemArranger>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<GuiListControl::IItemArranger>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::GuiListControl::IItemArranger^;
}

interface presentation::controls::GuiListControl::IItemArrangerCallback : system::Interface {
    function CreateItem(itemIndex : system::Int64) : presentation::templates::GuiListItemTemplate*;
    function GetContainerComposition() : presentation::compositions::GuiGraphicsComposition*;
    function GetItem(bounds : presentation::templates::GuiTemplate*) : presentation::templates::GuiListItemTemplate*;
    function GetItemBounds(style : presentation::templates::GuiListItemTemplate*) : presentation::templates::GuiTemplate*;
    function OnAdoptedSizeChanged() : system::Void;
    function OnTotalSizeChanged() : system::Void;
    function ReleaseItem(style : presentation::templates::GuiListItemTemplate*) : system::Void;
    function SetViewLocation(value : presentation::Point) : system::Void;

}

class presentation::controls::GuiListView : presentation::controls::GuiVirtualListView {
    property Columns : system::List<presentation::controls::list::ListViewColumn^>^ { get:GetColumns }
    property DataColumns : system::List<system::Int64>^ { get:GetDataColumns }
    property Items : system::List<presentation::controls::list::ListViewItem^>^ { get:GetItems }
    property SelectedItem : presentation::controls::list::ListViewItem^ { get:GetSelectedItem event:SelectionChanged }

    function GetColumns() : system::List<presentation::controls::list::ListViewColumn^>^;
    function GetDataColumns() : system::List<system::Int64>^;
    function GetItems() : system::List<presentation::controls::list::ListViewItem^>^;
    function GetSelectedItem() : presentation::controls::list::ListViewItem^;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiListViewTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiListView*;
}

class presentation::controls::GuiListViewBase : presentation::controls::GuiSelectableListControl {
    event ColumnClicked : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemEventArgs*>^;

    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiListViewTemplate*;

    constructor (themeName : presentation::theme::ThemeName, itemProvider : presentation::controls::list::IItemProvider*) : presentation::controls::GuiListViewBase*;
}

class presentation::controls::GuiListViewColumnHeader : presentation::controls::GuiMenuButton {
    property ColumnSortingState : presentation::controls::ColumnSortingState { get:GetColumnSortingState set:SetColumnSortingState }

    function GetColumnSortingState() : presentation::controls::ColumnSortingState;
    function SetColumnSortingState(value : presentation::controls::ColumnSortingState) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiListViewColumnHeaderTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiListViewColumnHeader*;
}

class presentation::controls::GuiMenu : presentation::controls::GuiPopup {
    property HideOnDeactivateAltHost : system::Boolean { get:GetHideOnDeactivateAltHost set:SetHideOnDeactivateAltHost }

    function GetHideOnDeactivateAltHost() : system::Boolean;
    function SetHideOnDeactivateAltHost(value : system::Boolean) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiMenuTemplate*;
    function UpdateMenuService() : system::Void;

    constructor (themeName : presentation::theme::ThemeName, owner : presentation::controls::GuiControl*) : presentation::controls::GuiMenu*;
}

class presentation::controls::GuiMenuBar : presentation::controls::GuiControl {
    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiMenuBar*;
}

class presentation::controls::GuiMenuButton : presentation::controls::GuiSelectableButton {
    event AfterSubMenuOpening : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event BeforeSubMenuOpening : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event ImageChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Image,
    }
    event LargeImageChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        LargeImage,
    }
    event ShortcutTextChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ShortcutText,
    }
    event SubMenuOpeningChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SubMenuOpening,
    }

    property CascadeAction : system::Boolean { get:GetCascadeAction set:SetCascadeAction }
    property Image : presentation::GuiImageData^ { get:GetImage set:SetImage event:ImageChanged }
    property LargeImage : presentation::GuiImageData^ { get:GetLargeImage set:SetLargeImage event:LargeImageChanged }
    property OwnedSubMenu : system::Boolean { get:GetOwnedSubMenu }
    property PreferredMenuClientSize : presentation::Size { get:GetPreferredMenuClientSize set:SetPreferredMenuClientSize }
    property ShortcutText : system::String { get:GetShortcutText set:SetShortcutText event:ShortcutTextChanged }
    property SubMenu : presentation::controls::GuiMenu* { get:GetSubMenu }
    property SubMenuHost : presentation::controls::GuiButton* { get:GetSubMenuHost }
    property SubMenuOpening : system::Boolean { get:GetSubMenuOpening set:SetSubMenuOpening event:SubMenuOpeningChanged }

    function CreateSubMenu(subMenuStyleController : system::Function<presentation::templates::GuiMenuTemplate*, system::Object>^) : presentation::controls::GuiMenu*;
    function GetCascadeAction() : system::Boolean;
    function GetImage() : presentation::GuiImageData^;
    function GetLargeImage() : presentation::GuiImageData^;
    function GetOwnedSubMenu() : system::Boolean;
    function GetPreferredMenuClientSize() : presentation::Size;
    function GetShortcutText() : system::String;
    function GetSubMenu() : presentation::controls::GuiMenu*;
    function GetSubMenuHost() : presentation::controls::GuiButton*;
    function GetSubMenuOpening() : system::Boolean;
    function IsSubMenuExists() : system::Boolean;
    function SetCascadeAction(value : system::Boolean) : system::Void;
    function SetImage(value : presentation::GuiImageData^) : system::Void;
    function SetLargeImage(value : presentation::GuiImageData^) : system::Void;
    function SetPreferredMenuClientSize(value : presentation::Size) : system::Void;
    function SetShortcutText(value : system::String) : system::Void;
    function SetSubMenu(value : presentation::controls::GuiMenu*, owned : system::Boolean) : system::Void;
    function SetSubMenuOpening(value : system::Boolean) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiToolstripButtonTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiMenuButton*;
}

class presentation::controls::GuiMessageDialog : presentation::controls::GuiDialogBase {
    property DefaultButton : presentation::INativeDialogService::MessageBoxDefaultButton { get:GetDefaultButton set:SetDefaultButton }
    property Icon : presentation::INativeDialogService::MessageBoxIcons { get:GetIcon set:SetIcon }
    property Input : presentation::INativeDialogService::MessageBoxButtonsInput { get:GetInput set:SetInput }
    property ModalOption : presentation::INativeDialogService::MessageBoxModalOptions { get:GetModalOption set:SetModalOption }
    property Text : system::String { get:GetText set:SetText }
    property Title : system::String { get:GetTitle set:SetTitle }

    function GetDefaultButton() : presentation::INativeDialogService::MessageBoxDefaultButton;
    function GetIcon() : presentation::INativeDialogService::MessageBoxIcons;
    function GetInput() : presentation::INativeDialogService::MessageBoxButtonsInput;
    function GetModalOption() : presentation::INativeDialogService::MessageBoxModalOptions;
    function GetText() : system::String;
    function GetTitle() : system::String;
    function SetDefaultButton(value : presentation::INativeDialogService::MessageBoxDefaultButton) : system::Void;
    function SetIcon(value : presentation::INativeDialogService::MessageBoxIcons) : system::Void;
    function SetInput(value : presentation::INativeDialogService::MessageBoxButtonsInput) : system::Void;
    function SetModalOption(value : presentation::INativeDialogService::MessageBoxModalOptions) : system::Void;
    function SetText(value : system::String) : system::Void;
    function SetTitle(value : system::String) : system::Void;
    function ShowDialog() : presentation::INativeDialogService::MessageBoxButtonsOutput;

    constructor () : presentation::controls::GuiMessageDialog*;
}

class presentation::controls::GuiMultilineTextBox : presentation::controls::GuiScrollView, presentation::controls::GuiTextBoxCommonInterface {
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiMultilineTextBoxTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiMultilineTextBox*;
}

class presentation::controls::GuiOpenFileDialog : presentation::controls::GuiFileDialogBase {
    property FileNames : system::List<system::String>^ { get:GetFileNames }

    function GetFileNames() : system::List<system::String>^;
    function ShowDialog() : system::Boolean;

    constructor () : presentation::controls::GuiOpenFileDialog*;
}

class presentation::controls::GuiPopup : presentation::controls::GuiWindow {
    function ShowPopup(location : presentation::NativePoint, screen : presentation::INativeScreen*) : system::Void;
    function ShowPopup(control : presentation::controls::GuiControl*, bounds : presentation::Rect, preferredTopBottomSide : system::Boolean) : system::Void;
    function ShowPopup(control : presentation::controls::GuiControl*, location : presentation::Point) : system::Void;
    function ShowPopup(control : presentation::controls::GuiControl*, preferredTopBottomSide : system::Boolean) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiWindowTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiPopup*;
}

class presentation::controls::GuiRibbonButtons : presentation::controls::GuiControl {
    property Buttons : system::List<presentation::controls::GuiControl*>^ { get:GetButtons }

    function GetButtons() : system::List<presentation::controls::GuiControl*>^;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiRibbonButtonsTemplate*;

    constructor (themeName : presentation::theme::ThemeName, maxSize : presentation::controls::RibbonButtonSize, minSize : presentation::controls::RibbonButtonSize) : presentation::controls::GuiRibbonButtons*;
}

class presentation::controls::GuiRibbonGallery : presentation::controls::GuiControl {
    event RequestedDropdown : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event RequestedScrollDown : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event RequestedScrollUp : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event ScrollDownEnabledChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ScrollDownEnabled,
    }
    event ScrollUpEnabledChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ScrollUpEnabled,
    }

    property ScrollDownEnabled : system::Boolean { get:GetScrollDownEnabled set:SetScrollDownEnabled event:ScrollDownEnabledChanged }
    property ScrollUpEnabled : system::Boolean { get:GetScrollUpEnabled set:SetScrollUpEnabled event:ScrollUpEnabledChanged }

    function GetScrollDownEnabled() : system::Boolean;
    function GetScrollUpEnabled() : system::Boolean;
    function SetScrollDownEnabled(value : system::Boolean) : system::Void;
    function SetScrollUpEnabled(value : system::Boolean) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiRibbonGalleryTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiRibbonGallery*;
}

class presentation::controls::GuiRibbonGroup : presentation::controls::GuiControl {
    event ExpandButtonClicked : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event ExpandableChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Expandable,
    }
    event LargeImageChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        LargeImage,
    }

    property Expandable : system::Boolean { get:GetExpandable set:SetExpandable event:ExpandableChanged }
    property Items : system::List<presentation::controls::GuiControl*>^ { get:GetItems }
    property LargeImage : presentation::GuiImageData^ { get:GetLargeImage set:SetLargeImage event:LargeImageChanged }

    function GetExpandable() : system::Boolean;
    function GetItems() : system::List<presentation::controls::GuiControl*>^;
    function GetLargeImage() : presentation::GuiImageData^;
    function SetExpandable(value : system::Boolean) : system::Void;
    function SetLargeImage(value : presentation::GuiImageData^) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiRibbonGroupTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiRibbonGroup*;
}

class presentation::controls::GuiRibbonIconLabel : presentation::controls::GuiControl {
    event ImageChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Image,
    }

    property Image : presentation::GuiImageData^ { get:GetImage set:SetImage event:ImageChanged }

    function GetImage() : presentation::GuiImageData^;
    function SetImage(value : presentation::GuiImageData^) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiRibbonIconLabelTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiRibbonIconLabel*;
}

class presentation::controls::GuiRibbonTab : presentation::controls::GuiTab {
    property AfterHeaders : presentation::compositions::GuiGraphicsComposition* { get:GetAfterHeaders }
    property BeforeHeaders : presentation::compositions::GuiGraphicsComposition* { get:GetBeforeHeaders }

    function GetAfterHeaders() : presentation::compositions::GuiGraphicsComposition*;
    function GetBeforeHeaders() : presentation::compositions::GuiGraphicsComposition*;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiRibbonTabTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiRibbonTab*;
}

class presentation::controls::GuiRibbonTabPage : presentation::controls::GuiTabPage {
    event HighlightedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Highlighted,
    }

    property Groups : system::List<presentation::controls::GuiRibbonGroup*>^ { get:GetGroups }
    property Highlighted : system::Boolean { get:GetHighlighted set:SetHighlighted event:HighlightedChanged }

    function GetGroups() : system::List<presentation::controls::GuiRibbonGroup*>^;
    function GetHighlighted() : system::Boolean;
    function SetHighlighted(value : system::Boolean) : system::Void;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiRibbonTabPage*;
}

class presentation::controls::GuiRibbonToolstripMenu : presentation::controls::GuiToolstripMenu {
    property ContentComposition : presentation::compositions::GuiGraphicsComposition* { get:GetContentComposition }

    function GetContentComposition() : presentation::compositions::GuiGraphicsComposition*;

    constructor (themeName : presentation::theme::ThemeName, owner : presentation::controls::GuiControl*) : presentation::controls::GuiRibbonToolstripMenu*;
}

class presentation::controls::GuiRibbonToolstrips : presentation::controls::GuiControl {
    property Groups : system::List<presentation::controls::GuiToolstripGroup*>^ { get:GetGroups }

    function GetGroups() : system::List<presentation::controls::GuiToolstripGroup*>^;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiRibbonToolstripsTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiRibbonToolstrips*;
}

class presentation::controls::GuiSaveFileDialog : presentation::controls::GuiFileDialogBase {
    function ShowDialog() : system::Boolean;

    constructor () : presentation::controls::GuiSaveFileDialog*;
}

class presentation::controls::GuiScroll : presentation::controls::GuiControl {
    event BigMoveChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        BigMove,
    }
    event PageSizeChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        PageSize,
    }
    event PositionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Position,
    }
    event SmallMoveChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SmallMove,
    }
    event TotalSizeChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TotalSize,
    }

    property AutoFocus : system::Boolean { get:GetAutoFocus set:SetAutoFocus }
    property BigMove : system::Int64 { get:GetBigMove set:SetBigMove event:BigMoveChanged }
    property MaxPosition : system::Int64 { get:GetMaxPosition }
    property MinPosition : system::Int64 { get:GetMinPosition }
    property PageSize : system::Int64 { get:GetPageSize set:SetPageSize event:PageSizeChanged }
    property Position : system::Int64 { get:GetPosition set:SetPosition event:PositionChanged }
    property SmallMove : system::Int64 { get:GetSmallMove set:SetSmallMove event:SmallMoveChanged }
    property TotalSize : system::Int64 { get:GetTotalSize set:SetTotalSize event:TotalSizeChanged }

    function GetAutoFocus() : system::Boolean;
    function GetBigMove() : system::Int64;
    function GetMaxPosition() : system::Int64;
    function GetMinPosition() : system::Int64;
    function GetPageSize() : system::Int64;
    function GetPosition() : system::Int64;
    function GetSmallMove() : system::Int64;
    function GetTotalSize() : system::Int64;
    function SetAutoFocus(value : system::Boolean) : system::Void;
    function SetBigMove(value : system::Int64) : system::Void;
    function SetPageSize(value : system::Int64) : system::Void;
    function SetPosition(value : system::Int64) : system::Void;
    function SetSmallMove(value : system::Int64) : system::Void;
    function SetTotalSize(value : system::Int64) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiScrollTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiScroll*;
}

class presentation::controls::GuiScrollContainer : presentation::controls::GuiScrollView {
    property ExtendToFullHeight : system::Boolean { get:GetExtendToFullHeight set:SetExtendToFullHeight }
    property ExtendToFullWidth : system::Boolean { get:GetExtendToFullWidth set:SetExtendToFullWidth }

    function GetExtendToFullHeight() : system::Boolean;
    function GetExtendToFullWidth() : system::Boolean;
    function SetExtendToFullHeight(value : system::Boolean) : system::Void;
    function SetExtendToFullWidth(value : system::Boolean) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiScrollViewTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiScrollContainer*;
}

class presentation::controls::GuiScrollView : presentation::controls::GuiControl {
    property HorizontalAlwaysVisible : system::Boolean { get:GetHorizontalAlwaysVisible set:SetHorizontalAlwaysVisible }
    property HorizontalScroll : presentation::controls::GuiScroll* { get:GetHorizontalScroll }
    property VerticalAlwaysVisible : system::Boolean { get:GetVerticalAlwaysVisible set:SetVerticalAlwaysVisible }
    property VerticalScroll : presentation::controls::GuiScroll* { get:GetVerticalScroll }
    property ViewBounds : presentation::Rect { get:GetViewBounds }
    property ViewPosition : presentation::Point { get:GetViewPosition }
    property ViewSize : presentation::Size { get:GetViewSize }

    function CalculateView() : system::Void;
    function GetHorizontalAlwaysVisible() : system::Boolean;
    function GetHorizontalScroll() : presentation::controls::GuiScroll*;
    function GetVerticalAlwaysVisible() : system::Boolean;
    function GetVerticalScroll() : presentation::controls::GuiScroll*;
    function GetViewBounds() : presentation::Rect;
    function GetViewPosition() : presentation::Point;
    function GetViewSize() : presentation::Size;
    function SetHorizontalAlwaysVisible(value : system::Boolean) : system::Void;
    function SetVerticalAlwaysVisible(value : system::Boolean) : system::Void;

}

class presentation::controls::GuiSelectableButton : presentation::controls::GuiButton {
    event AutoSelectionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        AutoSelection,
    }
    event GroupControllerChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        GroupController,
    }
    event SelectedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Selected,
    }

    property AutoSelection : system::Boolean { get:GetAutoSelection set:SetAutoSelection event:AutoSelectionChanged }
    property GroupController : presentation::controls::GuiSelectableButton::GroupController* { get:GetGroupController set:SetGroupController event:GroupControllerChanged }
    property Selected : system::Boolean { get:GetSelected set:SetSelected event:SelectedChanged }

    function GetAutoSelection() : system::Boolean;
    function GetGroupController() : presentation::controls::GuiSelectableButton::GroupController*;
    function GetSelected() : system::Boolean;
    function SetAutoSelection(value : system::Boolean) : system::Void;
    function SetGroupController(value : presentation::controls::GuiSelectableButton::GroupController*) : system::Void;
    function SetSelected(value : system::Boolean) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiSelectableButtonTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiSelectableButton*;
}

class presentation::controls::GuiSelectableButton::GroupController : presentation::controls::GuiComponent {
    function Attach(button : presentation::controls::GuiSelectableButton*) : system::Void;
    function Detach(button : presentation::controls::GuiSelectableButton*) : system::Void;
    function OnSelectedChanged(button : presentation::controls::GuiSelectableButton*) : system::Void;

}

class presentation::controls::GuiSelectableButton::MutexGroupController : presentation::controls::GuiSelectableButton::GroupController {
    constructor () : presentation::controls::GuiSelectableButton::MutexGroupController*;
}

class presentation::controls::GuiSelectableListControl : presentation::controls::GuiListControl {
    event SelectionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SelectedItems,
        SelectedItemIndex,
        SelectedItemText,
        SelectedItem,
        SelectedItem,
        SelectedItem,
        SelectedItem,
        SelectedItem,
        SelectedItem,
    }

    property MultiSelect : system::Boolean { get:GetMultiSelect set:SetMultiSelect }
    property SelectedItemIndex : system::Int64 { get:GetSelectedItemIndex event:SelectionChanged }
    property SelectedItemText : system::String { get:GetSelectedItemText event:SelectionChanged }
    property SelectedItems : system::ReadonlyList<system::Int64>^ { get:GetSelectedItems event:SelectionChanged }

    function ClearSelection() : system::Void;
    function GetMultiSelect() : system::Boolean;
    function GetSelected(itemIndex : system::Int64) : system::Boolean;
    function GetSelectedItemIndex() : system::Int64;
    function GetSelectedItemText() : system::String;
    function GetSelectedItems() : system::ReadonlyList<system::Int64>^;
    function SelectItemsByClick(itemIndex : system::Int64, ctrl : system::Boolean, shift : system::Boolean, leftButton : system::Boolean) : system::Boolean;
    function SelectItemsByKey(code : presentation::VKEY, ctrl : system::Boolean, shift : system::Boolean) : system::Boolean;
    function SetMultiSelect(value : system::Boolean) : system::Void;
    function SetSelected(itemIndex : system::Int64, value : system::Boolean) : system::Void;

    constructor (themeName : presentation::theme::ThemeName, itemProvider : presentation::controls::list::IItemProvider*) : presentation::controls::GuiSelectableListControl*;
}

class presentation::controls::GuiSinglelineTextBox : presentation::controls::GuiControl, presentation::controls::GuiTextBoxCommonInterface {
    property PasswordChar : system::Char { get:GetPasswordChar set:SetPasswordChar }

    function GetPasswordChar() : system::Char;
    function SetPasswordChar(value : system::Char) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiSinglelineTextBoxTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiSinglelineTextBox*;
}

class presentation::controls::GuiTab : presentation::controls::GuiControl {
    event SelectedPageChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SelectedPage,
    }

    property Pages : system::ObservableList<presentation::controls::GuiTabPage*>^ { get:GetPages }
    property SelectedPage : presentation::controls::GuiTabPage* { get:GetSelectedPage set:SetSelectedPage event:SelectedPageChanged }

    function GetPages() : system::ObservableList<presentation::controls::GuiTabPage*>^;
    function GetSelectedPage() : presentation::controls::GuiTabPage*;
    function SetSelectedPage(value : presentation::controls::GuiTabPage*) : system::Boolean;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiTabTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiTab*;
}

class presentation::controls::GuiTabPage : presentation::controls::GuiCustomControl {
    property OwnerTab : presentation::controls::GuiTab* { get:GetOwnerTab }

    function GetOwnerTab() : presentation::controls::GuiTab*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiTabPage*;
}

class presentation::controls::GuiTextBoxCommonInterface : system::ReferenceType {
    event ModifiedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Modified,
    }
    event SelectionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SelectionText,
        CaretBegin,
        CaretEnd,
        CaretSmall,
        CaretLarge,
    }
    event UndoRedoChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;

    property CaretBegin : presentation::TextPos { get:GetCaretBegin event:SelectionChanged }
    property CaretEnd : presentation::TextPos { get:GetCaretEnd event:SelectionChanged }
    property CaretLarge : presentation::TextPos { get:GetCaretLarge event:SelectionChanged }
    property CaretSmall : presentation::TextPos { get:GetCaretSmall event:SelectionChanged }
    property EditVersion : system::UInt64 { get:GetEditVersion }
    property MaxHeight : system::Int64 { get:GetMaxHeight }
    property MaxWidth : system::Int64 { get:GetMaxWidth }
    property Modified : system::Boolean { get:GetModified event:ModifiedChanged }
    property Readonly : system::Boolean { get:GetReadonly set:SetReadonly }
    property RowCount : system::Int64 { get:GetRowCount }
    property RowHeight : system::Int64 { get:GetRowHeight }
    property SelectionText : system::String { get:GetSelectionText set:SetSelectionText event:SelectionChanged }

    function CanCopy() : system::Boolean;
    function CanCut() : system::Boolean;
    function CanPaste() : system::Boolean;
    function CanRedo() : system::Boolean;
    function CanUndo() : system::Boolean;
    function ClearUndoRedo() : system::Void;
    function Copy() : system::Boolean;
    function Cut() : system::Boolean;
    function GetCaretBegin() : presentation::TextPos;
    function GetCaretEnd() : presentation::TextPos;
    function GetCaretLarge() : presentation::TextPos;
    function GetCaretSmall() : presentation::TextPos;
    function GetEditVersion() : system::UInt64;
    function GetFragmentText(start : presentation::TextPos, end : presentation::TextPos) : system::String;
    function GetMaxHeight() : system::Int64;
    function GetMaxWidth() : system::Int64;
    function GetModified() : system::Boolean;
    function GetNearestTextPos(point : presentation::Point) : presentation::TextPos;
    function GetPointFromTextPos(pos : presentation::TextPos) : presentation::Point;
    function GetReadonly() : system::Boolean;
    function GetRectFromTextPos(pos : presentation::TextPos) : presentation::Rect;
    function GetRowCount() : system::Int64;
    function GetRowHeight() : system::Int64;
    function GetRowText(row : system::Int64) : system::String;
    function GetRowWidth(row : system::Int64) : system::Int64;
    function GetSelectionText() : system::String;
    function GetTextPosFromPoint(point : presentation::Point) : presentation::TextPos;
    function NotifyModificationSaved() : system::Void;
    function Paste() : system::Boolean;
    function Redo() : system::Boolean;
    function Select(begin : presentation::TextPos, end : presentation::TextPos) : system::Void;
    function SelectAll() : system::Void;
    function SetReadonly(value : system::Boolean) : system::Void;
    function SetSelectionText(value : system::String) : system::Void;
    function SetSelectionTextAsKeyInput(value : system::String) : system::Void;
    function Undo() : system::Boolean;

}

class presentation::controls::GuiTextList : presentation::controls::GuiVirtualTextList {
    property Items : system::List<presentation::controls::list::TextItem^>^ { get:GetItems }
    property SelectedItem : presentation::controls::list::TextItem^ { get:GetSelectedItem event:SelectionChanged }

    function GetItems() : system::List<presentation::controls::list::TextItem^>^;
    function GetSelectedItem() : presentation::controls::list::TextItem^;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiTextList*;
}

class presentation::controls::GuiToolstripButton : presentation::controls::GuiMenuButton {
    property Command : presentation::controls::GuiToolstripCommand* { get:GetCommand set:SetCommand }
    property ToolstripSubMenu : presentation::controls::GuiToolstripMenu* { get:GetToolstripSubMenu }

    function CreateToolstripSubMenu(subMenuStyleController : system::Function<presentation::templates::GuiMenuTemplate*, system::Object>^) : system::Void;
    function EnsureToolstripSubMenu() : presentation::controls::GuiToolstripMenu*;
    function GetCommand() : presentation::controls::GuiToolstripCommand*;
    function GetToolstripSubMenu() : presentation::controls::GuiToolstripMenu*;
    function SetCommand(value : presentation::controls::GuiToolstripCommand*) : system::Void;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiToolstripButton*;
}

class presentation::controls::GuiToolstripCommand : presentation::controls::GuiComponent {
    event DescriptionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        LargeImage,
        Image,
        Text,
        Shortcut,
        ShortcutBuilder,
        Enabled,
        Selected,
    }
    event Executed : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;

    property Enabled : system::Boolean { get:GetEnabled set:SetEnabled event:DescriptionChanged }
    property Image : presentation::GuiImageData^ { get:GetImage set:SetImage event:DescriptionChanged }
    property LargeImage : presentation::GuiImageData^ { get:GetLargeImage set:SetLargeImage event:DescriptionChanged }
    property Selected : system::Boolean { get:GetSelected set:SetSelected event:DescriptionChanged }
    property Shortcut : presentation::compositions::IGuiShortcutKeyItem* { get:GetShortcut event:DescriptionChanged }
    property ShortcutBuilder : system::String { get:GetShortcutBuilder set:SetShortcutBuilder event:DescriptionChanged }
    property Text : system::String { get:GetText set:SetText event:DescriptionChanged }

    function GetEnabled() : system::Boolean;
    function GetImage() : presentation::GuiImageData^;
    function GetLargeImage() : presentation::GuiImageData^;
    function GetSelected() : system::Boolean;
    function GetShortcut() : presentation::compositions::IGuiShortcutKeyItem*;
    function GetShortcutBuilder() : system::String;
    function GetText() : system::String;
    function SetEnabled(value : system::Boolean) : system::Void;
    function SetImage(value : presentation::GuiImageData^) : system::Void;
    function SetLargeImage(value : presentation::GuiImageData^) : system::Void;
    function SetSelected(value : system::Boolean) : system::Void;
    function SetShortcutBuilder(value : system::String) : system::Void;
    function SetText(value : system::String) : system::Void;

    constructor () : presentation::controls::GuiToolstripCommand*;
}

class presentation::controls::GuiToolstripGroup : presentation::controls::GuiToolstripNestedContainer {
    property ToolstripItems : system::List<presentation::controls::GuiControl*>^ { get:GetToolstripItems }

    function GetToolstripItems() : system::List<presentation::controls::GuiControl*>^;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiToolstripGroup*;
}

class presentation::controls::GuiToolstripGroupContainer : presentation::controls::GuiToolstripNestedContainer {
    property SplitterTemplate : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^ { get:GetSplitterTemplate set:SetSplitterTemplate }
    property ToolstripItems : system::List<presentation::controls::GuiControl*>^ { get:GetToolstripItems }

    function GetSplitterTemplate() : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    function GetToolstripItems() : system::List<presentation::controls::GuiControl*>^;
    function SetSplitterTemplate(value : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^) : system::Void;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiToolstripGroupContainer*;
}

class presentation::controls::GuiToolstripMenu : presentation::controls::GuiMenu {
    property ToolstripItems : system::List<presentation::controls::GuiControl*>^ { get:GetToolstripItems }

    function GetToolstripItems() : system::List<presentation::controls::GuiControl*>^;

    constructor (themeName : presentation::theme::ThemeName, owner : presentation::controls::GuiControl*) : presentation::controls::GuiToolstripMenu*;
}

class presentation::controls::GuiToolstripMenuBar : presentation::controls::GuiMenuBar {
    property ToolstripItems : system::List<presentation::controls::GuiControl*>^ { get:GetToolstripItems }

    function GetToolstripItems() : system::List<presentation::controls::GuiControl*>^;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiToolstripMenuBar*;
}

class presentation::controls::GuiToolstripNestedContainer : presentation::controls::GuiControl {
}

class presentation::controls::GuiToolstripToolBar : presentation::controls::GuiControl {
    property ToolstripItems : system::List<presentation::controls::GuiControl*>^ { get:GetToolstripItems }

    function GetToolstripItems() : system::List<presentation::controls::GuiControl*>^;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiToolstripToolBar*;
}

class presentation::controls::GuiTooltip : presentation::controls::GuiPopup {
    property PreferredContentWidth : system::Int64 { get:GetPreferredContentWidth set:SetPreferredContentWidth }
    property TemporaryContentControl : presentation::controls::GuiControl* { get:GetTemporaryContentControl set:SetTemporaryContentControl }

    function GetPreferredContentWidth() : system::Int64;
    function GetTemporaryContentControl() : presentation::controls::GuiControl*;
    function SetPreferredContentWidth(value : system::Int64) : system::Void;
    function SetTemporaryContentControl(value : presentation::controls::GuiControl*) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiWindowTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiTooltip*;
}

class presentation::controls::GuiTreeView : presentation::controls::GuiVirtualTreeView {
    property Nodes : presentation::controls::tree::TreeViewItemRootProvider^ { get:GetNodes }
    property SelectedItem : presentation::controls::tree::TreeViewItem^ { get:GetSelectedItem event:SelectionChanged }

    @InvokeTemplate:$This->Nodes($Arguments)
    @ClosureTemplate:::vl::Func<$Func>($This, &$Type::Nodes)
    function GetNodes() : presentation::controls::tree::TreeViewItemRootProvider^;
    function GetSelectedItem() : presentation::controls::tree::TreeViewItem^;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiTreeView*;
}

class presentation::controls::GuiVirtualDataGrid : presentation::controls::GuiVirtualListView {
    event SelectedCellChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SelectedCell,
        SelectedRowValue,
        SelectedCellValue,
    }

    property ItemProvider : presentation::controls::list::IItemProvider* { get:GetItemProvider }
    property OpenedEditor : presentation::controls::list::IDataEditor^ { get:GetOpenedEditor }
    property SelectedCell : presentation::GridPos { get:GetSelectedCell event:SelectedCellChanged }

    function GetItemProvider() : presentation::controls::list::IItemProvider*;
    function GetOpenedEditor() : presentation::controls::list::IDataEditor^;
    function GetSelectedCell() : presentation::GridPos;
    function SelectCell(value : presentation::GridPos, openEditor : system::Boolean) : system::Boolean;
    function SetViewToDefault() : system::Void;

    constructor (themeName : presentation::theme::ThemeName, itemProvider : presentation::controls::list::IItemProvider*) : presentation::controls::GuiVirtualDataGrid*;
}

class presentation::controls::GuiVirtualListView : presentation::controls::GuiListViewBase {
    property View : presentation::controls::ListViewView { get:GetView set:SetView }

    function GetView() : presentation::controls::ListViewView;
    function SetView(value : presentation::controls::ListViewView) : system::Void;

    constructor (themeName : presentation::theme::ThemeName, itemProvider : presentation::controls::list::IItemProvider*) : presentation::controls::GuiVirtualListView*;
}

class presentation::controls::GuiVirtualTextList : presentation::controls::GuiSelectableListControl {
    event ItemChecked : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiItemEventArgs*>^;

    property View : presentation::controls::TextListView { get:GetView set:SetView }

    function GetView() : presentation::controls::TextListView;
    function SetView(value : presentation::controls::TextListView) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiTextListTemplate*;

    constructor (themeName : presentation::theme::ThemeName, L"itemProvider" : presentation::controls::list::IItemProvider*) : presentation::controls::GuiVirtualTextList*;
}

class presentation::controls::GuiVirtualTreeListControl : presentation::controls::GuiSelectableListControl {
    event NodeCollapsed : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeEventArgs*>^;
    event NodeExpanded : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeEventArgs*>^;
    event NodeLeftButtonDoubleClick : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeMouseEventArgs*>^;
    event NodeLeftButtonDown : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeMouseEventArgs*>^;
    event NodeLeftButtonUp : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeMouseEventArgs*>^;
    event NodeMiddleButtonDoubleClick : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeMouseEventArgs*>^;
    event NodeMiddleButtonDown : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeMouseEventArgs*>^;
    event NodeMiddleButtonUp : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeMouseEventArgs*>^;
    event NodeMouseEnter : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeEventArgs*>^;
    event NodeMouseLeave : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeEventArgs*>^;
    event NodeMouseMove : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeMouseEventArgs*>^;
    event NodeRightButtonDoubleClick : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeMouseEventArgs*>^;
    event NodeRightButtonDown : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeMouseEventArgs*>^;
    event NodeRightButtonUp : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiNodeMouseEventArgs*>^;

    property NodeItemView : presentation::controls::tree::INodeItemView* { get:GetNodeItemView }
    property NodeRootProvider : presentation::controls::tree::INodeRootProvider* { get:GetNodeRootProvider }

    function GetNodeItemView() : presentation::controls::tree::INodeItemView*;
    function GetNodeRootProvider() : presentation::controls::tree::INodeRootProvider*;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiTreeViewTemplate*;

    constructor (themeName : presentation::theme::ThemeName, rootNodeProvider : presentation::controls::tree::INodeRootProvider^) : presentation::controls::GuiVirtualTreeListControl*;
}

class presentation::controls::GuiVirtualTreeView : presentation::controls::GuiVirtualTreeListControl {
    constructor (themeName : presentation::theme::ThemeName, rootNodeProvider : presentation::controls::tree::INodeRootProvider^) : presentation::controls::GuiVirtualTreeView*;
}

class presentation::controls::GuiWindow : presentation::controls::GuiControlHost {
    event ClipboardUpdated : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^;
    event FrameConfigChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        FrameConfig,
    }

    property Border : system::Boolean { get:GetBorder set:SetBorder }
    property FrameConfig : presentation::NativeWindowFrameConfig { get:GetFrameConfig event:FrameConfigChanged }
    property Icon : presentation::GuiImageData^ { get:GetIcon set:SetIcon }
    property IconVisible : system::Boolean { get:GetIconVisible set:SetIconVisible }
    property MaximizedBox : system::Boolean { get:GetMaximizedBox set:SetMaximizedBox }
    property MinimizedBox : system::Boolean { get:GetMinimizedBox set:SetMinimizedBox }
    property SizeBox : system::Boolean { get:GetSizeBox set:SetSizeBox }
    property TitleBar : system::Boolean { get:GetTitleBar set:SetTitleBar }

    function GetBorder() : system::Boolean;
    function GetFrameConfig() : presentation::NativeWindowFrameConfig;
    function GetIcon() : presentation::GuiImageData^;
    function GetIconVisible() : system::Boolean;
    function GetMaximizedBox() : system::Boolean;
    function GetMinimizedBox() : system::Boolean;
    function GetSizeBox() : system::Boolean;
    function GetTitleBar() : system::Boolean;
    function MoveToScreenCenter() : system::Void;
    function MoveToScreenCenter(screen : presentation::INativeScreen*) : system::Void;
    function SetBorder(value : system::Boolean) : system::Void;
    function SetIcon(value : presentation::GuiImageData^) : system::Void;
    function SetIconVisible(value : system::Boolean) : system::Void;
    function SetMaximizedBox(value : system::Boolean) : system::Void;
    function SetMinimizedBox(value : system::Boolean) : system::Void;
    function SetSizeBox(value : system::Boolean) : system::Void;
    function SetTitleBar(value : system::Boolean) : system::Void;
    function ShowModal(owner : presentation::controls::GuiWindow*, callback : system::Function<system::Void>^) : system::Void;
    function ShowModalAndDelete(owner : presentation::controls::GuiWindow*, callback : system::Function<system::Void>^) : system::Void;
    function ShowModalAndDelete(owner : presentation::controls::GuiWindow*, callbackClosed : system::Function<system::Void>^, callbackDeleted : system::Function<system::Void>^) : system::Void;
    function ShowModalAsync(owner : presentation::controls::GuiWindow*) : system::Async^;
    function ShowWithOwner(owner : presentation::controls::GuiWindow*) : system::Void;
    function TypedControlTemplateObject(ensureExists : system::Boolean) : presentation::templates::GuiWindowTemplate*;

    constructor (themeName : presentation::theme::ThemeName) : presentation::controls::GuiWindow*;
}

interface presentation::controls::IDatePickerCommandExecutor : system::Interface {
    function NotifyDateChanged() : system::Void;
    function NotifyDateNavigated() : system::Void;
    function NotifyDateSelected() : system::Void;

}

interface presentation::controls::IGuiAnimation : system::Interface {
    property Stopped : system::Boolean { get:GetStopped }

    static function CreateAnimation(run : system::Function<system::Void, system::UInt64>^, milliseconds : system::UInt64) : presentation::controls::IGuiAnimation^;
    static function CreateAnimation(run : system::Function<system::Void, system::UInt64>^) : presentation::controls::IGuiAnimation^;
    function GetStopped() : system::Boolean;
    function Pause() : system::Void;
    function Resume() : system::Void;
    function Run() : system::Void;
    function Start() : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IGuiAnimation>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IGuiAnimation>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::IGuiAnimation^;
}

class presentation::controls::IGuiAnimationCoroutine : system::ReferenceType {
    static function Create(creator : system::Function<system::Coroutine^, presentation::controls::IGuiAnimationCoroutine::IImpl*>^) : presentation::controls::IGuiAnimation^;
    static function PlayAndWaitAndPause(impl : presentation::controls::IGuiAnimationCoroutine::IImpl*, animation : presentation::controls::IGuiAnimation^) : system::Void;
    static function PlayInGroupAndPause(impl : presentation::controls::IGuiAnimationCoroutine::IImpl*, animation : presentation::controls::IGuiAnimation^, groupId : system::Int64) : system::Void;
    static function ReturnAndExit(impl : presentation::controls::IGuiAnimationCoroutine::IImpl*) : system::Void;
    static function WaitAndPause(impl : presentation::controls::IGuiAnimationCoroutine::IImpl*, milliseconds : system::UInt64) : system::Void;
    static function WaitForGroupAndPause(impl : presentation::controls::IGuiAnimationCoroutine::IImpl*, groupId : system::Int64) : system::Void;

}

interface presentation::controls::IGuiAnimationCoroutine::IImpl : presentation::controls::IGuiAnimation {
}

interface presentation::controls::IGuiMenuDropdownProvider : system::Interface {
    @InvokeTemplate:::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::IGuiMenuDropdownProvider>::GetIdentifier($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::IGuiMenuDropdownProvider>::GetIdentifier)
    static function GetIdentifier() : system::String;
    function ProvideDropdownMenu() : presentation::controls::GuiMenu*;

}

interface presentation::controls::IGuiMenuService : system::Interface {
    function GetHostThemeName() : presentation::theme::ThemeName;
    @InvokeTemplate:::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::IGuiMenuService>::GetIdentifier($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::IGuiMenuService>::GetIdentifier)
    static function GetIdentifier() : system::String;
    function GetOpeningMenu() : presentation::controls::GuiMenu*;
    function GetParentMenuService() : presentation::controls::IGuiMenuService*;
    function GetPreferredDirection() : presentation::controls::IGuiMenuService::Direction;
    function IsActiveState() : system::Boolean;
    function IsSubMenuActivatedByMouseDown() : system::Boolean;
    function MenuClosed(menu : presentation::controls::GuiMenu*) : system::Void;
    function MenuItemExecuted() : system::Void;
    function MenuOpened(menu : presentation::controls::GuiMenu*) : system::Void;

}

@ValueType
enum presentation::controls::IGuiMenuService::Direction {
    Horizontal = 0,
    Vertical = 1,
}

interface presentation::controls::IRibbonGalleryCommandExecutor : system::Interface {
    function NotifyDropdown() : system::Void;
    function NotifyScrollDown() : system::Void;
    function NotifyScrollUp() : system::Void;

}

interface presentation::controls::IRibbonGroupCommandExecutor : system::Interface {
    function NotifyExpandButtonClicked() : system::Void;

}

interface presentation::controls::IScrollCommandExecutor : system::Interface {
    function BigDecrease() : system::Void;
    function BigIncrease() : system::Void;
    function SetPageSize(value : system::Int64) : system::Void;
    function SetPosition(value : system::Int64) : system::Void;
    function SetTotalSize(value : system::Int64) : system::Void;
    function SmallDecrease() : system::Void;
    function SmallIncrease() : system::Void;

}

interface presentation::controls::ITabCommandExecutor : system::Interface {
    function ShowTab(index : system::Int64, setFocus : system::Boolean) : system::Void;

}

interface presentation::controls::ITextBoxCommandExecutor : system::Interface {
    function UnsafeSetText(value : system::String) : system::Void;

}

@ValueType
enum presentation::controls::ListViewView {
    BigIcon = 0,
    Detail = 5,
    Information = 4,
    List = 2,
    SmallIcon = 1,
    Tile = 3,
    Unknown = 6,
}

@ValueType
enum presentation::controls::RibbonButtonSize {
    Icon = 2,
    Large = 0,
    Small = 1,
}

@ValueType
enum presentation::controls::TabPageOrder {
    BottomToTop = 4,
    LeftToRight = 1,
    RightToLeft = 2,
    TopToBottom = 3,
    Unknown = 0,
}

@ValueType
enum presentation::controls::TextListView {
    Check = 1,
    Radio = 2,
    Text = 0,
    Unknown = 3,
}

class presentation::controls::list::CellBorderVisualizerTemplate : presentation::templates::GuiGridVisualizerTemplate {
    constructor () : presentation::controls::list::CellBorderVisualizerTemplate*;
}

class presentation::controls::list::DataAndFilter : presentation::controls::list::DataMultipleFilter {
    constructor () : presentation::controls::list::DataAndFilter^;
}

class presentation::controls::list::DataColumn : system::ReferenceType {
    event TextPropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TextProperty,
    }
    event ValuePropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ValueProperty,
    }

    property EditorFactory : presentation::controls::list::IDataEditorFactory^ { get:GetEditorFactory set:SetEditorFactory }
    property Filter : presentation::controls::list::IDataFilter^ { get:GetFilter set:SetFilter }
    property OwnPopup : system::Boolean { get:GetOwnPopup set:SetOwnPopup }
    property Popup : presentation::controls::GuiMenu* { get:GetPopup set:SetPopup }
    property Size : system::Int64 { get:GetSize set:SetSize }
    property Sorter : presentation::controls::list::IDataSorter^ { get:GetSorter set:SetSorter }
    property Text : system::String { get:GetText set:SetText }
    property TextProperty : system::Function<system::String, system::Object>^ { get:GetTextProperty set:SetTextProperty event:TextPropertyChanged }
    property ValueProperty : system::Function<system::Object, system::Object, system::Object, system::Boolean>^ { get:GetValueProperty set:SetValueProperty event:ValuePropertyChanged }
    property VisualizerFactory : presentation::controls::list::IDataVisualizerFactory^ { get:GetVisualizerFactory set:SetVisualizerFactory }

    function GetCellText(row : system::Int64) : system::String;
    function GetCellValue(row : system::Int64) : system::Object;
    function GetEditorFactory() : presentation::controls::list::IDataEditorFactory^;
    function GetFilter() : presentation::controls::list::IDataFilter^;
    function GetOwnPopup() : system::Boolean;
    function GetPopup() : presentation::controls::GuiMenu*;
    function GetSize() : system::Int64;
    function GetSorter() : presentation::controls::list::IDataSorter^;
    function GetText() : system::String;
    function GetTextProperty() : system::Function<system::String, system::Object>^;
    function GetValueProperty() : system::Function<system::Object, system::Object, system::Object, system::Boolean>^;
    function GetVisualizerFactory() : presentation::controls::list::IDataVisualizerFactory^;
    function SetCellValue(row : system::Int64, value : system::Object) : system::Void;
    function SetEditorFactory(value : presentation::controls::list::IDataEditorFactory^) : system::Void;
    function SetFilter(value : presentation::controls::list::IDataFilter^) : system::Void;
    function SetOwnPopup(value : system::Boolean) : system::Void;
    function SetPopup(value : presentation::controls::GuiMenu*) : system::Void;
    function SetSize(value : system::Int64) : system::Void;
    function SetSorter(value : presentation::controls::list::IDataSorter^) : system::Void;
    function SetText(value : system::String) : system::Void;
    function SetTextProperty(value : system::Function<system::String, system::Object>^) : system::Void;
    function SetValueProperty(value : system::Function<system::Object, system::Object, system::Object, system::Boolean>^) : system::Void;
    function SetVisualizerFactory(value : presentation::controls::list::IDataVisualizerFactory^) : system::Void;

    constructor () : presentation::controls::list::DataColumn^;
}

class presentation::controls::list::DataEditorBase : presentation::controls::list::IDataEditor {
}

class presentation::controls::list::DataEditorFactory : presentation::controls::list::IDataEditorFactory {
    constructor (templateFactory : system::Function<presentation::templates::GuiGridEditorTemplate*, system::Object>^) : presentation::controls::list::DataEditorFactory^;
}

class presentation::controls::list::DataFilterBase : presentation::controls::list::IDataFilter {
}

class presentation::controls::list::DataMultipleFilter : presentation::controls::list::DataFilterBase {
    function AddSubFilter(value : presentation::controls::list::IDataFilter^) : system::Boolean;
    function RemoveSubFilter(value : presentation::controls::list::IDataFilter^) : system::Boolean;

}

class presentation::controls::list::DataMultipleSorter : presentation::controls::list::DataSorterBase {
    function SetLeftSorter(value : presentation::controls::list::IDataSorter^) : system::Boolean;
    function SetRightSorter(value : presentation::controls::list::IDataSorter^) : system::Boolean;

    constructor () : presentation::controls::list::DataMultipleSorter^;
}

class presentation::controls::list::DataNotFilter : presentation::controls::list::DataFilterBase {
    function SetSubFilter(value : presentation::controls::list::IDataFilter^) : system::Boolean;

    constructor () : presentation::controls::list::DataNotFilter^;
}

class presentation::controls::list::DataOrFilter : presentation::controls::list::DataMultipleFilter {
    constructor () : presentation::controls::list::DataOrFilter^;
}

class presentation::controls::list::DataProvider : presentation::controls::list::ItemProviderBase, presentation::controls::list::IListViewItemView, presentation::controls::list::ListViewColumnItemArranger::IColumnItemView, presentation::controls::list::IDataGridView, presentation::controls::list::IDataProcessorCallback {
}

class presentation::controls::list::DataReverseSorter : presentation::controls::list::DataSorterBase {
    function SetSubSorter(value : presentation::controls::list::IDataSorter^) : system::Boolean;

    constructor () : presentation::controls::list::DataReverseSorter^;
}

class presentation::controls::list::DataSorterBase : presentation::controls::list::IDataSorter {
}

class presentation::controls::list::DataVisualizerBase : presentation::controls::list::IDataVisualizer {
}

class presentation::controls::list::DataVisualizerFactory : presentation::controls::list::IDataVisualizerFactory {
    constructor (templateFactory : system::Function<presentation::templates::GuiGridVisualizerTemplate*, system::Object>^, decoratedFactory : presentation::controls::list::DataVisualizerFactory^) : presentation::controls::list::DataVisualizerFactory^;
}

class presentation::controls::list::FixedHeightItemArranger : presentation::controls::list::RangedItemArrangerBase {
    constructor () : presentation::controls::list::FixedHeightItemArranger^;
}

class presentation::controls::list::FixedHeightMultiColumnItemArranger : presentation::controls::list::RangedItemArrangerBase {
    constructor () : presentation::controls::list::FixedHeightMultiColumnItemArranger^;
}

class presentation::controls::list::FixedSizeMultiColumnItemArranger : presentation::controls::list::RangedItemArrangerBase {
    constructor () : presentation::controls::list::FixedSizeMultiColumnItemArranger^;
}

class presentation::controls::list::FocusRectangleVisualizerTemplate : presentation::templates::GuiGridVisualizerTemplate {
    constructor () : presentation::controls::list::FocusRectangleVisualizerTemplate*;
}

class presentation::controls::list::FreeHeightItemArranger : presentation::controls::list::RangedItemArrangerBase {
    constructor () : presentation::controls::list::FreeHeightItemArranger^;
}

class presentation::controls::list::GalleryGroup : system::ReferenceType {
    property ItemValues : system::List^ { get:GetItemValues }
    property Name : system::String { get:GetName }

    function GetItemValues() : system::List^;
    function GetName() : system::String;

}

class presentation::controls::list::GroupedDataSource : system::ReferenceType {
    event GroupChildrenPropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        GroupChildrenProperty,
    }
    event GroupEnabledChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        GroupEnabled,
    }
    event GroupTitlePropertyChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        GroupTitleProperty,
    }

    property GroupChildrenProperty : system::Function<system::Enumerable^, system::Object>^ { get:GetGroupChildrenProperty set:SetGroupChildrenProperty event:GroupChildrenPropertyChanged }
    property GroupEnabled : system::Boolean { get:GetGroupEnabled event:GroupEnabledChanged }
    property GroupTitleProperty : system::Function<system::String, system::Object>^ { get:GetGroupTitleProperty set:SetGroupTitleProperty event:GroupTitlePropertyChanged }
    property Groups : system::ReadonlyList<presentation::controls::list::GalleryGroup^>^ { get:GetGroups }
    property ItemSource : system::Enumerable^ { get:GetItemSource set:SetItemSource }

    function GetGroupChildrenProperty() : system::Function<system::Enumerable^, system::Object>^;
    function GetGroupEnabled() : system::Boolean;
    function GetGroupTitleProperty() : system::Function<system::String, system::Object>^;
    function GetGroups() : system::ReadonlyList<presentation::controls::list::GalleryGroup^>^;
    function GetItemSource() : system::Enumerable^;
    function SetGroupChildrenProperty(value : system::Function<system::Enumerable^, system::Object>^) : system::Void;
    function SetGroupTitleProperty(value : system::Function<system::String, system::Object>^) : system::Void;
    function SetItemSource(value : system::Enumerable^) : system::Void;

}

class presentation::controls::list::HyperlinkVisualizerTemplate : presentation::controls::list::SubColumnVisualizerTemplate {
    constructor () : presentation::controls::list::HyperlinkVisualizerTemplate*;
}

interface presentation::controls::list::IDataEditor : system::Interface {
    property CellValueSaved : system::Boolean { get:GetCellValueSaved }
    property Factory : presentation::controls::list::IDataEditorFactory* { get:GetFactory }
    property Template : presentation::templates::GuiGridEditorTemplate* { get:GetTemplate }

    function BeforeEditCell(itemProvider : presentation::controls::list::IItemProvider*, row : system::Int64, column : system::Int64) : system::Void;
    function GetCellValueSaved() : system::Boolean;
    function GetFactory() : presentation::controls::list::IDataEditorFactory*;
    function GetTemplate() : presentation::templates::GuiGridEditorTemplate*;

}

interface presentation::controls::list::IDataEditorFactory : system::Interface {
    function CreateEditor(dataGridContext : presentation::controls::list::IDataGridContext*) : presentation::controls::list::IDataEditor^;

}

interface presentation::controls::list::IDataFilter : system::Interface {
    function Filter(row : system::Object) : system::Boolean;
    function SetCallback(value : presentation::controls::list::IDataProcessorCallback*) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IDataFilter>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IDataFilter>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::list::IDataFilter^;
}

interface presentation::controls::list::IDataGridContext : system::Interface {
    property ItemProvider : presentation::controls::list::IItemProvider* { get:GetItemProvider }
    property ListViewControlTemplate : presentation::templates::GuiListViewTemplate* { get:GetListViewControlTemplate }

    function GetItemProvider() : presentation::controls::list::IItemProvider*;
    function GetListViewControlTemplate() : presentation::templates::GuiListViewTemplate*;
    function RequestSaveData() : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IDataGridContext>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IDataGridContext>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::list::IDataGridContext^;
}

interface presentation::controls::list::IDataGridView : system::Interface {
    property SortedColumn : system::Int64 { get:GetSortedColumn }

    function GetBindingCellValue(row : system::Int64, column : system::Int64) : system::Object;
    function GetCellDataEditorFactory(row : system::Int64, column : system::Int64) : presentation::controls::list::IDataEditorFactory*;
    function GetCellDataVisualizerFactory(row : system::Int64, column : system::Int64) : presentation::controls::list::IDataVisualizerFactory*;
    function GetCellSpan(row : system::Int64, column : system::Int64) : system::Int64;
    @InvokeTemplate:::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::list::IDataGridView>::GetIdentifier($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::list::IDataGridView>::GetIdentifier)
    static function GetIdentifier() : system::String;
    function GetSortedColumn() : system::Int64;
    function IsColumnSortable(column : system::Int64) : system::Boolean;
    function IsSortOrderAscending() : system::Boolean;
    function SetBindingCellValue(row : system::Int64, column : system::Int64, value : system::Object) : system::Void;
    function SortByColumn(column : system::Int64, ascending : system::Boolean) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IDataGridView>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IDataGridView>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::list::IDataGridView^;
}

interface presentation::controls::list::IDataProcessorCallback : system::Interface {
    property ItemProvider : presentation::controls::list::IItemProvider* { get:GetItemProvider }

    function GetItemProvider() : presentation::controls::list::IItemProvider*;
    function OnProcessorChanged() : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IDataProcessorCallback>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IDataProcessorCallback>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::list::IDataProcessorCallback^;
}

interface presentation::controls::list::IDataSorter : system::Interface {
    function Compare(row1 : system::Object, row2 : system::Object) : system::Int64;
    function SetCallback(value : presentation::controls::list::IDataProcessorCallback*) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IDataSorter>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IDataSorter>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::list::IDataSorter^;
}

interface presentation::controls::list::IDataVisualizer : system::Interface {
    property Factory : presentation::controls::list::IDataVisualizerFactory* { get:GetFactory }
    property Template : presentation::templates::GuiGridVisualizerTemplate* { get:GetTemplate }

    function BeforeVisualizeCell(itemProvider : presentation::controls::list::IItemProvider*, row : system::Int64, column : system::Int64) : system::Void;
    function GetFactory() : presentation::controls::list::IDataVisualizerFactory*;
    function GetTemplate() : presentation::templates::GuiGridVisualizerTemplate*;
    function SetSelected(value : system::Boolean) : system::Void;

}

interface presentation::controls::list::IDataVisualizerFactory : system::Interface {
    function CreateVisualizer(dataGridContext : presentation::controls::list::IDataGridContext*) : presentation::controls::list::IDataVisualizer^;

}

interface presentation::controls::list::IItemProvider : system::Interface {
    function AttachCallback(value : presentation::controls::list::IItemProviderCallback*) : system::Boolean;
    function Count() : system::Int64;
    function DetachCallback(value : presentation::controls::list::IItemProviderCallback*) : system::Boolean;
    function GetBindingValue(itemIndex : system::Int64) : system::Object;
    function GetTextValue(itemIndex : system::Int64) : system::String;
    function IsEditing() : system::Boolean;
    function PopEditing() : system::Boolean;
    function PushEditing() : system::Void;
    function RequestView(identifier : system::String) : system::Interface*;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<list::IItemProvider>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<list::IItemProvider>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::list::IItemProvider^;
}

interface presentation::controls::list::IItemProviderCallback : system::Interface {
    function OnAttached(provider : presentation::controls::list::IItemProvider*) : system::Void;
    function OnItemModified(start : system::Int64, count : system::Int64, newCount : system::Int64, itemReferenceUpdated : system::Boolean) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<list::IItemProviderCallback>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<list::IItemProviderCallback>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::list::IItemProviderCallback^;
}

interface presentation::controls::list::IListViewItemView : system::Interface {
    function GetColumnCount() : system::Int64;
    function GetColumnText(index : system::Int64) : system::String;
    function GetDataColumn(index : system::Int64) : system::Int64;
    function GetDataColumnCount() : system::Int64;
    @InvokeTemplate:::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::list::IListViewItemView>::GetIdentifier($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::list::IListViewItemView>::GetIdentifier)
    static function GetIdentifier() : system::String;
    function GetLargeImage(itemIndex : system::Int64) : presentation::GuiImageData^;
    function GetSmallImage(itemIndex : system::Int64) : presentation::GuiImageData^;
    function GetSubItem(itemIndex : system::Int64, index : system::Int64) : system::String;
    function GetText(itemIndex : system::Int64) : system::String;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IListViewItemView>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IListViewItemView>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::list::IListViewItemView^;
}

interface presentation::controls::list::ITextItemView : system::Interface {
    function GetChecked(itemIndex : system::Int64) : system::Boolean;
    @InvokeTemplate:::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::list::ITextItemView>::GetIdentifier($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::list::ITextItemView>::GetIdentifier)
    static function GetIdentifier() : system::String;
    function SetChecked(itemIndex : system::Int64, value : system::Boolean) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<ITextItemView>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<ITextItemView>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::list::ITextItemView^;
}

class presentation::controls::list::ItemProviderBase : presentation::controls::list::IItemProvider {
}

class presentation::controls::list::ListViewColumn : system::ReferenceType {
    property DropdownPopup : presentation::controls::GuiMenu* { get:GetDropdownPopup set:SetDropdownPopup }
    property OwnPopup : system::Boolean { get:GetOwnPopup set:SetOwnPopup }
    property Size : system::Int64 { get:GetSize set:SetSize }
    property SortingState : presentation::controls::ColumnSortingState { get:GetSortingState set:SetSortingState }
    property Text : system::String { get:GetText set:SetText }
    property TextProperty : system::Function<system::String, system::Object>^ { get:GetTextProperty set:SetTextProperty }

    function GetDropdownPopup() : presentation::controls::GuiMenu*;
    function GetOwnPopup() : system::Boolean;
    function GetSize() : system::Int64;
    function GetSortingState() : presentation::controls::ColumnSortingState;
    function GetText() : system::String;
    function GetTextProperty() : system::Function<system::String, system::Object>^;
    function SetDropdownPopup(value : presentation::controls::GuiMenu*) : system::Void;
    function SetOwnPopup(value : system::Boolean) : system::Void;
    function SetSize(value : system::Int64) : system::Void;
    function SetSortingState(value : presentation::controls::ColumnSortingState) : system::Void;
    function SetText(value : system::String) : system::Void;
    function SetTextProperty(value : system::Function<system::String, system::Object>^) : system::Void;

    constructor () : presentation::controls::list::ListViewColumn^;
    constructor (text : system::String) : presentation::controls::list::ListViewColumn^;
    constructor (text : system::String, size : system::Int64) : presentation::controls::list::ListViewColumn^;
}

class presentation::controls::list::ListViewColumnItemArranger : presentation::controls::list::FixedHeightItemArranger {
    property ColumnButtons : system::ReadonlyList<presentation::controls::GuiListViewColumnHeader*>^ { get:GetColumnButtons }
    property ColumnSplitters : system::ReadonlyList<presentation::compositions::GuiBoundsComposition*>^ { get:GetColumnSplitters }

    function GetColumnButtons() : system::ReadonlyList<presentation::controls::GuiListViewColumnHeader*>^;
    function GetColumnSplitters() : system::ReadonlyList<presentation::compositions::GuiBoundsComposition*>^;

    constructor () : presentation::controls::list::ListViewColumnItemArranger^;
}

interface presentation::controls::list::ListViewColumnItemArranger::IColumnItemView : system::Interface {
    function AttachCallback(value : presentation::controls::list::ListViewColumnItemArranger::IColumnItemViewCallback*) : system::Boolean;
    function DetachCallback(value : presentation::controls::list::ListViewColumnItemArranger::IColumnItemViewCallback*) : system::Boolean;
    function GetColumnSize(index : system::Int64) : system::Int64;
    function GetDropdownPopup(index : system::Int64) : presentation::controls::GuiMenu*;
    @InvokeTemplate:::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::list::ListViewColumnItemArranger::IColumnItemView>::GetIdentifier($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::list::ListViewColumnItemArranger::IColumnItemView>::GetIdentifier)
    static function GetIdentifier() : system::String;
    function GetSortingState(index : system::Int64) : presentation::controls::ColumnSortingState;
    function SetColumnSize(index : system::Int64, value : system::Int64) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<ListViewColumnItemArranger::IColumnItemView>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<ListViewColumnItemArranger::IColumnItemView>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::list::ListViewColumnItemArranger::IColumnItemView^;
}

class presentation::controls::list::ListViewColumnItemArranger::IColumnItemViewCallback : system::ReferenceType {
    function OnColumnChanged(needToRefreshItems : system::Boolean) : system::Void;
    function OnColumnRebuilt() : system::Void;

}

class presentation::controls::list::ListViewItem : system::ReferenceType {
    property LargeImage : presentation::GuiImageData^ { get:GetLargeImage set:SetLargeImage }
    property SmallImage : presentation::GuiImageData^ { get:GetSmallImage set:SetSmallImage }
    property SubItems : system::List<system::String>^ { get:GetSubItems }
    property Tag : system::Object { get:GetTag set:SetTag }
    property Text : system::String { get:GetText set:SetText }

    function GetLargeImage() : presentation::GuiImageData^;
    function GetSmallImage() : presentation::GuiImageData^;
    function GetSubItems() : system::List<system::String>^;
    function GetTag() : system::Object;
    function GetText() : system::String;
    function SetLargeImage(value : presentation::GuiImageData^) : system::Void;
    function SetSmallImage(value : presentation::GuiImageData^) : system::Void;
    function SetTag(value : system::Object) : system::Void;
    function SetText(value : system::String) : system::Void;

    constructor () : presentation::controls::list::ListViewItem^;
}

class presentation::controls::list::ListViewItemProvider : presentation::controls::list::IItemProvider, presentation::controls::list::IListViewItemView, presentation::controls::list::ListViewColumnItemArranger::IColumnItemView {
}

class presentation::controls::list::MainColumnVisualizerTemplate : presentation::templates::GuiGridVisualizerTemplate {
    constructor () : presentation::controls::list::MainColumnVisualizerTemplate*;
}

class presentation::controls::list::RangedItemArrangerBase : presentation::controls::GuiListControl::IItemArranger {
}

class presentation::controls::list::SubColumnVisualizerTemplate : presentation::templates::GuiGridVisualizerTemplate {
    constructor () : presentation::controls::list::SubColumnVisualizerTemplate*;
}

class presentation::controls::list::TextItem : system::ReferenceType {
    property Checked : system::Boolean { get:GetChecked set:SetChecked }
    property Text : system::String { get:GetText set:SetText }

    function GetChecked() : system::Boolean;
    function GetText() : system::String;
    function SetChecked(value : system::Boolean) : system::Void;
    function SetText(value : system::String) : system::Void;

    constructor () : presentation::controls::list::TextItem^;
    constructor (text : system::String) : presentation::controls::list::TextItem^;
    constructor (text : system::String, checked : system::Boolean) : presentation::controls::list::TextItem^;
}

class presentation::controls::list::TextItemProvider : presentation::controls::list::IItemProvider, presentation::controls::list::ITextItemView {
}

interface presentation::controls::tree::INodeItemView : system::Interface {
    function CalculateNodeVisibilityIndex(node : presentation::controls::tree::INodeProvider*) : system::Int64;
    @InvokeTemplate:::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::tree::INodeItemView>::GetIdentifier($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::tree::INodeItemView>::GetIdentifier)
    static function GetIdentifier() : system::String;
    function RequestNode(index : system::Int64) : presentation::controls::tree::INodeProvider^;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<INodeItemView>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<INodeItemView>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::tree::INodeItemView^;
}

interface presentation::controls::tree::INodeProvider : system::Interface {
    property ChildCount : system::Int64 { get:GetChildCount }
    property Expanding : system::Boolean { get:GetExpanding set:SetExpanding }
    property Parent : presentation::controls::tree::INodeProvider^ { get:GetParent }

    function CalculateTotalVisibleNodes() : system::Int64;
    function GetChild(index : system::Int64) : presentation::controls::tree::INodeProvider^;
    function GetChildCount() : system::Int64;
    function GetExpanding() : system::Boolean;
    function GetParent() : presentation::controls::tree::INodeProvider^;
    function NotifyDataModified() : system::Void;
    function SetExpanding(value : system::Boolean) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<INodeProvider>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<INodeProvider>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::tree::INodeProvider^;
}

interface presentation::controls::tree::INodeProviderCallback : system::Interface {
    function OnAfterItemModified(parentNode : presentation::controls::tree::INodeProvider*, start : system::Int64, count : system::Int64, newCount : system::Int64, itemReferenceUpdated : system::Boolean) : system::Void;
    function OnAttached(provider : presentation::controls::tree::INodeRootProvider*) : system::Void;
    function OnBeforeItemModified(parentNode : presentation::controls::tree::INodeProvider*, start : system::Int64, count : system::Int64, newCount : system::Int64, itemReferenceUpdated : system::Boolean) : system::Void;
    function OnItemCollapsed(node : presentation::controls::tree::INodeProvider*) : system::Void;
    function OnItemExpanded(node : presentation::controls::tree::INodeProvider*) : system::Void;

}

interface presentation::controls::tree::INodeRootProvider : system::Interface {
    property RootNode : presentation::controls::tree::INodeProvider^ { get:GetRootNode }

    function AttachCallback(value : presentation::controls::tree::INodeProviderCallback*) : system::Boolean;
    function CanGetNodeByVisibleIndex() : system::Boolean;
    function DetachCallback(value : presentation::controls::tree::INodeProviderCallback*) : system::Boolean;
    function GetBindingValue(node : presentation::controls::tree::INodeProvider*) : system::Object;
    function GetNodeByVisibleIndex(index : system::Int64) : presentation::controls::tree::INodeProvider^;
    function GetRootNode() : presentation::controls::tree::INodeProvider^;
    function GetTextValue(node : presentation::controls::tree::INodeProvider*) : system::String;
    function RequestView(identifier : system::String) : system::Interface*;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<INodeRootProvider>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<INodeRootProvider>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::tree::INodeRootProvider^;
}

interface presentation::controls::tree::ITreeViewItemView : system::Interface {
    @InvokeTemplate:::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::tree::ITreeViewItemView>::GetIdentifier($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::controls::QueryServiceHelper<::vl::presentation::controls::tree::ITreeViewItemView>::GetIdentifier)
    static function GetIdentifier() : system::String;
    function GetNodeImage(node : presentation::controls::tree::INodeProvider*) : presentation::GuiImageData^;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<ITreeViewItemView>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<ITreeViewItemView>::Create)
    constructor (proxy : system::InterfaceProxy^) : presentation::controls::tree::ITreeViewItemView^;
}

class presentation::controls::tree::MemoryNodeProvider : presentation::controls::tree::INodeProvider {
    property Children : system::List<presentation::controls::tree::MemoryNodeProvider^>^ { get:GetChildren }
    property Data : system::ReferenceType^ { get:GetData set:SetData }

    @InvokeTemplate:$This->Children($Arguments)
    @ClosureTemplate:::vl::Func<$Func>($This, &$Type::Children)
    function GetChildren() : system::List<presentation::controls::tree::MemoryNodeProvider^>^;
    function GetData() : system::ReferenceType^;
    function SetData(value : system::ReferenceType^) : system::Void;

    constructor () : presentation::controls::tree::MemoryNodeProvider^;
    constructor (data : system::ReferenceType^) : presentation::controls::tree::MemoryNodeProvider^;
}

class presentation::controls::tree::MemoryNodeRootProvider : presentation::controls::tree::MemoryNodeProvider, presentation::controls::tree::NodeRootProviderBase {
    property RootNode : presentation::controls::tree::INodeProvider^ { get:GetRootNode }

    function GetMemoryNode(node : presentation::controls::tree::INodeProvider*) : presentation::controls::tree::MemoryNodeProvider*;
    function GetRootNode() : presentation::controls::tree::INodeProvider^;

}

class presentation::controls::tree::NodeItemProvider : presentation::controls::list::ItemProviderBase, presentation::controls::tree::INodeItemView {
}

class presentation::controls::tree::NodeRootProviderBase : presentation::controls::tree::INodeRootProvider {
}

class presentation::controls::tree::TreeViewItem : system::ReferenceType {
    property image : presentation::GuiImageData^;
    property tag : system::Object;
    property text : system::String;

    constructor () : presentation::controls::tree::TreeViewItem^;
    constructor (image : presentation::GuiImageData^, text : system::String) : presentation::controls::tree::TreeViewItem^;
}

class presentation::controls::tree::TreeViewItemRootProvider : presentation::controls::tree::MemoryNodeRootProvider, presentation::controls::tree::ITreeViewItemView {
    function GetTreeViewData(node : presentation::controls::tree::INodeProvider*) : presentation::controls::tree::TreeViewItem^;
    function SetTreeViewData(node : presentation::controls::tree::INodeProvider*, value : presentation::controls::tree::TreeViewItem^) : system::Void;
    function UpdateTreeViewData(node : presentation::controls::tree::INodeProvider*) : system::Void;

    constructor () : presentation::controls::tree::TreeViewItemRootProvider^;
}

@ValueType
struct presentation::elements::ElementShape {
    property radiusX : system::Int64;
    property radiusY : system::Int64;
    property shapeType : presentation::elements::ElementShapeType;
}

@ValueType
enum presentation::elements::ElementShapeType {
    Ellipse = 1,
    Rectangle = 0,
    RoundRect = 2,
}

class presentation::elements::Gui3DBorderElement : presentation::elements::IGuiGraphicsElement {
    property Color1 : presentation::Color { get:GetColor1 set:SetColor1 }
    property Color2 : presentation::Color { get:GetColor2 set:SetColor2 }

    function GetColor1() : presentation::Color;
    function GetColor2() : presentation::Color;
    function SetColor1(value : presentation::Color) : system::Void;
    function SetColor2(value : presentation::Color) : system::Void;
    function SetColors(value1 : presentation::Color, value2 : presentation::Color) : system::Void;

    @InvokeTemplate:::vl::reflection::description::Element_Constructor<::vl::presentation::elements::Gui3DBorderElement>($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::Element_Constructor<::vl::presentation::elements::Gui3DBorderElement>)
    constructor () : presentation::elements::Gui3DBorderElement^;
}

class presentation::elements::Gui3DSplitterElement : presentation::elements::IGuiGraphicsElement {
    property Color1 : presentation::Color { get:GetColor1 set:SetColor1 }
    property Color2 : presentation::Color { get:GetColor2 set:SetColor2 }
    property Direction : presentation::elements::Gui3DSplitterElement::Direction { get:GetDirection set:SetDirection }

    function GetColor1() : presentation::Color;
    function GetColor2() : presentation::Color;
    function GetDirection() : presentation::elements::Gui3DSplitterElement::Direction;
    function SetColor1(value : presentation::Color) : system::Void;
    function SetColor2(value : presentation::Color) : system::Void;
    function SetColors(value1 : presentation::Color, value2 : presentation::Color) : system::Void;
    function SetDirection(value : presentation::elements::Gui3DSplitterElement::Direction) : system::Void;

    @InvokeTemplate:::vl::reflection::description::Element_Constructor<::vl::presentation::elements::Gui3DSplitterElement>($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::Element_Constructor<::vl::presentation::elements::Gui3DSplitterElement>)
    constructor () : presentation::elements::Gui3DSplitterElement^;
}

@ValueType
enum presentation::elements::Gui3DSplitterElement::Direction {
    Horizontal = 0,
    Vertical = 1,
}

class presentation::elements::GuiColorizedTextElement : presentation::elements::IGuiGraphicsElement {
    property CaretBegin : presentation::TextPos { get:GetCaretBegin set:SetCaretBegin }
    property CaretColor : presentation::Color { get:GetCaretColor set:SetCaretColor }
    property CaretEnd : presentation::TextPos { get:GetCaretEnd set:SetCaretEnd }
    property CaretVisible : system::Boolean { get:GetCaretVisible set:SetCaretVisible }
    property Colors : system::ReadonlyList<presentation::elements::text::ColorEntry>^ { get:GetColors set:SetColors }
    property Focused : system::Boolean { get:GetFocused set:SetFocused }
    property Font : presentation::FontProperties { get:GetFont set:SetFont }
    property Lines : presentation::elements::text::TextLines* { get:GetLines }
    property PasswordChar : system::Char { get:GetPasswordChar set:SetPasswordChar }
    property ViewPosition : presentation::Point { get:GetViewPosition set:SetViewPosition }
    property VisuallyEnabled : system::Boolean { get:GetVisuallyEnabled set:SetVisuallyEnabled }

    function GetCaretBegin() : presentation::TextPos;
    function GetCaretColor() : presentation::Color;
    function GetCaretEnd() : presentation::TextPos;
    function GetCaretVisible() : system::Boolean;
    function GetColors() : system::ReadonlyList<presentation::elements::text::ColorEntry>^;
    function GetFocused() : system::Boolean;
    function GetFont() : presentation::FontProperties;
    @InvokeTemplate:::vl::reflection::description::GuiColorizedTextElement_GetLines($This, $Arguments)
    @ClosureTemplate:::vl::Func<$Func>($This, &::vl::reflection::description::GuiColorizedTextElement_GetLines)
    function GetLines() : presentation::elements::text::TextLines*;
    function GetPasswordChar() : system::Char;
    function GetViewPosition() : presentation::Point;
    function GetVisuallyEnabled() : system::Boolean;
    function SetCaretBegin(value : presentation::TextPos) : system::Void;
    function SetCaretColor(value : presentation::Color) : system::Void;
    function SetCaretEnd(value : presentation::TextPos) : system::Void;
    function SetCaretVisible(value : system::Boolean) : system::Void;
    function SetColors(value : system::ReadonlyList<presentation::elements::text::ColorEntry>^) : system::Void;
    function SetFocused(value : system::Boolean) : system::Void;
    function SetFont(value : presentation::FontProperties) : system::Void;
    function SetPasswordChar(value : system::Char) : system::Void;
    function SetViewPosition(value : presentation::Point) : system::Void;
    function SetVisuallyEnabled(value : system::Boolean) : system::Void;

    @InvokeTemplate:::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiColorizedTextElement>($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiColorizedTextElement>)
    constructor () : presentation::elements::GuiColorizedTextElement^;
}

class presentation::elements::GuiDocumentElement : presentation::elements::IGuiGraphicsElement {
    property CaretBegin : presentation::TextPos { get:GetCaretBegin }
    property CaretColor : presentation::Color { get:GetCaretColor set:SetCaretColor }
    property CaretEnd : presentation::TextPos { get:GetCaretEnd }
    property CaretVisible : system::Boolean { get:GetCaretVisible set:SetCaretVisible }
    property Document : presentation::DocumentModel^ { get:GetDocument set:SetDocument }

    function CalculateCaret(comparingCaret : presentation::TextPos, position : presentation::elements::IGuiGraphicsParagraph::CaretRelativePosition, preferFrontSide : system::Boolean) : presentation::TextPos;
    function CalculateCaretFromPoint(point : presentation::Point) : presentation::TextPos;
    function ClearStyle(begin : presentation::TextPos, end : presentation::TextPos) : system::Void;
    function EditImage(begin : presentation::TextPos, end : presentation::TextPos, image : presentation::GuiImageData^) : system::Void;
    function EditImage(paragraphIndex : presentation::TextPos, begin : presentation::TextPos, end : presentation::GuiImageData^) : system::Void;
    function EditRun(begin : presentation::TextPos, end : presentation::TextPos, model : presentation::DocumentModel^, copy : system::Boolean) : system::Void;
    function EditStyle(begin : presentation::TextPos, end : presentation::TextPos, style : presentation::DocumentStyleProperties^) : system::Void;
    function EditStyleName(begin : presentation::TextPos, end : presentation::TextPos, styleName : system::String) : system::Void;
    function EditText(begin : presentation::TextPos, end : presentation::TextPos, frontSide : system::Boolean, text : system::ReadonlyList<system::String>^) : system::Void;
    function GetCaretBegin() : presentation::TextPos;
    function GetCaretBounds(caret : presentation::TextPos, frontSide : system::Boolean) : presentation::Rect;
    function GetCaretColor() : presentation::Color;
    function GetCaretEnd() : presentation::TextPos;
    function GetCaretVisible() : system::Boolean;
    function GetDocument() : presentation::DocumentModel^;
    function GetHyperlinkFromPoint(point : presentation::Point) : presentation::DocumentHyperlinkRun::Package^;
    function IsCaretEndPreferFrontSide() : system::Boolean;
    function NotifyParagraphUpdated(index : system::Int64, oldCount : system::Int64, newCount : system::Int64, updatedText : system::Boolean) : system::Void;
    function RemoveHyperlink(paragraphIndex : system::Int64, begin : system::Int64, end : system::Int64) : system::Void;
    function RemoveStyleName(begin : presentation::TextPos, end : presentation::TextPos) : system::Void;
    function RenameStyle(oldStyleName : system::String, newStyleName : system::String) : system::Void;
    function SetCaret(begin : presentation::TextPos, end : presentation::TextPos, frontSide : system::Boolean) : system::Void;
    function SetCaretColor(value : presentation::Color) : system::Void;
    function SetCaretVisible(value : system::Boolean) : system::Void;
    function SetDocument(value : presentation::DocumentModel^) : system::Void;
    function SetParagraphAlignment(begin : presentation::TextPos, end : presentation::TextPos, alignments : system::ReadonlyList<presentation::Alignment?>^) : system::Void;
    function SummarizeParagraphAlignment(begin : presentation::TextPos, end : presentation::TextPos) : presentation::Alignment?;
    function SummarizeStyle(begin : presentation::TextPos, end : presentation::TextPos) : presentation::DocumentStyleProperties^;
    function SummarizeStyleName(begin : presentation::TextPos, end : presentation::TextPos) : system::String?;

    @InvokeTemplate:::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiDocumentElement>($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiDocumentElement>)
    constructor () : presentation::elements::GuiDocumentElement^;
}

class presentation::elements::GuiFocusRectangleElement : presentation::elements::IGuiGraphicsElement {
    @InvokeTemplate:::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiFocusRectangleElement>($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiFocusRectangleElement>)
    constructor () : presentation::elements::GuiFocusRectangleElement^;
}

class presentation::elements::GuiGradientBackgroundElement : presentation::elements::IGuiGraphicsElement {
    property Color1 : presentation::Color { get:GetColor1 set:SetColor1 }
    property Color2 : presentation::Color { get:GetColor2 set:SetColor2 }
    property Direction : presentation::elements::GuiGradientBackgroundElement::Direction { get:GetDirection set:SetDirection }
    property Shape : presentation::elements::ElementShape { get:GetShape set:SetShape }

    function GetColor1() : presentation::Color;
    function GetColor2() : presentation::Color;
    function GetDirection() : presentation::elements::GuiGradientBackgroundElement::Direction;
    function GetShape() : presentation::elements::ElementShape;
    function SetColor1(value : presentation::Color) : system::Void;
    function SetColor2(value : presentation::Color) : system::Void;
    function SetColors(value1 : presentation::Color, value2 : presentation::Color) : system::Void;
    function SetDirection(value : presentation::elements::GuiGradientBackgroundElement::Direction) : system::Void;
    function SetShape(value : presentation::elements::ElementShape) : system::Void;

    @InvokeTemplate:::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiGradientBackgroundElement>($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiGradientBackgroundElement>)
    constructor () : presentation::elements::GuiGradientBackgroundElement^;
}

@ValueType
enum presentation::elements::GuiGradientBackgroundElement::Direction {
    Backslash = 3,
    Horizontal = 0,
    Slash = 2,
    Vertical = 1,
}

class presentation::elements::GuiImageFrameElement : presentation::elements::IGuiGraphicsElement {
    property Enabled : system::Boolean { get:GetEnabled set:SetEnabled }
    property FrameIndex : system::Int64 { get:GetFrameIndex set:SetFrameIndex }
    property HorizontalAlignment : presentation::Alignment { get:GetHorizontalAlignment set:SetHorizontalAlignment }
    property Image : presentation::INativeImage^ { get:GetImage set:SetImage }
    property Stretch : system::Boolean { get:GetStretch set:SetStretch }
    property VerticalAlignment : presentation::Alignment { get:GetVerticalAlignment set:SetVerticalAlignment }

    function GetEnabled() : system::Boolean;
    function GetFrameIndex() : system::Int64;
    function GetHorizontalAlignment() : presentation::Alignment;
    function GetImage() : presentation::INativeImage^;
    function GetStretch() : system::Boolean;
    function GetVerticalAlignment() : presentation::Alignment;
    function SetEnabled(value : system::Boolean) : system::Void;
    function SetFrameIndex(value : system::Int64) : system::Void;
    function SetHorizontalAlignment(value : presentation::Alignment) : system::Void;
    function SetImage(value : presentation::INativeImage^) : system::Void;
    function SetImage(image : presentation::INativeImage^, frameIndex : system::Int64) : system::Void;
    function SetStretch(value : system::Boolean) : system::Void;
    function SetVerticalAlignment(value : presentation::Alignment) : system::Void;

    @InvokeTemplate:::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiImageFrameElement>($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiImageFrameElement>)
    constructor () : presentation::elements::GuiImageFrameElement^;
}

class presentation::elements::GuiInnerShadowElement : presentation::elements::IGuiGraphicsElement {
    property Color : presentation::Color { get:GetColor set:SetColor }
    property Thickness : system::Int64 { get:GetThickness set:SetThickness }

    function GetColor() : presentation::Color;
    function GetThickness() : system::Int64;
    function SetColor(value : presentation::Color) : system::Void;
    function SetThickness(value : system::Int64) : system::Void;

    @InvokeTemplate:::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiInnerShadowElement>($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiInnerShadowElement>)
    constructor () : presentation::elements::GuiInnerShadowElement^;
}

class presentation::elements::GuiPolygonElement : presentation::elements::IGuiGraphicsElement {
    property BackgroundColor : presentation::Color { get:GetBackgroundColor set:SetBackgroundColor }
    property BorderColor : presentation::Color { get:GetBorderColor set:SetBorderColor }
    property Points : system::ReadonlyList<presentation::Point>^ { get:GetPoints set:SetPoints }
    property Size : presentation::Size { get:GetSize set:SetSize }

    function GetBackgroundColor() : presentation::Color;
    function GetBorderColor() : presentation::Color;
    @InvokeTemplate:$This->GetPointsArray($Arguments)
    @ClosureTemplate:::vl::Func<$Func>($This, &$Type::GetPointsArray)
    function GetPoints() : system::ReadonlyList<presentation::Point>^;
    function GetSize() : presentation::Size;
    function SetBackgroundColor(value : presentation::Color) : system::Void;
    function SetBorderColor(value : presentation::Color) : system::Void;
    @InvokeTemplate:$This->SetPointsArray($Arguments)
    @ClosureTemplate:::vl::Func<$Func>($This, &$Type::SetPointsArray)
    function SetPoints(points : system::ReadonlyList<presentation::Point>^) : system::Void;
    function SetSize(value : presentation::Size) : system::Void;

    @InvokeTemplate:::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiPolygonElement>($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiPolygonElement>)
    constructor () : presentation::elements::GuiPolygonElement^;
}

class presentation::elements::GuiSolidBackgroundElement : presentation::elements::IGuiGraphicsElement {
    property Color : presentation::Color { get:GetColor set:SetColor }
    property Shape : presentation::elements::ElementShape { get:GetShape set:SetShape }

    function GetColor() : presentation::Color;
    function GetShape() : presentation::elements::ElementShape;
    function SetColor(value : presentation::Color) : system::Void;
    function SetShape(value : presentation::elements::ElementShape) : system::Void;

    @InvokeTemplate:::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiSolidBackgroundElement>($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiSolidBackgroundElement>)
    constructor () : presentation::elements::GuiSolidBackgroundElement^;
}

class presentation::elements::GuiSolidBorderElement : presentation::elements::IGuiGraphicsElement {
    property Color : presentation::Color { get:GetColor set:SetColor }
    property Shape : presentation::elements::ElementShape { get:GetShape set:SetShape }

    function GetColor() : presentation::Color;
    function GetShape() : presentation::elements::ElementShape;
    function SetColor(value : presentation::Color) : system::Void;
    function SetShape(value : presentation::elements::ElementShape) : system::Void;

    @InvokeTemplate:::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiSolidBorderElement>($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiSolidBorderElement>)
    constructor () : presentation::elements::GuiSolidBorderElement^;
}

class presentation::elements::GuiSolidLabelElement : presentation::elements::IGuiGraphicsElement {
    property Color : presentation::Color { get:GetColor set:SetColor }
    property Ellipse : system::Boolean { get:GetEllipse set:SetEllipse }
    property Font : presentation::FontProperties { get:GetFont set:SetFont }
    property HorizontalAlignment : presentation::Alignment { get:GetHorizontalAlignment set:SetHorizontalAlignment }
    property Multiline : system::Boolean { get:GetMultiline set:SetMultiline }
    property Text : system::String { get:GetText set:SetText }
    property VerticalAlignment : presentation::Alignment { get:GetVerticalAlignment set:SetVerticalAlignment }
    property WrapLine : system::Boolean { get:GetWrapLine set:SetWrapLine }
    property WrapLineHeightCalculation : system::Boolean { get:GetWrapLineHeightCalculation set:SetWrapLineHeightCalculation }

    function GetColor() : presentation::Color;
    function GetEllipse() : system::Boolean;
    function GetFont() : presentation::FontProperties;
    function GetHorizontalAlignment() : presentation::Alignment;
    function GetMultiline() : system::Boolean;
    function GetText() : system::String;
    function GetVerticalAlignment() : presentation::Alignment;
    function GetWrapLine() : system::Boolean;
    function GetWrapLineHeightCalculation() : system::Boolean;
    function SetAlignments(horizontal : presentation::Alignment, vertical : presentation::Alignment) : system::Void;
    function SetColor(value : presentation::Color) : system::Void;
    function SetEllipse(value : system::Boolean) : system::Void;
    function SetFont(value : presentation::FontProperties) : system::Void;
    function SetHorizontalAlignment(value : presentation::Alignment) : system::Void;
    function SetMultiline(value : system::Boolean) : system::Void;
    function SetText(value : system::String) : system::Void;
    function SetVerticalAlignment(value : presentation::Alignment) : system::Void;
    function SetWrapLine(value : system::Boolean) : system::Void;
    function SetWrapLineHeightCalculation(value : system::Boolean) : system::Void;

    @InvokeTemplate:::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiSolidLabelElement>($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::Element_Constructor<::vl::presentation::elements::GuiSolidLabelElement>)
    constructor () : presentation::elements::GuiSolidLabelElement^;
}

interface presentation::elements::IGuiGraphicsElement : system::Interface {
    property OwnerComposition : presentation::compositions::GuiGraphicsComposition* { get:GetOwnerComposition }

    function GetOwnerComposition() : presentation::compositions::GuiGraphicsComposition*;

}

class presentation::elements::IGuiGraphicsParagraph : system::Interface {
}

@ValueType
enum presentation::elements::IGuiGraphicsParagraph::CaretRelativePosition {
    CaretFirst = 0,
    CaretLast = 1,
    CaretLineFirst = 2,
    CaretLineLast = 3,
    CaretMoveDown = 7,
    CaretMoveLeft = 4,
    CaretMoveRight = 5,
    CaretMoveUp = 6,
}

@ValueType
struct presentation::elements::text::ColorEntry {
    property normal : presentation::elements::text::ColorItem;
    property selectedFocused : presentation::elements::text::ColorItem;
    property selectedUnfocused : presentation::elements::text::ColorItem;
}

@ValueType
struct presentation::elements::text::ColorItem {
    property background : presentation::Color;
    property text : presentation::Color;
}

class presentation::elements::text::TextLines : system::ReferenceType {
    property Count : system::Int64 { get:GetCount }
    property MaxHeight : system::Int64 { get:GetMaxHeight }
    property MaxWidth : system::Int64 { get:GetMaxWidth }
    property PasswordChar : system::Char { get:GetPasswordChar set:SetPasswordChar }
    property RowHeight : system::Int64 { get:GetRowHeight }
    property TabSpaceCount : system::Int64 { get:GetTabSpaceCount set:SetTabSpaceCount }

    function Clear() : system::Void;
    function ClearMeasurement() : system::Void;
    function GetCount() : system::Int64;
    function GetMaxHeight() : system::Int64;
    function GetMaxWidth() : system::Int64;
    function GetPasswordChar() : system::Char;
    function GetPointFromTextPos(pos : presentation::TextPos) : presentation::Point;
    function GetRectFromTextPos(pos : presentation::TextPos) : presentation::Rect;
    function GetRowHeight() : system::Int64;
    function GetRowWidth(row : system::Int64) : system::Int64;
    function GetTabSpaceCount() : system::Int64;
    function GetText() : system::String;
    function GetText(start : presentation::TextPos, end : presentation::TextPos) : system::String;
    function GetTextPosFromPoint(point : presentation::Point) : presentation::TextPos;
    function IsAvailable(pos : presentation::TextPos) : system::Boolean;
    function MeasureRow(row : system::Int64) : system::Void;
    function Modify(start : presentation::TextPos, end : presentation::TextPos, input : system::String) : presentation::TextPos;
    function Normalize(pos : presentation::TextPos) : presentation::TextPos;
    function RemoveLines(start : system::Int64, end : system::Int64) : system::Boolean;
    function SetPasswordChar(value : system::Char) : system::Void;
    function SetTabSpaceCount(value : system::Int64) : system::Void;
    function SetText(value : system::String) : system::Void;

}

class presentation::helper_types::LocalizedStrings : system::ReferenceType {
    static function FirstOrEmpty(formats : system::Enumerable<system::String>^) : system::String;

}

@ValueType
struct presentation::helper_types::SiteValue {
    property column : system::Int64;
    property columnSpan : system::Int64;
    property row : system::Int64;
    property rowSpan : system::Int64;
}

class presentation::templates::GuiButtonTemplate : presentation::templates::GuiControlTemplate {
    event StateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        State,
    }

    property State : presentation::controls::ButtonState { get:GetState set:SetState event:StateChanged }

    function GetState() : presentation::controls::ButtonState;
    function SetState(value : presentation::controls::ButtonState) : system::Void;

    constructor () : presentation::templates::GuiButtonTemplate*;
}

class presentation::templates::GuiComboBoxTemplate : presentation::templates::GuiToolstripButtonTemplate {
    event TextVisibleChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TextVisible,
    }

    property TextVisible : system::Boolean { get:GetTextVisible set:SetTextVisible event:TextVisibleChanged }

    function GetTextVisible() : system::Boolean;
    function SetTextVisible(value : system::Boolean) : system::Void;

    constructor () : presentation::templates::GuiComboBoxTemplate*;
}

class presentation::templates::GuiCommonDatePickerLook : presentation::templates::GuiTemplate {
    event DateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Date,
    }

    property Commands : presentation::controls::IDatePickerCommandExecutor* { get:GetCommands set:SetCommands }
    property Date : system::DateTime { get:GetDate set:SetDate event:DateChanged }
    property DateButtonTemplate : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^ { get:GetDateButtonTemplate set:SetDateButtonTemplate }
    property DateComboBoxTemplate : system::Function<presentation::templates::GuiComboBoxTemplate*, system::Object>^ { get:GetDateComboBoxTemplate set:SetDateComboBoxTemplate }
    property DateLocale : system::Locale { get:GetDateLocale set:SetDateLocale }
    property DateTextListTemplate : system::Function<presentation::templates::GuiTextListTemplate*, system::Object>^ { get:GetDateTextListTemplate set:SetDateTextListTemplate }
    property DayColumns : system::Int64 { get:GetDayColumns }
    property DayRows : system::Int64 { get:GetDayRows }
    property Font : presentation::FontProperties { get:GetFont set:SetFont }
    property MonthCombo : presentation::controls::GuiComboBoxListControl* { get:GetMonthCombo }
    property YearCombo : presentation::controls::GuiComboBoxListControl* { get:GetYearCombo }

    function GetCommands() : presentation::controls::IDatePickerCommandExecutor*;
    function GetDate() : system::DateTime;
    function GetDateButtonTemplate() : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^;
    function GetDateComboBoxTemplate() : system::Function<presentation::templates::GuiComboBoxTemplate*, system::Object>^;
    function GetDateLocale() : system::Locale;
    function GetDateOfDayButton(row : system::Int64, column : system::Int64) : system::DateTime;
    function GetDateTextListTemplate() : system::Function<presentation::templates::GuiTextListTemplate*, system::Object>^;
    function GetDayButton(row : system::Int64, column : system::Int64) : presentation::controls::GuiSelectableButton*;
    function GetDayColumns() : system::Int64;
    function GetDayRows() : system::Int64;
    function GetFont() : presentation::FontProperties;
    function GetMonthCombo() : presentation::controls::GuiComboBoxListControl*;
    function GetYearCombo() : presentation::controls::GuiComboBoxListControl*;
    function SetCommands(value : presentation::controls::IDatePickerCommandExecutor*) : system::Void;
    function SetDate(value : system::DateTime) : system::Void;
    function SetDateButtonTemplate(value : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^) : system::Void;
    function SetDateComboBoxTemplate(value : system::Function<presentation::templates::GuiComboBoxTemplate*, system::Object>^) : system::Void;
    function SetDateLocale(value : system::Locale) : system::Void;
    function SetDateTextListTemplate(value : system::Function<presentation::templates::GuiTextListTemplate*, system::Object>^) : system::Void;
    function SetFont(value : presentation::FontProperties) : system::Void;

    constructor (backgroundColor : presentation::Color, primaryTextColor : presentation::Color, secondaryTextColor : presentation::Color) : presentation::templates::GuiCommonDatePickerLook*;
}

class presentation::templates::GuiCommonScrollBehavior : presentation::controls::GuiComponent {
    function AttachDecreaseButton(button : presentation::controls::GuiButton*) : system::Void;
    function AttachHorizontalScrollHandle(partialView : presentation::compositions::GuiPartialViewComposition*) : system::Void;
    function AttachHorizontalTrackerHandle(partialView : presentation::compositions::GuiPartialViewComposition*) : system::Void;
    function AttachIncreaseButton(button : presentation::controls::GuiButton*) : system::Void;
    function AttachScrollTemplate(value : presentation::templates::GuiScrollTemplate*) : system::Void;
    function AttachVerticalScrollHandle(partialView : presentation::compositions::GuiPartialViewComposition*) : system::Void;
    function AttachVerticalTrackerHandle(partialView : presentation::compositions::GuiPartialViewComposition*) : system::Void;
    function GetHorizontalTrackerHandlerPosition(handle : presentation::compositions::GuiBoundsComposition*, totalSize : system::Int64, pageSize : system::Int64, position : system::Int64) : system::Int64;
    function GetVerticalTrackerHandlerPosition(handle : presentation::compositions::GuiBoundsComposition*, totalSize : system::Int64, pageSize : system::Int64, position : system::Int64) : system::Int64;

    constructor () : presentation::templates::GuiCommonScrollBehavior*;
}

class presentation::templates::GuiCommonScrollViewLook : presentation::templates::GuiTemplate {
    property ContainerComposition : presentation::compositions::GuiGraphicsComposition* { get:GetContainerComposition }
    property HScroll : presentation::controls::GuiScroll* { get:GetHScroll }
    property HScrollTemplate : system::Function<presentation::templates::GuiScrollTemplate*, system::Object>^ { get:GetHScrollTemplate set:SetHScrollTemplate }
    property VScroll : presentation::controls::GuiScroll* { get:GetVScroll }
    property VScrollTemplate : system::Function<presentation::templates::GuiScrollTemplate*, system::Object>^ { get:GetVScrollTemplate set:SetVScrollTemplate }

    function GetContainerComposition() : presentation::compositions::GuiGraphicsComposition*;
    function GetHScroll() : presentation::controls::GuiScroll*;
    function GetHScrollTemplate() : system::Function<presentation::templates::GuiScrollTemplate*, system::Object>^;
    function GetVScroll() : presentation::controls::GuiScroll*;
    function GetVScrollTemplate() : system::Function<presentation::templates::GuiScrollTemplate*, system::Object>^;
    function SetHScrollTemplate(value : system::Function<presentation::templates::GuiScrollTemplate*, system::Object>^) : system::Void;
    function SetVScrollTemplate(value : system::Function<presentation::templates::GuiScrollTemplate*, system::Object>^) : system::Void;

    constructor (defaultScrollSize : system::Int64) : presentation::templates::GuiCommonScrollViewLook*;
}

class presentation::templates::GuiControlTemplate : presentation::templates::GuiTemplate {
    event ContainerCompositionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ContainerComposition,
    }
    event FocusableCompositionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        FocusableComposition,
    }
    event FocusedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Focused,
    }

    property ContainerComposition : presentation::compositions::GuiGraphicsComposition* { get:GetContainerComposition set:SetContainerComposition event:ContainerCompositionChanged }
    property FocusableComposition : presentation::compositions::GuiGraphicsComposition* { get:GetFocusableComposition set:SetFocusableComposition event:FocusableCompositionChanged }
    property Focused : system::Boolean { get:GetFocused set:SetFocused event:FocusedChanged }

    function GetContainerComposition() : presentation::compositions::GuiGraphicsComposition*;
    function GetFocusableComposition() : presentation::compositions::GuiGraphicsComposition*;
    function GetFocused() : system::Boolean;
    function SetContainerComposition(value : presentation::compositions::GuiGraphicsComposition*) : system::Void;
    function SetFocusableComposition(value : presentation::compositions::GuiGraphicsComposition*) : system::Void;
    function SetFocused(value : system::Boolean) : system::Void;

    constructor () : presentation::templates::GuiControlTemplate*;
}

class presentation::templates::GuiDateComboBoxTemplate : presentation::templates::GuiComboBoxTemplate {
    event DatePickerTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        DatePickerTemplate,
    }

    property DatePickerTemplate : system::Function<presentation::templates::GuiDatePickerTemplate*, system::Object>^ { get:GetDatePickerTemplate set:SetDatePickerTemplate event:DatePickerTemplateChanged }

    function GetDatePickerTemplate() : system::Function<presentation::templates::GuiDatePickerTemplate*, system::Object>^;
    function SetDatePickerTemplate(value : system::Function<presentation::templates::GuiDatePickerTemplate*, system::Object>^) : system::Void;

    constructor () : presentation::templates::GuiDateComboBoxTemplate*;
}

class presentation::templates::GuiDatePickerTemplate : presentation::templates::GuiControlTemplate {
    event CommandsChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Commands,
    }
    event DateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Date,
    }
    event DateLocaleChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        DateLocale,
    }

    property Commands : presentation::controls::IDatePickerCommandExecutor* { get:GetCommands set:SetCommands event:CommandsChanged }
    property Date : system::DateTime { get:GetDate set:SetDate event:DateChanged }
    property DateLocale : system::Locale { get:GetDateLocale set:SetDateLocale event:DateLocaleChanged }

    function GetCommands() : presentation::controls::IDatePickerCommandExecutor*;
    function GetDate() : system::DateTime;
    function GetDateLocale() : system::Locale;
    function SetCommands(value : presentation::controls::IDatePickerCommandExecutor*) : system::Void;
    function SetDate(value : system::DateTime) : system::Void;
    function SetDateLocale(value : system::Locale) : system::Void;

    constructor () : presentation::templates::GuiDatePickerTemplate*;
}

class presentation::templates::GuiDocumentLabelTemplate : presentation::templates::GuiControlTemplate {
    event BaselineDocumentChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        BaselineDocument,
    }
    event CaretColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CaretColor,
    }

    property BaselineDocument : presentation::DocumentModel^ { get:GetBaselineDocument set:SetBaselineDocument event:BaselineDocumentChanged }
    property CaretColor : presentation::Color { get:GetCaretColor set:SetCaretColor event:CaretColorChanged }

    function GetBaselineDocument() : presentation::DocumentModel^;
    function GetCaretColor() : presentation::Color;
    function SetBaselineDocument(value : presentation::DocumentModel^) : system::Void;
    function SetCaretColor(value : presentation::Color) : system::Void;

    constructor () : presentation::templates::GuiDocumentLabelTemplate*;
}

class presentation::templates::GuiDocumentViewerTemplate : presentation::templates::GuiScrollViewTemplate {
    event BaselineDocumentChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        BaselineDocument,
    }
    event CaretColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CaretColor,
    }

    property BaselineDocument : presentation::DocumentModel^ { get:GetBaselineDocument set:SetBaselineDocument event:BaselineDocumentChanged }
    property CaretColor : presentation::Color { get:GetCaretColor set:SetCaretColor event:CaretColorChanged }

    function GetBaselineDocument() : presentation::DocumentModel^;
    function GetCaretColor() : presentation::Color;
    function SetBaselineDocument(value : presentation::DocumentModel^) : system::Void;
    function SetCaretColor(value : presentation::Color) : system::Void;

    constructor () : presentation::templates::GuiDocumentViewerTemplate*;
}

class presentation::templates::GuiGridCellTemplate : presentation::templates::GuiControlTemplate {
    event ItemSeparatorColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ItemSeparatorColor,
    }
    event LargeImageChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        LargeImage,
    }
    event PrimaryTextColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        PrimaryTextColor,
    }
    event SecondaryTextColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SecondaryTextColor,
    }
    event SmallImageChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SmallImage,
    }

    property ItemSeparatorColor : presentation::Color { get:GetItemSeparatorColor set:SetItemSeparatorColor event:ItemSeparatorColorChanged }
    property LargeImage : presentation::GuiImageData^ { get:GetLargeImage set:SetLargeImage event:LargeImageChanged }
    property PrimaryTextColor : presentation::Color { get:GetPrimaryTextColor set:SetPrimaryTextColor event:PrimaryTextColorChanged }
    property SecondaryTextColor : presentation::Color { get:GetSecondaryTextColor set:SetSecondaryTextColor event:SecondaryTextColorChanged }
    property SmallImage : presentation::GuiImageData^ { get:GetSmallImage set:SetSmallImage event:SmallImageChanged }

    function GetItemSeparatorColor() : presentation::Color;
    function GetLargeImage() : presentation::GuiImageData^;
    function GetPrimaryTextColor() : presentation::Color;
    function GetSecondaryTextColor() : presentation::Color;
    function GetSmallImage() : presentation::GuiImageData^;
    function SetItemSeparatorColor(value : presentation::Color) : system::Void;
    function SetLargeImage(value : presentation::GuiImageData^) : system::Void;
    function SetPrimaryTextColor(value : presentation::Color) : system::Void;
    function SetSecondaryTextColor(value : presentation::Color) : system::Void;
    function SetSmallImage(value : presentation::GuiImageData^) : system::Void;

    constructor () : presentation::templates::GuiGridCellTemplate*;
}

class presentation::templates::GuiGridEditorTemplate : presentation::templates::GuiGridCellTemplate {
    event CellValueChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CellValue,
    }
    event CellValueSavedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CellValueSaved,
    }
    event FocusControlChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        FocusControl,
    }
    event RowValueChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        RowValue,
    }

    property CellValue : system::Object { get:GetCellValue set:SetCellValue event:CellValueChanged }
    property CellValueSaved : system::Boolean { get:GetCellValueSaved set:SetCellValueSaved event:CellValueSavedChanged }
    property FocusControl : presentation::controls::GuiControl* { get:GetFocusControl set:SetFocusControl event:FocusControlChanged }
    property RowValue : system::Object { get:GetRowValue set:SetRowValue event:RowValueChanged }

    function GetCellValue() : system::Object;
    function GetCellValueSaved() : system::Boolean;
    function GetFocusControl() : presentation::controls::GuiControl*;
    function GetRowValue() : system::Object;
    function SetCellValue(value : system::Object) : system::Void;
    function SetCellValueSaved(value : system::Boolean) : system::Void;
    function SetFocusControl(value : presentation::controls::GuiControl*) : system::Void;
    function SetRowValue(value : system::Object) : system::Void;

    constructor () : presentation::templates::GuiGridEditorTemplate*;
}

class presentation::templates::GuiGridVisualizerTemplate : presentation::templates::GuiGridCellTemplate {
    event CellValueChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CellValue,
    }
    event RowValueChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        RowValue,
    }
    event SelectedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Selected,
    }

    property CellValue : system::Object { get:GetCellValue set:SetCellValue event:CellValueChanged }
    property RowValue : system::Object { get:GetRowValue set:SetRowValue event:RowValueChanged }
    property Selected : system::Boolean { get:GetSelected set:SetSelected event:SelectedChanged }

    function GetCellValue() : system::Object;
    function GetRowValue() : system::Object;
    function GetSelected() : system::Boolean;
    function SetCellValue(value : system::Object) : system::Void;
    function SetRowValue(value : system::Object) : system::Void;
    function SetSelected(value : system::Boolean) : system::Void;

    constructor () : presentation::templates::GuiGridVisualizerTemplate*;
}

class presentation::templates::GuiLabelTemplate : presentation::templates::GuiControlTemplate {
    event DefaultTextColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        DefaultTextColor,
    }
    event TextColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TextColor,
    }

    property DefaultTextColor : presentation::Color { get:GetDefaultTextColor set:SetDefaultTextColor event:DefaultTextColorChanged }
    property TextColor : presentation::Color { get:GetTextColor set:SetTextColor event:TextColorChanged }

    function GetDefaultTextColor() : presentation::Color;
    function GetTextColor() : presentation::Color;
    function SetDefaultTextColor(value : presentation::Color) : system::Void;
    function SetTextColor(value : presentation::Color) : system::Void;

    constructor () : presentation::templates::GuiLabelTemplate*;
}

class presentation::templates::GuiListControlTemplate : presentation::templates::GuiScrollViewTemplate {
    event BackgroundTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        BackgroundTemplate,
    }

    property BackgroundTemplate : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^ { get:GetBackgroundTemplate set:SetBackgroundTemplate event:BackgroundTemplateChanged }

    function GetBackgroundTemplate() : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^;
    function SetBackgroundTemplate(value : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^) : system::Void;

    constructor () : presentation::templates::GuiListControlTemplate*;
}

class presentation::templates::GuiListItemTemplate : presentation::templates::GuiTemplate {
    event AssociatedListControlChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        AssociatedListControl,
    }
    event IndexChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Index,
    }
    event SelectedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Selected,
    }

    property AssociatedListControl : presentation::controls::GuiListControl* { get:GetAssociatedListControl set:SetAssociatedListControl event:AssociatedListControlChanged }
    property Index : system::Int64 { get:GetIndex set:SetIndex event:IndexChanged }
    property Selected : system::Boolean { get:GetSelected set:SetSelected event:SelectedChanged }

    function GetAssociatedListControl() : presentation::controls::GuiListControl*;
    function GetIndex() : system::Int64;
    function GetSelected() : system::Boolean;
    function SetAssociatedListControl(value : presentation::controls::GuiListControl*) : system::Void;
    function SetIndex(value : system::Int64) : system::Void;
    function SetSelected(value : system::Boolean) : system::Void;

    constructor () : presentation::templates::GuiListItemTemplate*;
}

class presentation::templates::GuiListViewColumnHeaderTemplate : presentation::templates::GuiToolstripButtonTemplate {
    event SortingStateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SortingState,
    }

    property SortingState : presentation::controls::ColumnSortingState { get:GetSortingState set:SetSortingState event:SortingStateChanged }

    function GetSortingState() : presentation::controls::ColumnSortingState;
    function SetSortingState(value : presentation::controls::ColumnSortingState) : system::Void;

    constructor () : presentation::templates::GuiListViewColumnHeaderTemplate*;
}

class presentation::templates::GuiListViewTemplate : presentation::templates::GuiListControlTemplate {
    event ColumnHeaderTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ColumnHeaderTemplate,
    }
    event ItemSeparatorColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ItemSeparatorColor,
    }
    event PrimaryTextColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        PrimaryTextColor,
    }
    event SecondaryTextColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SecondaryTextColor,
    }

    property ColumnHeaderTemplate : system::Function<presentation::templates::GuiListViewColumnHeaderTemplate*, system::Object>^ { get:GetColumnHeaderTemplate set:SetColumnHeaderTemplate event:ColumnHeaderTemplateChanged }
    property ItemSeparatorColor : presentation::Color { get:GetItemSeparatorColor set:SetItemSeparatorColor event:ItemSeparatorColorChanged }
    property PrimaryTextColor : presentation::Color { get:GetPrimaryTextColor set:SetPrimaryTextColor event:PrimaryTextColorChanged }
    property SecondaryTextColor : presentation::Color { get:GetSecondaryTextColor set:SetSecondaryTextColor event:SecondaryTextColorChanged }

    function GetColumnHeaderTemplate() : system::Function<presentation::templates::GuiListViewColumnHeaderTemplate*, system::Object>^;
    function GetItemSeparatorColor() : presentation::Color;
    function GetPrimaryTextColor() : presentation::Color;
    function GetSecondaryTextColor() : presentation::Color;
    function SetColumnHeaderTemplate(value : system::Function<presentation::templates::GuiListViewColumnHeaderTemplate*, system::Object>^) : system::Void;
    function SetItemSeparatorColor(value : presentation::Color) : system::Void;
    function SetPrimaryTextColor(value : presentation::Color) : system::Void;
    function SetSecondaryTextColor(value : presentation::Color) : system::Void;

    constructor () : presentation::templates::GuiListViewTemplate*;
}

class presentation::templates::GuiMenuTemplate : presentation::templates::GuiWindowTemplate {
    constructor () : presentation::templates::GuiMenuTemplate*;
}

class presentation::templates::GuiMultilineTextBoxTemplate : presentation::templates::GuiScrollViewTemplate {
    event CaretColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CaretColor,
    }
    event CommandsChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Commands,
    }
    event TextColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TextColor,
    }

    property CaretColor : presentation::Color { get:GetCaretColor set:SetCaretColor event:CaretColorChanged }
    property Commands : presentation::controls::ITextBoxCommandExecutor* { get:GetCommands set:SetCommands event:CommandsChanged }
    property TextColor : presentation::elements::text::ColorEntry { get:GetTextColor set:SetTextColor event:TextColorChanged }

    function GetCaretColor() : presentation::Color;
    function GetCommands() : presentation::controls::ITextBoxCommandExecutor*;
    function GetTextColor() : presentation::elements::text::ColorEntry;
    function SetCaretColor(value : presentation::Color) : system::Void;
    function SetCommands(value : presentation::controls::ITextBoxCommandExecutor*) : system::Void;
    function SetTextColor(value : presentation::elements::text::ColorEntry) : system::Void;

    constructor () : presentation::templates::GuiMultilineTextBoxTemplate*;
}

class presentation::templates::GuiRibbonButtonsTemplate : presentation::templates::GuiControlTemplate {
    event IconButtonTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        IconButtonTemplate,
    }
    event IconDropdownButtonTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        IconDropdownButtonTemplate,
    }
    event IconLabelTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        IconLabelTemplate,
    }
    event IconSplitButtonTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        IconSplitButtonTemplate,
    }
    event LargeButtonTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        LargeButtonTemplate,
    }
    event LargeDropdownButtonTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        LargeDropdownButtonTemplate,
    }
    event LargeSplitButtonTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        LargeSplitButtonTemplate,
    }
    event SmallButtonTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SmallButtonTemplate,
    }
    event SmallDropdownButtonTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SmallDropdownButtonTemplate,
    }
    event SmallIconLabelTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SmallIconLabelTemplate,
    }
    event SmallSplitButtonTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SmallSplitButtonTemplate,
    }

    property IconButtonTemplate : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^ { get:GetIconButtonTemplate set:SetIconButtonTemplate event:IconButtonTemplateChanged }
    property IconDropdownButtonTemplate : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^ { get:GetIconDropdownButtonTemplate set:SetIconDropdownButtonTemplate event:IconDropdownButtonTemplateChanged }
    property IconLabelTemplate : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^ { get:GetIconLabelTemplate set:SetIconLabelTemplate event:IconLabelTemplateChanged }
    property IconSplitButtonTemplate : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^ { get:GetIconSplitButtonTemplate set:SetIconSplitButtonTemplate event:IconSplitButtonTemplateChanged }
    property LargeButtonTemplate : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^ { get:GetLargeButtonTemplate set:SetLargeButtonTemplate event:LargeButtonTemplateChanged }
    property LargeDropdownButtonTemplate : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^ { get:GetLargeDropdownButtonTemplate set:SetLargeDropdownButtonTemplate event:LargeDropdownButtonTemplateChanged }
    property LargeSplitButtonTemplate : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^ { get:GetLargeSplitButtonTemplate set:SetLargeSplitButtonTemplate event:LargeSplitButtonTemplateChanged }
    property SmallButtonTemplate : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^ { get:GetSmallButtonTemplate set:SetSmallButtonTemplate event:SmallButtonTemplateChanged }
    property SmallDropdownButtonTemplate : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^ { get:GetSmallDropdownButtonTemplate set:SetSmallDropdownButtonTemplate event:SmallDropdownButtonTemplateChanged }
    property SmallIconLabelTemplate : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^ { get:GetSmallIconLabelTemplate set:SetSmallIconLabelTemplate event:SmallIconLabelTemplateChanged }
    property SmallSplitButtonTemplate : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^ { get:GetSmallSplitButtonTemplate set:SetSmallSplitButtonTemplate event:SmallSplitButtonTemplateChanged }

    function GetIconButtonTemplate() : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    function GetIconDropdownButtonTemplate() : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    function GetIconLabelTemplate() : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    function GetIconSplitButtonTemplate() : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    function GetLargeButtonTemplate() : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    function GetLargeDropdownButtonTemplate() : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    function GetLargeSplitButtonTemplate() : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    function GetSmallButtonTemplate() : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    function GetSmallDropdownButtonTemplate() : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    function GetSmallIconLabelTemplate() : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    function GetSmallSplitButtonTemplate() : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    function SetIconButtonTemplate(value : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^) : system::Void;
    function SetIconDropdownButtonTemplate(value : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^) : system::Void;
    function SetIconLabelTemplate(value : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^) : system::Void;
    function SetIconSplitButtonTemplate(value : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^) : system::Void;
    function SetLargeButtonTemplate(value : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^) : system::Void;
    function SetLargeDropdownButtonTemplate(value : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^) : system::Void;
    function SetLargeSplitButtonTemplate(value : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^) : system::Void;
    function SetSmallButtonTemplate(value : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^) : system::Void;
    function SetSmallDropdownButtonTemplate(value : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^) : system::Void;
    function SetSmallIconLabelTemplate(value : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^) : system::Void;
    function SetSmallSplitButtonTemplate(value : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^) : system::Void;

    constructor () : presentation::templates::GuiRibbonButtonsTemplate*;
}

class presentation::templates::GuiRibbonGalleryListTemplate : presentation::templates::GuiRibbonGalleryTemplate {
    event BackgroundTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        BackgroundTemplate,
    }
    event GroupContainerTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        GroupContainerTemplate,
    }
    event HeaderTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        HeaderTemplate,
    }
    event ItemListTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ItemListTemplate,
    }
    event MenuTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        MenuTemplate,
    }

    property BackgroundTemplate : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^ { get:GetBackgroundTemplate set:SetBackgroundTemplate event:BackgroundTemplateChanged }
    property GroupContainerTemplate : system::Function<presentation::templates::GuiScrollViewTemplate*, system::Object>^ { get:GetGroupContainerTemplate set:SetGroupContainerTemplate event:GroupContainerTemplateChanged }
    property HeaderTemplate : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^ { get:GetHeaderTemplate set:SetHeaderTemplate event:HeaderTemplateChanged }
    property ItemListTemplate : system::Function<presentation::templates::GuiTextListTemplate*, system::Object>^ { get:GetItemListTemplate set:SetItemListTemplate event:ItemListTemplateChanged }
    property MenuTemplate : system::Function<presentation::templates::GuiRibbonToolstripMenuTemplate*, system::Object>^ { get:GetMenuTemplate set:SetMenuTemplate event:MenuTemplateChanged }

    function GetBackgroundTemplate() : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^;
    function GetGroupContainerTemplate() : system::Function<presentation::templates::GuiScrollViewTemplate*, system::Object>^;
    function GetHeaderTemplate() : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    function GetItemListTemplate() : system::Function<presentation::templates::GuiTextListTemplate*, system::Object>^;
    function GetMenuTemplate() : system::Function<presentation::templates::GuiRibbonToolstripMenuTemplate*, system::Object>^;
    function SetBackgroundTemplate(value : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^) : system::Void;
    function SetGroupContainerTemplate(value : system::Function<presentation::templates::GuiScrollViewTemplate*, system::Object>^) : system::Void;
    function SetHeaderTemplate(value : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^) : system::Void;
    function SetItemListTemplate(value : system::Function<presentation::templates::GuiTextListTemplate*, system::Object>^) : system::Void;
    function SetMenuTemplate(value : system::Function<presentation::templates::GuiRibbonToolstripMenuTemplate*, system::Object>^) : system::Void;

    constructor () : presentation::templates::GuiRibbonGalleryListTemplate*;
}

class presentation::templates::GuiRibbonGalleryTemplate : presentation::templates::GuiControlTemplate {
    event CommandsChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Commands,
    }
    event ScrollDownEnabledChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ScrollDownEnabled,
    }
    event ScrollUpEnabledChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ScrollUpEnabled,
    }

    property Commands : presentation::controls::IRibbonGalleryCommandExecutor* { get:GetCommands set:SetCommands event:CommandsChanged }
    property ScrollDownEnabled : system::Boolean { get:GetScrollDownEnabled set:SetScrollDownEnabled event:ScrollDownEnabledChanged }
    property ScrollUpEnabled : system::Boolean { get:GetScrollUpEnabled set:SetScrollUpEnabled event:ScrollUpEnabledChanged }

    function GetCommands() : presentation::controls::IRibbonGalleryCommandExecutor*;
    function GetScrollDownEnabled() : system::Boolean;
    function GetScrollUpEnabled() : system::Boolean;
    function SetCommands(value : presentation::controls::IRibbonGalleryCommandExecutor*) : system::Void;
    function SetScrollDownEnabled(value : system::Boolean) : system::Void;
    function SetScrollUpEnabled(value : system::Boolean) : system::Void;

    constructor () : presentation::templates::GuiRibbonGalleryTemplate*;
}

class presentation::templates::GuiRibbonGroupMenuTemplate : presentation::templates::GuiMenuTemplate {
    event CommandsChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Commands,
    }
    event ExpandableChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Expandable,
    }

    property Commands : presentation::controls::IRibbonGroupCommandExecutor* { get:GetCommands set:SetCommands event:CommandsChanged }
    property Expandable : system::Boolean { get:GetExpandable set:SetExpandable event:ExpandableChanged }

    function GetCommands() : presentation::controls::IRibbonGroupCommandExecutor*;
    function GetExpandable() : system::Boolean;
    function SetCommands(value : presentation::controls::IRibbonGroupCommandExecutor*) : system::Void;
    function SetExpandable(value : system::Boolean) : system::Void;

    constructor () : presentation::templates::GuiRibbonGroupMenuTemplate*;
}

class presentation::templates::GuiRibbonGroupTemplate : presentation::templates::GuiControlTemplate {
    event CollapsedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Collapsed,
    }
    event CommandsChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Commands,
    }
    event ExpandableChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Expandable,
    }
    event LargeDropdownButtonTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        LargeDropdownButtonTemplate,
    }
    event SubMenuTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SubMenuTemplate,
    }

    property Collapsed : system::Boolean { get:GetCollapsed set:SetCollapsed event:CollapsedChanged }
    property Commands : presentation::controls::IRibbonGroupCommandExecutor* { get:GetCommands set:SetCommands event:CommandsChanged }
    property Expandable : system::Boolean { get:GetExpandable set:SetExpandable event:ExpandableChanged }
    property LargeDropdownButtonTemplate : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^ { get:GetLargeDropdownButtonTemplate set:SetLargeDropdownButtonTemplate event:LargeDropdownButtonTemplateChanged }
    property SubMenuTemplate : system::Function<presentation::templates::GuiRibbonGroupMenuTemplate*, system::Object>^ { get:GetSubMenuTemplate set:SetSubMenuTemplate event:SubMenuTemplateChanged }

    function GetCollapsed() : system::Boolean;
    function GetCommands() : presentation::controls::IRibbonGroupCommandExecutor*;
    function GetExpandable() : system::Boolean;
    function GetLargeDropdownButtonTemplate() : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    function GetSubMenuTemplate() : system::Function<presentation::templates::GuiRibbonGroupMenuTemplate*, system::Object>^;
    function SetCollapsed(value : system::Boolean) : system::Void;
    function SetCommands(value : presentation::controls::IRibbonGroupCommandExecutor*) : system::Void;
    function SetExpandable(value : system::Boolean) : system::Void;
    function SetLargeDropdownButtonTemplate(value : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^) : system::Void;
    function SetSubMenuTemplate(value : system::Function<presentation::templates::GuiRibbonGroupMenuTemplate*, system::Object>^) : system::Void;

    constructor () : presentation::templates::GuiRibbonGroupTemplate*;
}

class presentation::templates::GuiRibbonIconLabelTemplate : presentation::templates::GuiControlTemplate {
    event ImageChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Image,
    }

    property Image : presentation::GuiImageData^ { get:GetImage set:SetImage event:ImageChanged }

    function GetImage() : presentation::GuiImageData^;
    function SetImage(value : presentation::GuiImageData^) : system::Void;

    constructor () : presentation::templates::GuiRibbonIconLabelTemplate*;
}

class presentation::templates::GuiRibbonTabTemplate : presentation::templates::GuiTabTemplate {
    event AfterHeadersContainerChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        AfterHeadersContainer,
    }
    event BeforeHeadersContainerChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        BeforeHeadersContainer,
    }

    property AfterHeadersContainer : presentation::compositions::GuiGraphicsComposition* { get:GetAfterHeadersContainer set:SetAfterHeadersContainer event:AfterHeadersContainerChanged }
    property BeforeHeadersContainer : presentation::compositions::GuiGraphicsComposition* { get:GetBeforeHeadersContainer set:SetBeforeHeadersContainer event:BeforeHeadersContainerChanged }

    function GetAfterHeadersContainer() : presentation::compositions::GuiGraphicsComposition*;
    function GetBeforeHeadersContainer() : presentation::compositions::GuiGraphicsComposition*;
    function SetAfterHeadersContainer(value : presentation::compositions::GuiGraphicsComposition*) : system::Void;
    function SetBeforeHeadersContainer(value : presentation::compositions::GuiGraphicsComposition*) : system::Void;

    constructor () : presentation::templates::GuiRibbonTabTemplate*;
}

class presentation::templates::GuiRibbonToolstripMenuTemplate : presentation::templates::GuiMenuTemplate {
    event ContentCompositionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ContentComposition,
    }

    property ContentComposition : presentation::compositions::GuiGraphicsComposition* { get:GetContentComposition set:SetContentComposition event:ContentCompositionChanged }

    function GetContentComposition() : presentation::compositions::GuiGraphicsComposition*;
    function SetContentComposition(value : presentation::compositions::GuiGraphicsComposition*) : system::Void;

    constructor () : presentation::templates::GuiRibbonToolstripMenuTemplate*;
}

class presentation::templates::GuiRibbonToolstripsTemplate : presentation::templates::GuiControlTemplate {
    event ToolbarTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ToolbarTemplate,
    }

    property ToolbarTemplate : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^ { get:GetToolbarTemplate set:SetToolbarTemplate event:ToolbarTemplateChanged }

    function GetToolbarTemplate() : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    function SetToolbarTemplate(value : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^) : system::Void;

    constructor () : presentation::templates::GuiRibbonToolstripsTemplate*;
}

class presentation::templates::GuiScrollTemplate : presentation::templates::GuiControlTemplate {
    event CommandsChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Commands,
    }
    event PageSizeChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        PageSize,
    }
    event PositionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Position,
    }
    event TotalSizeChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TotalSize,
    }

    property Commands : presentation::controls::IScrollCommandExecutor* { get:GetCommands set:SetCommands event:CommandsChanged }
    property PageSize : system::Int64 { get:GetPageSize set:SetPageSize event:PageSizeChanged }
    property Position : system::Int64 { get:GetPosition set:SetPosition event:PositionChanged }
    property TotalSize : system::Int64 { get:GetTotalSize set:SetTotalSize event:TotalSizeChanged }

    function GetCommands() : presentation::controls::IScrollCommandExecutor*;
    function GetPageSize() : system::Int64;
    function GetPosition() : system::Int64;
    function GetTotalSize() : system::Int64;
    function SetCommands(value : presentation::controls::IScrollCommandExecutor*) : system::Void;
    function SetPageSize(value : system::Int64) : system::Void;
    function SetPosition(value : system::Int64) : system::Void;
    function SetTotalSize(value : system::Int64) : system::Void;

    constructor () : presentation::templates::GuiScrollTemplate*;
}

class presentation::templates::GuiScrollViewTemplate : presentation::templates::GuiControlTemplate {
    event HorizontalScrollChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        HorizontalScroll,
    }
    event VerticalScrollChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        VerticalScroll,
    }

    property HorizontalScroll : presentation::controls::GuiScroll* { get:GetHorizontalScroll set:SetHorizontalScroll event:HorizontalScrollChanged }
    property VerticalScroll : presentation::controls::GuiScroll* { get:GetVerticalScroll set:SetVerticalScroll event:VerticalScrollChanged }

    function GetHorizontalScroll() : presentation::controls::GuiScroll*;
    function GetVerticalScroll() : presentation::controls::GuiScroll*;
    function SetHorizontalScroll(value : presentation::controls::GuiScroll*) : system::Void;
    function SetVerticalScroll(value : presentation::controls::GuiScroll*) : system::Void;

    constructor () : presentation::templates::GuiScrollViewTemplate*;
}

class presentation::templates::GuiSelectableButtonTemplate : presentation::templates::GuiButtonTemplate {
    event SelectedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Selected,
    }

    property Selected : system::Boolean { get:GetSelected set:SetSelected event:SelectedChanged }

    function GetSelected() : system::Boolean;
    function SetSelected(value : system::Boolean) : system::Void;

    constructor () : presentation::templates::GuiSelectableButtonTemplate*;
}

class presentation::templates::GuiSinglelineTextBoxTemplate : presentation::templates::GuiControlTemplate {
    event CaretColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CaretColor,
    }
    event TextColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TextColor,
    }

    property CaretColor : presentation::Color { get:GetCaretColor set:SetCaretColor event:CaretColorChanged }
    property TextColor : presentation::elements::text::ColorEntry { get:GetTextColor set:SetTextColor event:TextColorChanged }

    function GetCaretColor() : presentation::Color;
    function GetTextColor() : presentation::elements::text::ColorEntry;
    function SetCaretColor(value : presentation::Color) : system::Void;
    function SetTextColor(value : presentation::elements::text::ColorEntry) : system::Void;

    constructor () : presentation::templates::GuiSinglelineTextBoxTemplate*;
}

class presentation::templates::GuiTabTemplate : presentation::templates::GuiControlTemplate {
    event CommandsChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Commands,
    }
    event SelectedTabPageChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SelectedTabPage,
    }
    event TabOrderChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TabOrder,
    }
    event TabPagesChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TabPages,
    }

    property Commands : presentation::controls::ITabCommandExecutor* { get:GetCommands set:SetCommands event:CommandsChanged }
    property SelectedTabPage : presentation::controls::GuiTabPage* { get:GetSelectedTabPage set:SetSelectedTabPage event:SelectedTabPageChanged }
    property TabOrder : presentation::controls::TabPageOrder { get:GetTabOrder set:SetTabOrder event:TabOrderChanged }
    property TabPages : system::ObservableList^ { get:GetTabPages set:SetTabPages event:TabPagesChanged }

    function GetCommands() : presentation::controls::ITabCommandExecutor*;
    function GetSelectedTabPage() : presentation::controls::GuiTabPage*;
    function GetTabOrder() : presentation::controls::TabPageOrder;
    function GetTabPages() : system::ObservableList^;
    function SetCommands(value : presentation::controls::ITabCommandExecutor*) : system::Void;
    function SetSelectedTabPage(value : presentation::controls::GuiTabPage*) : system::Void;
    function SetTabOrder(value : presentation::controls::TabPageOrder) : system::Void;
    function SetTabPages(value : system::ObservableList^) : system::Void;

    constructor () : presentation::templates::GuiTabTemplate*;
}

class presentation::templates::GuiTemplate : presentation::compositions::GuiBoundsComposition, presentation::controls::GuiInstanceRootObject {
    event ContextChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Context,
    }
    event FontChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Font,
    }
    event TextChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Text,
    }
    event VisuallyEnabledChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        VisuallyEnabled,
    }

    property Context : system::Object { get:GetContext set:SetContext event:ContextChanged }
    property Font : presentation::FontProperties { get:GetFont set:SetFont event:FontChanged }
    property Text : system::String { get:GetText set:SetText event:TextChanged }
    property VisuallyEnabled : system::Boolean { get:GetVisuallyEnabled set:SetVisuallyEnabled event:VisuallyEnabledChanged }

    function GetContext() : system::Object;
    function GetFont() : presentation::FontProperties;
    function GetText() : system::String;
    function GetVisuallyEnabled() : system::Boolean;
    function SetContext(value : system::Object) : system::Void;
    function SetFont(value : presentation::FontProperties) : system::Void;
    function SetText(value : system::String) : system::Void;
    function SetVisuallyEnabled(value : system::Boolean) : system::Void;

    constructor () : presentation::templates::GuiTemplate*;
}

class presentation::templates::GuiTextListItemTemplate : presentation::templates::GuiListItemTemplate {
    event CheckedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Checked,
    }
    event TextColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TextColor,
    }

    property Checked : system::Boolean { get:GetChecked set:SetChecked event:CheckedChanged }
    property TextColor : presentation::Color { get:GetTextColor set:SetTextColor event:TextColorChanged }

    function GetChecked() : system::Boolean;
    function GetTextColor() : presentation::Color;
    function SetChecked(value : system::Boolean) : system::Void;
    function SetTextColor(value : presentation::Color) : system::Void;

    constructor () : presentation::templates::GuiTextListItemTemplate*;
}

class presentation::templates::GuiTextListTemplate : presentation::templates::GuiListControlTemplate {
    event CheckBulletTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CheckBulletTemplate,
    }
    event RadioBulletTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        RadioBulletTemplate,
    }
    event TextColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TextColor,
    }

    property CheckBulletTemplate : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^ { get:GetCheckBulletTemplate set:SetCheckBulletTemplate event:CheckBulletTemplateChanged }
    property RadioBulletTemplate : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^ { get:GetRadioBulletTemplate set:SetRadioBulletTemplate event:RadioBulletTemplateChanged }
    property TextColor : presentation::Color { get:GetTextColor set:SetTextColor event:TextColorChanged }

    function GetCheckBulletTemplate() : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^;
    function GetRadioBulletTemplate() : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^;
    function GetTextColor() : presentation::Color;
    function SetCheckBulletTemplate(value : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^) : system::Void;
    function SetRadioBulletTemplate(value : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^) : system::Void;
    function SetTextColor(value : presentation::Color) : system::Void;

    constructor () : presentation::templates::GuiTextListTemplate*;
}

class presentation::templates::GuiToolstripButtonTemplate : presentation::templates::GuiSelectableButtonTemplate {
    event ImageChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Image,
    }
    event LargeImageChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        LargeImage,
    }
    event ShortcutTextChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ShortcutText,
    }
    event SubMenuExistingChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SubMenuExisting,
    }
    event SubMenuHostChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SubMenuHost,
    }
    event SubMenuOpeningChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SubMenuOpening,
    }
    event SubMenuTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SubMenuTemplate,
    }

    property Image : presentation::GuiImageData^ { get:GetImage set:SetImage event:ImageChanged }
    property LargeImage : presentation::GuiImageData^ { get:GetLargeImage set:SetLargeImage event:LargeImageChanged }
    property ShortcutText : system::String { get:GetShortcutText set:SetShortcutText event:ShortcutTextChanged }
    property SubMenuExisting : system::Boolean { get:GetSubMenuExisting set:SetSubMenuExisting event:SubMenuExistingChanged }
    property SubMenuHost : presentation::controls::GuiButton* { get:GetSubMenuHost set:SetSubMenuHost event:SubMenuHostChanged }
    property SubMenuOpening : system::Boolean { get:GetSubMenuOpening set:SetSubMenuOpening event:SubMenuOpeningChanged }
    property SubMenuTemplate : system::Function<presentation::templates::GuiMenuTemplate*, system::Object>^ { get:GetSubMenuTemplate set:SetSubMenuTemplate event:SubMenuTemplateChanged }

    function GetImage() : presentation::GuiImageData^;
    function GetLargeImage() : presentation::GuiImageData^;
    function GetShortcutText() : system::String;
    function GetSubMenuExisting() : system::Boolean;
    function GetSubMenuHost() : presentation::controls::GuiButton*;
    function GetSubMenuOpening() : system::Boolean;
    function GetSubMenuTemplate() : system::Function<presentation::templates::GuiMenuTemplate*, system::Object>^;
    function SetImage(value : presentation::GuiImageData^) : system::Void;
    function SetLargeImage(value : presentation::GuiImageData^) : system::Void;
    function SetShortcutText(value : system::String) : system::Void;
    function SetSubMenuExisting(value : system::Boolean) : system::Void;
    function SetSubMenuHost(value : presentation::controls::GuiButton*) : system::Void;
    function SetSubMenuOpening(value : system::Boolean) : system::Void;
    function SetSubMenuTemplate(value : system::Function<presentation::templates::GuiMenuTemplate*, system::Object>^) : system::Void;

    constructor () : presentation::templates::GuiToolstripButtonTemplate*;
}

class presentation::templates::GuiTreeItemTemplate : presentation::templates::GuiListItemTemplate {
    event ExpandableChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Expandable,
    }
    event ExpandingChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Expanding,
    }
    event ImageChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Image,
    }
    event LevelChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Level,
    }
    event TextColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TextColor,
    }

    property Expandable : system::Boolean { get:GetExpandable set:SetExpandable event:ExpandableChanged }
    property Expanding : system::Boolean { get:GetExpanding set:SetExpanding event:ExpandingChanged }
    property Image : presentation::GuiImageData^ { get:GetImage set:SetImage event:ImageChanged }
    property Level : system::Int64 { get:GetLevel set:SetLevel event:LevelChanged }
    property TextColor : presentation::Color { get:GetTextColor set:SetTextColor event:TextColorChanged }

    function GetExpandable() : system::Boolean;
    function GetExpanding() : system::Boolean;
    function GetImage() : presentation::GuiImageData^;
    function GetLevel() : system::Int64;
    function GetTextColor() : presentation::Color;
    function SetExpandable(value : system::Boolean) : system::Void;
    function SetExpanding(value : system::Boolean) : system::Void;
    function SetImage(value : presentation::GuiImageData^) : system::Void;
    function SetLevel(value : system::Int64) : system::Void;
    function SetTextColor(value : presentation::Color) : system::Void;

    constructor () : presentation::templates::GuiTreeItemTemplate*;
}

class presentation::templates::GuiTreeViewTemplate : presentation::templates::GuiListControlTemplate {
    event ExpandingDecoratorTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ExpandingDecoratorTemplate,
    }
    event TextColorChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TextColor,
    }

    property ExpandingDecoratorTemplate : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^ { get:GetExpandingDecoratorTemplate set:SetExpandingDecoratorTemplate event:ExpandingDecoratorTemplateChanged }
    property TextColor : presentation::Color { get:GetTextColor set:SetTextColor event:TextColorChanged }

    function GetExpandingDecoratorTemplate() : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^;
    function GetTextColor() : presentation::Color;
    function SetExpandingDecoratorTemplate(value : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^) : system::Void;
    function SetTextColor(value : presentation::Color) : system::Void;

    constructor () : presentation::templates::GuiTreeViewTemplate*;
}

class presentation::templates::GuiWindowTemplate : presentation::templates::GuiControlTemplate {
    event ActivatedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Activated,
    }
    event BorderChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Border,
    }
    event BorderOptionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        BorderOption,
    }
    event CustomFrameEnabledChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CustomFrameEnabled,
    }
    event CustomFramePaddingChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        CustomFramePadding,
    }
    event IconChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Icon,
    }
    event IconVisibleChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        IconVisible,
    }
    event IconVisibleOptionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        IconVisibleOption,
    }
    event MaximizedBoxChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        MaximizedBox,
    }
    event MaximizedBoxOptionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        MaximizedBoxOption,
    }
    event MaximizedChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        Maximized,
    }
    event MinimizedBoxChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        MinimizedBox,
    }
    event MinimizedBoxOptionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        MinimizedBoxOption,
    }
    event ShortcutKeyTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        ShortcutKeyTemplate,
    }
    event SizeBoxChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SizeBox,
    }
    event SizeBoxOptionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        SizeBoxOption,
    }
    event TitleBarChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TitleBar,
    }
    event TitleBarOptionChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TitleBarOption,
    }
    event TooltipTemplateChanged : system::Function<system::Void, presentation::compositions::GuiGraphicsComposition*, presentation::compositions::GuiEventArgs*>^ observing {
        TooltipTemplate,
    }

    property Activated : system::Boolean { get:GetActivated set:SetActivated event:ActivatedChanged }
    property Border : system::Boolean { get:GetBorder set:SetBorder event:BorderChanged }
    property BorderOption : presentation::BoolOption { get:GetBorderOption set:SetBorderOption event:BorderOptionChanged }
    property CustomFrameEnabled : system::Boolean { get:GetCustomFrameEnabled set:SetCustomFrameEnabled event:CustomFrameEnabledChanged }
    property CustomFramePadding : presentation::Margin { get:GetCustomFramePadding set:SetCustomFramePadding event:CustomFramePaddingChanged }
    property Icon : presentation::GuiImageData^ { get:GetIcon set:SetIcon event:IconChanged }
    property IconVisible : system::Boolean { get:GetIconVisible set:SetIconVisible event:IconVisibleChanged }
    property IconVisibleOption : presentation::BoolOption { get:GetIconVisibleOption set:SetIconVisibleOption event:IconVisibleOptionChanged }
    property Maximized : system::Boolean { get:GetMaximized set:SetMaximized event:MaximizedChanged }
    property MaximizedBox : system::Boolean { get:GetMaximizedBox set:SetMaximizedBox event:MaximizedBoxChanged }
    property MaximizedBoxOption : presentation::BoolOption { get:GetMaximizedBoxOption set:SetMaximizedBoxOption event:MaximizedBoxOptionChanged }
    property MinimizedBox : system::Boolean { get:GetMinimizedBox set:SetMinimizedBox event:MinimizedBoxChanged }
    property MinimizedBoxOption : presentation::BoolOption { get:GetMinimizedBoxOption set:SetMinimizedBoxOption event:MinimizedBoxOptionChanged }
    property ShortcutKeyTemplate : system::Function<presentation::templates::GuiLabelTemplate*, system::Object>^ { get:GetShortcutKeyTemplate set:SetShortcutKeyTemplate event:ShortcutKeyTemplateChanged }
    property SizeBox : system::Boolean { get:GetSizeBox set:SetSizeBox event:SizeBoxChanged }
    property SizeBoxOption : presentation::BoolOption { get:GetSizeBoxOption set:SetSizeBoxOption event:SizeBoxOptionChanged }
    property TitleBar : system::Boolean { get:GetTitleBar set:SetTitleBar event:TitleBarChanged }
    property TitleBarOption : presentation::BoolOption { get:GetTitleBarOption set:SetTitleBarOption event:TitleBarOptionChanged }
    property TooltipTemplate : system::Function<presentation::templates::GuiWindowTemplate*, system::Object>^ { get:GetTooltipTemplate set:SetTooltipTemplate event:TooltipTemplateChanged }

    function GetActivated() : system::Boolean;
    function GetBorder() : system::Boolean;
    function GetBorderOption() : presentation::BoolOption;
    function GetCustomFrameEnabled() : system::Boolean;
    function GetCustomFramePadding() : presentation::Margin;
    function GetIcon() : presentation::GuiImageData^;
    function GetIconVisible() : system::Boolean;
    function GetIconVisibleOption() : presentation::BoolOption;
    function GetMaximized() : system::Boolean;
    function GetMaximizedBox() : system::Boolean;
    function GetMaximizedBoxOption() : presentation::BoolOption;
    function GetMinimizedBox() : system::Boolean;
    function GetMinimizedBoxOption() : presentation::BoolOption;
    function GetShortcutKeyTemplate() : system::Function<presentation::templates::GuiLabelTemplate*, system::Object>^;
    function GetSizeBox() : system::Boolean;
    function GetSizeBoxOption() : presentation::BoolOption;
    function GetTitleBar() : system::Boolean;
    function GetTitleBarOption() : presentation::BoolOption;
    function GetTooltipTemplate() : system::Function<presentation::templates::GuiWindowTemplate*, system::Object>^;
    function SetActivated(value : system::Boolean) : system::Void;
    function SetBorder(value : system::Boolean) : system::Void;
    function SetBorderOption(value : presentation::BoolOption) : system::Void;
    function SetCustomFrameEnabled(value : system::Boolean) : system::Void;
    function SetCustomFramePadding(value : presentation::Margin) : system::Void;
    function SetIcon(value : presentation::GuiImageData^) : system::Void;
    function SetIconVisible(value : system::Boolean) : system::Void;
    function SetIconVisibleOption(value : presentation::BoolOption) : system::Void;
    function SetMaximized(value : system::Boolean) : system::Void;
    function SetMaximizedBox(value : system::Boolean) : system::Void;
    function SetMaximizedBoxOption(value : presentation::BoolOption) : system::Void;
    function SetMinimizedBox(value : system::Boolean) : system::Void;
    function SetMinimizedBoxOption(value : presentation::BoolOption) : system::Void;
    function SetShortcutKeyTemplate(value : system::Function<presentation::templates::GuiLabelTemplate*, system::Object>^) : system::Void;
    function SetSizeBox(value : system::Boolean) : system::Void;
    function SetSizeBoxOption(value : presentation::BoolOption) : system::Void;
    function SetTitleBar(value : system::Boolean) : system::Void;
    function SetTitleBarOption(value : presentation::BoolOption) : system::Void;
    function SetTooltipTemplate(value : system::Function<presentation::templates::GuiWindowTemplate*, system::Object>^) : system::Void;

    constructor () : presentation::templates::GuiWindowTemplate*;
}

interface presentation::theme::ITheme : system::Interface {
    function CreateStyle(themeName : presentation::theme::ThemeName) : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    @InvokeTemplate:::vl::presentation::theme::GetCurrentTheme($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::theme::GetCurrentTheme)
    static function GetCurrentTheme() : presentation::theme::ITheme*;
    @InvokeTemplate:::vl::presentation::theme::RegisterTheme($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::theme::RegisterTheme)
    static function RegisterTheme(name : system::String, theme : presentation::theme::ThemeTemplates^) : system::Boolean;
    @InvokeTemplate:::vl::presentation::theme::UnregisterTheme($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::presentation::theme::UnregisterTheme)
    static function UnrgisterTheme(name : system::String) : presentation::theme::ThemeTemplates^;

}

@ValueType
enum presentation::theme::ThemeName {
    Button = 55,
    CheckBox = 56,
    CheckTextListItem = 22,
    ComboBox = 11,
    CustomControl = 4,
    CustomFrameWindow = 3,
    DateComboBox = 59,
    DatePicker = 58,
    DocumentLabel = 15,
    DocumentTextBox = 16,
    DocumentViewer = 14,
    GroupBox = 9,
    HScroll = 60,
    HTracker = 62,
    Label = 6,
    ListItemBackground = 20,
    ListView = 17,
    Menu = 24,
    MenuBar = 25,
    MenuBarButton = 27,
    MenuItemButton = 28,
    MenuSplitter = 26,
    MultilineTextBox = 12,
    ProgressBar = 64,
    RadioButton = 57,
    RadioTextListItem = 23,
    RibbonButtons = 41,
    RibbonGallery = 43,
    RibbonGalleryItemList = 46,
    RibbonGalleryList = 45,
    RibbonGroup = 37,
    RibbonGroupMenu = 38,
    RibbonIconLabel = 39,
    RibbonLargeButton = 50,
    RibbonLargeDropdownButton = 51,
    RibbonLargeSplitButton = 52,
    RibbonSmallButton = 47,
    RibbonSmallDropdownButton = 48,
    RibbonSmallIconLabel = 40,
    RibbonSmallSplitButton = 49,
    RibbonSplitter = 53,
    RibbonTab = 36,
    RibbonToolstripHeader = 54,
    RibbonToolstripMenu = 44,
    RibbonToolstrips = 42,
    ScrollView = 8,
    ShortcutKey = 7,
    SinglelineTextBox = 13,
    SystemFrameWindow = 2,
    Tab = 10,
    TextList = 19,
    ToolstripButton = 31,
    ToolstripDropdownButton = 32,
    ToolstripSplitButton = 33,
    ToolstripSplitter = 34,
    ToolstripSplitterInMenu = 35,
    ToolstripToolBar = 29,
    ToolstripToolBarInMenu = 30,
    Tooltip = 5,
    TreeItemExpander = 21,
    TreeView = 18,
    Unknown = 0,
    VScroll = 61,
    VTracker = 63,
    Window = 1,
}

class presentation::theme::ThemeTemplates : presentation::controls::GuiInstanceRootObject {
    property Button : system::Function<presentation::templates::GuiButtonTemplate*, system::Object>^;
    property CheckBox : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^;
    property CheckTextListItem : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^;
    property ComboBox : system::Function<presentation::templates::GuiComboBoxTemplate*, system::Object>^;
    property CustomControl : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    property CustomFrameWindow : system::Function<presentation::templates::GuiWindowTemplate*, system::Object>^;
    property DateComboBox : system::Function<presentation::templates::GuiDateComboBoxTemplate*, system::Object>^;
    property DatePicker : system::Function<presentation::templates::GuiDatePickerTemplate*, system::Object>^;
    property DocumentLabel : system::Function<presentation::templates::GuiDocumentLabelTemplate*, system::Object>^;
    property DocumentTextBox : system::Function<presentation::templates::GuiDocumentLabelTemplate*, system::Object>^;
    property DocumentViewer : system::Function<presentation::templates::GuiDocumentViewerTemplate*, system::Object>^;
    property GroupBox : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    property HScroll : system::Function<presentation::templates::GuiScrollTemplate*, system::Object>^;
    property HTracker : system::Function<presentation::templates::GuiScrollTemplate*, system::Object>^;
    property Label : system::Function<presentation::templates::GuiLabelTemplate*, system::Object>^;
    property ListItemBackground : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^;
    property ListView : system::Function<presentation::templates::GuiListViewTemplate*, system::Object>^;
    property Menu : system::Function<presentation::templates::GuiMenuTemplate*, system::Object>^;
    property MenuBar : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    property MenuBarButton : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    property MenuItemButton : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    property MenuSplitter : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    property MultilineTextBox : system::Function<presentation::templates::GuiMultilineTextBoxTemplate*, system::Object>^;
    property Name : system::String;
    property PreferCustomFrameWindow : system::Boolean?;
    property ProgressBar : system::Function<presentation::templates::GuiScrollTemplate*, system::Object>^;
    property RadioButton : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^;
    property RadioTextListItem : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^;
    property RibbonButtons : system::Function<presentation::templates::GuiRibbonButtonsTemplate*, system::Object>^;
    property RibbonGallery : system::Function<presentation::templates::GuiRibbonGalleryTemplate*, system::Object>^;
    property RibbonGalleryItemList : system::Function<presentation::templates::GuiTextListTemplate*, system::Object>^;
    property RibbonGalleryList : system::Function<presentation::templates::GuiRibbonGalleryListTemplate*, system::Object>^;
    property RibbonGroup : system::Function<presentation::templates::GuiRibbonGroupTemplate*, system::Object>^;
    property RibbonGroupMenu : system::Function<presentation::templates::GuiRibbonGroupMenuTemplate*, system::Object>^;
    property RibbonIconLabel : system::Function<presentation::templates::GuiRibbonIconLabelTemplate*, system::Object>^;
    property RibbonLargeButton : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    property RibbonLargeDropdownButton : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    property RibbonLargeSplitButton : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    property RibbonSmallButton : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    property RibbonSmallDropdownButton : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    property RibbonSmallIconLabel : system::Function<presentation::templates::GuiRibbonIconLabelTemplate*, system::Object>^;
    property RibbonSmallSplitButton : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    property RibbonSplitter : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    property RibbonTab : system::Function<presentation::templates::GuiRibbonTabTemplate*, system::Object>^;
    property RibbonToolstripHeader : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    property RibbonToolstripMenu : system::Function<presentation::templates::GuiRibbonToolstripMenuTemplate*, system::Object>^;
    property RibbonToolstrips : system::Function<presentation::templates::GuiRibbonToolstripsTemplate*, system::Object>^;
    property ScrollView : system::Function<presentation::templates::GuiScrollViewTemplate*, system::Object>^;
    property ShortcutKey : system::Function<presentation::templates::GuiLabelTemplate*, system::Object>^;
    property SinglelineTextBox : system::Function<presentation::templates::GuiSinglelineTextBoxTemplate*, system::Object>^;
    property SystemFrameWindow : system::Function<presentation::templates::GuiWindowTemplate*, system::Object>^;
    property Tab : system::Function<presentation::templates::GuiTabTemplate*, system::Object>^;
    property TextList : system::Function<presentation::templates::GuiTextListTemplate*, system::Object>^;
    property ToolstripButton : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    property ToolstripDropdownButton : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    property ToolstripSplitButton : system::Function<presentation::templates::GuiToolstripButtonTemplate*, system::Object>^;
    property ToolstripSplitter : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    property ToolstripSplitterInMenu : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    property ToolstripToolBar : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    property ToolstripToolBarInMenu : system::Function<presentation::templates::GuiControlTemplate*, system::Object>^;
    property Tooltip : system::Function<presentation::templates::GuiWindowTemplate*, system::Object>^;
    property TreeItemExpander : system::Function<presentation::templates::GuiSelectableButtonTemplate*, system::Object>^;
    property TreeView : system::Function<presentation::templates::GuiTreeViewTemplate*, system::Object>^;
    property VScroll : system::Function<presentation::templates::GuiScrollTemplate*, system::Object>^;
    property VTracker : system::Function<presentation::templates::GuiScrollTemplate*, system::Object>^;

    constructor () : presentation::theme::ThemeTemplates^;
}

@FullName:vl::reflection::description::IValueArray
interface system::Array : system::ReadonlyList {
    function Resize(size : system::Int64) : system::Void;
    function Set(index : system::Int64, value : system::Object) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IValueArray>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IValueArray>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::Array^;
    @InvokeTemplate:::vl::reflection::description::IValueArray::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::IValueArray::Create)
    constructor () : system::Array^;
    @InvokeTemplate:::vl::reflection::description::IValueArray::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::IValueArray::Create)
    constructor (values : system::ReadonlyList^) : system::Array^;
}

@FullName:vl::reflection::description::IAsync
interface system::Async : system::Interface {
    property Status : system::AsyncStatus { get:GetStatus }

    static function Delay(milliseconds : system::Int64) : system::Async^;
    function Execute(callback : system::Function<system::Void, system::CoroutineResult^>^, context : system::AsyncContext^) : system::Boolean;
    function GetStatus() : system::AsyncStatus;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IAsync>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IAsync>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::Async^;
}

@FullName:vl::reflection::description::AsyncContext
class system::AsyncContext : system::ReferenceType {
    property Context : system::Object { get:GetContext set:SetContext }

    function Cancel() : system::Boolean;
    function GetContext() : system::Object;
    function IsCancelled() : system::Boolean;
    function SetContext(value : system::Object) : system::Void;

    constructor (context : system::Object) : system::AsyncContext^;
}

@FullName:vl::reflection::description::AsyncCoroutine
class system::AsyncCoroutine : system::ReferenceType {
    static function AwaitAndRead(impl : system::AsyncCoroutine::IImpl*, value : system::Async^) : system::Void;
    static function Create(creator : system::Function<system::Coroutine^, system::AsyncCoroutine::IImpl*>^) : system::Async^;
    static function CreateAndRun(creator : system::Function<system::Coroutine^, system::AsyncCoroutine::IImpl*>^) : system::Void;
    static function QueryContext(impl : system::AsyncCoroutine::IImpl*) : system::AsyncContext^;
    static function ReturnAndExit(impl : system::AsyncCoroutine::IImpl*, value : system::Object) : system::Void;

}

@FullName:vl::reflection::description::AsyncCoroutine::IImpl
interface system::AsyncCoroutine::IImpl : system::Async {
}

@FullName:vl::reflection::description::IAsyncScheduler
interface system::AsyncScheduler : system::Interface {
    function DelayExecute(callback : system::Function<system::Void>^, milliseconds : system::Int64) : system::Void;
    function Execute(callback : system::Function<system::Void>^) : system::Void;
    function ExecuteInBackground(callback : system::Function<system::Void>^) : system::Void;
    static function GetSchedulerForCurrentThread() : system::AsyncScheduler^;

}

@FullName:vl::reflection::description::AsyncStatus
@ValueType
enum system::AsyncStatus {
    Executing = 1,
    Ready = 0,
    Stopped = 2,
}

@FullName:bool
@ValueType
@Serializable
primitive system::Boolean;

@FullName:vl::reflection::description::IValueCallStack
interface system::CallStack : system::Interface {
    property CapturedVariables : system::ReadonlyDictionary^ { get:GetCapturedVariables }
    property FunctionName : system::String { get:GetFunctionName }
    property GlobalVariables : system::ReadonlyDictionary^ { get:GetGlobalVariables }
    property LocalArguments : system::ReadonlyDictionary^ { get:GetLocalArguments }
    property LocalVariables : system::ReadonlyDictionary^ { get:GetLocalVariables }
    property RowAfterCodegen : system::Int64 { get:GetRowAfterCodegen }
    property RowBeforeCodegen : system::Int64 { get:GetRowBeforeCodegen }
    property SourceCodeAfterCodegen : system::String { get:GetSourceCodeAfterCodegen }
    property SourceCodeBeforeCodegen : system::String { get:GetSourceCodeBeforeCodegen }

    function GetCapturedVariables() : system::ReadonlyDictionary^;
    function GetFunctionName() : system::String;
    function GetGlobalVariables() : system::ReadonlyDictionary^;
    function GetLocalArguments() : system::ReadonlyDictionary^;
    function GetLocalVariables() : system::ReadonlyDictionary^;
    function GetRowAfterCodegen() : system::Int64;
    function GetRowBeforeCodegen() : system::Int64;
    function GetSourceCodeAfterCodegen() : system::String;
    function GetSourceCodeBeforeCodegen() : system::String;

}

@FullName:wchar_t
@ValueType
@Serializable
primitive system::Char;

@FullName:vl::reflection::description::ICoroutine
interface system::Coroutine : system::Interface {
    property Failure : system::Exception^ { get:GetFailure }
    property Status : system::CoroutineStatus { get:GetStatus }

    function GetFailure() : system::Exception^;
    function GetStatus() : system::CoroutineStatus;
    function Resume(raiseException : system::Boolean, output : system::CoroutineResult^) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<ICoroutine>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<ICoroutine>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::Coroutine^;
}

@FullName:vl::reflection::description::CoroutineResult
class system::CoroutineResult : system::ReferenceType {
    property Failure : system::Exception^ { get:GetFailure set:SetFailure }
    property Result : system::Object { get:GetResult set:SetResult }

    function GetFailure() : system::Exception^;
    function GetResult() : system::Object;
    function SetFailure(value : system::Exception^) : system::Void;
    function SetResult(value : system::Object) : system::Void;

    constructor () : system::CoroutineResult^;
}

@FullName:vl::reflection::description::CoroutineStatus
@ValueType
enum system::CoroutineStatus {
    Executing = 1,
    Stopped = 2,
    Waiting = 0,
}

@FullName:vl::DateTime
@ValueType
@Serializable
struct system::DateTime {
    property day : system::Int64;
    property dayOfWeek : system::Int64;
    property hour : system::Int64;
    property milliseconds : system::Int64;
    property minute : system::Int64;
    property month : system::Int64;
    property osInternal : system::UInt64;
    property osMilliseconds : system::UInt64;
    property second : system::Int64;
    property year : system::Int64;
}

@FullName:vl::reflection::description::IValueDictionary
interface system::Dictionary : system::ReadonlyDictionary {
    function Clear() : system::Void;
    function Remove(key : system::Object) : system::Boolean;
    function Set(key : system::Object, value : system::Object) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IValueDictionary>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IValueDictionary>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::Dictionary^;
    @InvokeTemplate:::vl::reflection::description::IValueDictionary::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::IValueDictionary::Create)
    constructor () : system::Dictionary^;
    @InvokeTemplate:::vl::reflection::description::IValueDictionary::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::IValueDictionary::Create)
    constructor (values : system::ReadonlyDictionary^) : system::Dictionary^;
}

@FullName:double
@ValueType
@Serializable
primitive system::Double;

@FullName:vl::reflection::description::IValueEnumerable
interface system::Enumerable : system::Interface {
    function CreateEnumerator() : system::Enumerator^;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IValueEnumerable>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IValueEnumerable>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::Enumerable^;
}

@FullName:vl::reflection::description::EnumerableCoroutine
class system::EnumerableCoroutine : system::ReferenceType {
    static function Create(creator : system::Function<system::Coroutine^, system::EnumerableCoroutine::IImpl*>^) : system::Enumerable^;
    static function JoinAndPause(impl : system::EnumerableCoroutine::IImpl*, value : system::Enumerable^) : system::Void;
    static function ReturnAndExit(impl : system::EnumerableCoroutine::IImpl*) : system::Void;
    static function YieldAndPause(impl : system::EnumerableCoroutine::IImpl*, value : system::Object) : system::Void;

}

@FullName:vl::reflection::description::EnumerableCoroutine::IImpl
interface system::EnumerableCoroutine::IImpl : system::Enumerator {
}

@FullName:vl::reflection::description::IValueEnumerator
interface system::Enumerator : system::Interface {
    property Current : system::Object { get:GetCurrent }
    property Index : system::Int64 { get:GetIndex }

    function GetCurrent() : system::Object;
    function GetIndex() : system::Int64;
    function Next() : system::Boolean;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IValueEnumerator>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IValueEnumerator>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::Enumerator^;
}

@FullName:vl::reflection::description::IValueException
interface system::Exception : system::Interface {
    property CallStack : system::ReadonlyList^ { get:GetCallStack }
    property Fatal : system::Boolean { get:GetFatal }
    property Message : system::String { get:GetMessage }

    function GetCallStack() : system::ReadonlyList^;
    function GetFatal() : system::Boolean;
    function GetMessage() : system::String;

}

@FullName:vl::reflection::description::IValueFunctionProxy
interface system::Function : system::Interface {
    function Invoke(arguments : system::ReadonlyList^) : system::Object;

}

@FullName:vl::reflection::description::IFuture
interface system::Future : system::Async, system::Promise {
    property Promise : system::Promise^ { get:GetPromise }

    static function Create() : system::Future^;
    function GetPromise() : system::Promise^;

}

@FullName:vl::vint16_t
@ValueType
@Serializable
primitive system::Int16;

@FullName:vl::vint32_t
@ValueType
@Serializable
primitive system::Int32;

@FullName:vl::vint64_t
@ValueType
@Serializable
primitive system::Int64;

@FullName:vl::vint8_t
@ValueType
@Serializable
primitive system::Int8;

@FullName:vl::reflection::IDescriptable
interface system::Interface {
}

@FullName:vl::reflection::description::IValueInterfaceProxy
interface system::InterfaceProxy : system::Interface {
    function Invoke(methodInfo : system::reflection::MethodInfo*, arguments : system::ReadonlyList^) : system::Object;

}

@FullName:vl::glr::json::JsonArray
class system::JsonArray : system::JsonNode {
    property items : system::List<system::JsonNode^>^ { get }

    constructor () : system::JsonArray^;
}

@FullName:vl::glr::json::JsonLiteral
class system::JsonLiteral : system::JsonNode {
    property value : system::JsonLiteralValue;

    constructor () : system::JsonLiteral^;
}

@FullName:vl::glr::json::JsonLiteralValue
@ValueType
enum system::JsonLiteralValue {
    False = 1,
    Null = 2,
    True = 0,
}

@FullName:vl::glr::json::JsonNode
class system::JsonNode : system::ParsingAstBase {
}

@FullName:vl::glr::json::JsonNode::IVisitor
interface system::JsonNode::IVisitor : system::Interface {
    function Visit(node : system::JsonLiteral*) : system::Void;
    function Visit(node : system::JsonString*) : system::Void;
    function Visit(node : system::JsonNumber*) : system::Void;
    function Visit(node : system::JsonArray*) : system::Void;
    function Visit(node : system::JsonObject*) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<vl::glr::json::JsonNode::IVisitor>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<vl::glr::json::JsonNode::IVisitor>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::JsonNode::IVisitor^;
}

@FullName:vl::glr::json::JsonNumber
class system::JsonNumber : system::JsonNode {
    property content : system::ParsingToken;

    constructor () : system::JsonNumber^;
}

@FullName:vl::glr::json::JsonObject
class system::JsonObject : system::JsonNode {
    property fields : system::List<system::JsonObjectField^>^ { get }

    constructor () : system::JsonObject^;
}

@FullName:vl::glr::json::JsonObjectField
class system::JsonObjectField : system::ParsingAstBase {
    property name : system::ParsingToken;
    property value : system::JsonNode^;

    constructor () : system::JsonObjectField^;
}

@FullName:vl::glr::json::JsonString
class system::JsonString : system::JsonNode {
    property content : system::ParsingToken;

    constructor () : system::JsonString^;
}

@FullName:vl::reflection::description::IValueList
interface system::List : system::ReadonlyList {
    function Add(value : system::Object) : system::Int64;
    function Clear() : system::Void;
    function Insert(index : system::Int64, value : system::Object) : system::Int64;
    function Remove(value : system::Object) : system::Boolean;
    function RemoveAt(index : system::Int64) : system::Boolean;
    function Set(index : system::Int64, value : system::Object) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IValueList>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IValueList>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::List^;
    @InvokeTemplate:::vl::reflection::description::IValueList::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::IValueList::Create)
    constructor () : system::List^;
    @InvokeTemplate:::vl::reflection::description::IValueList::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::IValueList::Create)
    constructor (values : system::ReadonlyList^) : system::List^;
}

@FullName:vl::Locale
@ValueType
@Serializable
primitive system::Locale;

@FullName:vl::reflection::description::Localization
class system::Localization : system::ReferenceType {
    static function FormatCurrency(locale : system::Locale, number : system::String) : system::String;
    static function FormatDate(locale : system::Locale, format : system::String, date : system::DateTime) : system::String;
    static function FormatNumber(locale : system::Locale, number : system::String) : system::String;
    static function FormatTime(locale : system::Locale, format : system::String, date : system::DateTime) : system::String;
    static function GetLongDateFormats(locale : system::Locale) : system::Enumerable<system::String>^;
    static function GetLongDayOfWeekName(locale : system::Locale, dayOfWeek : system::Int64) : system::String;
    static function GetLongMonthName(locale : system::Locale, month : system::Int64) : system::String;
    static function GetLongTimeFormats(locale : system::Locale) : system::Enumerable<system::String>^;
    static function GetShortDateFormats(locale : system::Locale) : system::Enumerable<system::String>^;
    static function GetShortDayOfWeekName(locale : system::Locale, dayOfWeek : system::Int64) : system::String;
    static function GetShortMonthName(locale : system::Locale, month : system::Int64) : system::String;
    static function GetShortTimeFormats(locale : system::Locale) : system::Enumerable<system::String>^;
    static function GetYearMonthDateFormats(locale : system::Locale) : system::Enumerable<system::String>^;
    static function Invariant() : system::Locale;
    static function Locales() : system::Enumerable<system::Locale>^;
    static function System() : system::Locale;
    static function User() : system::Locale;

}

@FullName:vl::reflection::description::Math
class system::Math : system::ReferenceType {
    static function ACos(value : system::Double) : system::Double;
    static function ASin(value : system::Double) : system::Double;
    static function ATan(value : system::Double) : system::Double;
    static function ATan2(x : system::Double, y : system::Double) : system::Double;
    static function Abs(value : system::Int8) : system::Int8;
    static function Abs(value : system::Int16) : system::Int16;
    static function Abs(value : system::Int32) : system::Int32;
    static function Abs(value : system::Int64) : system::Int64;
    static function Abs(value : system::Single) : system::Single;
    static function Abs(value : system::Double) : system::Double;
    static function Ceil(value : system::Double) : system::Double;
    static function Cos(value : system::Double) : system::Double;
    static function Exp(value : system::Double) : system::Double;
    static function Floor(value : system::Double) : system::Double;
    static function Log(value : system::Double, base : system::Double) : system::Double;
    static function Log10(value : system::Double) : system::Double;
    static function LogN(value : system::Double) : system::Double;
    static function Max(a : system::UInt8, b : system::UInt8) : system::UInt8;
    static function Max(a : system::UInt16, b : system::UInt16) : system::UInt16;
    static function Max(a : system::UInt32, b : system::UInt32) : system::UInt32;
    static function Max(a : system::UInt64, b : system::UInt64) : system::UInt64;
    static function Max(a : system::Int8, b : system::Int8) : system::Int8;
    static function Max(a : system::Int16, b : system::Int16) : system::Int16;
    static function Max(a : system::Int32, b : system::Int32) : system::Int32;
    static function Max(a : system::Int64, b : system::Int64) : system::Int64;
    static function Max(a : system::Single, b : system::Single) : system::Single;
    static function Max(a : system::Double, b : system::Double) : system::Double;
    static function Max(a : system::Boolean, b : system::Boolean) : system::Boolean;
    static function Max(a : system::Char, b : system::Char) : system::Char;
    static function Max(a : system::String, b : system::String) : system::String;
    static function Max(a : system::Locale, b : system::Locale) : system::Locale;
    static function Max(a : system::DateTime, b : system::DateTime) : system::DateTime;
    static function Min(a : system::UInt8, b : system::UInt8) : system::UInt8;
    static function Min(a : system::UInt16, b : system::UInt16) : system::UInt16;
    static function Min(a : system::UInt32, b : system::UInt32) : system::UInt32;
    static function Min(a : system::UInt64, b : system::UInt64) : system::UInt64;
    static function Min(a : system::Int8, b : system::Int8) : system::Int8;
    static function Min(a : system::Int16, b : system::Int16) : system::Int16;
    static function Min(a : system::Int32, b : system::Int32) : system::Int32;
    static function Min(a : system::Int64, b : system::Int64) : system::Int64;
    static function Min(a : system::Single, b : system::Single) : system::Single;
    static function Min(a : system::Double, b : system::Double) : system::Double;
    static function Min(a : system::Boolean, b : system::Boolean) : system::Boolean;
    static function Min(a : system::Char, b : system::Char) : system::Char;
    static function Min(a : system::String, b : system::String) : system::String;
    static function Min(a : system::Locale, b : system::Locale) : system::Locale;
    static function Min(a : system::DateTime, b : system::DateTime) : system::DateTime;
    static function Pi() : system::Double;
    static function Pow(value : system::Double, power : system::Double) : system::Double;
    static function Round(value : system::Double) : system::Double;
    static function Sin(value : system::Double) : system::Double;
    static function Tan(value : system::Double) : system::Double;
    static function Trunc(value : system::Double) : system::Double;

}

@FullName:vl::reflection::description::Value
class system::Object {
}

@FullName:vl::reflection::description::IValueObservableList
interface system::ObservableList : system::List {
    event ItemChanged : system::Function<system::Void, system::Int64, system::Int64, system::Int64>^;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IValueObservableList>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IValueObservableList>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::ObservableList^;
    @InvokeTemplate:::vl::reflection::description::IValueObservableList::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::IValueObservableList::Create)
    constructor () : system::ObservableList^;
    @InvokeTemplate:::vl::reflection::description::IValueObservableList::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::IValueObservableList::Create)
    constructor (values : system::ReadonlyList^) : system::ObservableList^;
}

@FullName:vl::glr::ParsingAstBase
class system::ParsingAstBase : system::ReferenceType {
    property codeRange : system::ParsingTextRange;

}

@FullName:vl::glr::ParsingTextPos
@ValueType
struct system::ParsingTextPos {
    property column : system::Int64;
    property index : system::Int64;
    property row : system::Int64;
}

@FullName:vl::glr::ParsingTextRange
@ValueType
struct system::ParsingTextRange {
    property codeIndex : system::Int64;
    property end : system::ParsingTextPos;
    property start : system::ParsingTextPos;
}

@FullName:vl::glr::ParsingToken
@ValueType
struct system::ParsingToken {
    property codeRange : system::ParsingTextRange;
    property index : system::Int64;
    property token : system::Int64;
    property value : system::String;
}

@FullName:vl::reflection::description::IPromise
interface system::Promise : system::Interface {
    function SendFailure(failure : system::Exception^) : system::Boolean;
    function SendResult(result : system::Object) : system::Boolean;

}

@FullName:vl::reflection::description::IValueReadonlyDictionary
interface system::ReadonlyDictionary : system::Interface {
    property Count : system::Int64 { get:GetCount }
    property Keys : system::ReadonlyList^ { get:GetKeys }
    property Values : system::ReadonlyList^ { get:GetValues }

    function Get(key : system::Object) : system::Object;
    function GetCount() : system::Int64;
    function GetKeys() : system::ReadonlyList^;
    function GetValues() : system::ReadonlyList^;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IValueReadonlyDictionary>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IValueReadonlyDictionary>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::ReadonlyDictionary^;
}

@FullName:vl::reflection::description::IValueReadonlyList
interface system::ReadonlyList : system::Enumerable {
    property Count : system::Int64 { get:GetCount }

    function Contains(value : system::Object) : system::Boolean;
    function Get(index : system::Int64) : system::Object;
    function GetCount() : system::Int64;
    function IndexOf(value : system::Object) : system::Int64;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IValueReadonlyList>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IValueReadonlyList>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::ReadonlyList^;
}

@FullName:vl::reflection::DescriptableObject
class system::ReferenceType {
}

@FullName:float
@ValueType
@Serializable
primitive system::Single;

@FullName:vl::reflection::description::StateMachine
class system::StateMachine : system::ReferenceType {
    property StateMachineStatus : system::CoroutineStatus { get:GetStateMachineStatus }
    property stateMachineCoroutine : system::Coroutine^;
    property stateMachineInitialized : system::Boolean;
    property stateMachineInput : system::Int64;
    property stateMachineStopped : system::Boolean;

    function GetStateMachineStatus() : system::CoroutineStatus;
    function ResumeStateMachine() : system::Void;

    constructor () : system::StateMachine^;
}

@FullName:vl::WString
@ValueType
@Serializable
primitive system::String;

@FullName:vl::reflection::description::IValueSubscription
interface system::Subscription : system::ReferenceType {
    event ValueChanged : system::Function<system::Void, system::Object>^;

    function Close() : system::Boolean;
    function Open() : system::Boolean;
    function Update() : system::Boolean;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<IValueSubscription>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<IValueSubscription>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::Subscription^;
}

@FullName:vl::reflection::description::Sys
class system::Sys : system::ReferenceType {
    static function Backward(dt : system::DateTime, milliseconds : system::UInt64) : system::DateTime;
    static function Compare(a : system::UInt8, b : system::UInt8) : system::Int64;
    static function Compare(a : system::UInt16, b : system::UInt16) : system::Int64;
    static function Compare(a : system::UInt32, b : system::UInt32) : system::Int64;
    static function Compare(a : system::UInt64, b : system::UInt64) : system::Int64;
    static function Compare(a : system::Int8, b : system::Int8) : system::Int64;
    static function Compare(a : system::Int16, b : system::Int16) : system::Int64;
    static function Compare(a : system::Int32, b : system::Int32) : system::Int64;
    static function Compare(a : system::Int64, b : system::Int64) : system::Int64;
    static function Compare(a : system::Single, b : system::Single) : system::Int64;
    static function Compare(a : system::Double, b : system::Double) : system::Int64;
    static function Compare(a : system::Boolean, b : system::Boolean) : system::Int64;
    static function Compare(a : system::Char, b : system::Char) : system::Int64;
    static function Compare(a : system::String, b : system::String) : system::Int64;
    static function Compare(a : system::Locale, b : system::Locale) : system::Int64;
    static function Compare(a : system::DateTime, b : system::DateTime) : system::Int64;
    static function CreateDateTime(year : system::Int64, month : system::Int64, day : system::Int64) : system::DateTime;
    static function CreateDateTime(year : system::Int64, month : system::Int64, day : system::Int64, hour : system::Int64, minute : system::Int64, second : system::Int64, milliseconds : system::Int64) : system::DateTime;
    static function Find(value : system::String, substr : system::String) : system::Int64;
    static function Forward(dt : system::DateTime, milliseconds : system::UInt64) : system::DateTime;
    static function GetLocalTime() : system::DateTime;
    static function GetUtcTime() : system::DateTime;
    static function Int32ToInt(value : system::Int32) : system::Int64;
    static function Int64ToInt(value : system::Int64) : system::Int64;
    static function IntToInt32(value : system::Int64) : system::Int32;
    static function IntToInt64(value : system::Int64) : system::Int64;
    static function LCase(value : system::String) : system::String;
    static function Left(value : system::String, length : system::Int64) : system::String;
    static function Len(value : system::String) : system::Int64;
    static function LoremIpsumParagraph(bestLength : system::Int64) : system::String;
    static function LoremIpsumSentence(bestLength : system::Int64) : system::String;
    static function LoremIpsumTitle(bestLength : system::Int64) : system::String;
    static function Mid(value : system::String, start : system::Int64, length : system::Int64) : system::String;
    static function ReverseEnumerable(value : system::Enumerable^) : system::Enumerable^;
    static function Right(value : system::String, length : system::Int64) : system::String;
    static function ToLocalTime(dt : system::DateTime) : system::DateTime;
    static function ToUtcTime(dt : system::DateTime) : system::DateTime;
    static function UCase(value : system::String) : system::String;
    static function UInt32ToUInt(value : system::UInt32) : system::UInt64;
    static function UInt64ToUInt(value : system::UInt64) : system::UInt64;
    static function UIntToUInt32(value : system::UInt64) : system::UInt32;
    static function UIntToUInt64(value : system::UInt64) : system::UInt64;

}

@FullName:vl::vuint16_t
@ValueType
@Serializable
primitive system::UInt16;

@FullName:vl::vuint32_t
@ValueType
@Serializable
primitive system::UInt32;

@FullName:vl::vuint64_t
@ValueType
@Serializable
primitive system::UInt64;

@FullName:vl::vuint8_t
@ValueType
@Serializable
primitive system::UInt8;

@FullName:vl::reflection::description::VoidValue
@ValueType
primitive system::Void;

@FullName:vl::glr::xml::XmlAttribute
class system::XmlAttribute : system::ParsingAstBase {
    property name : system::ParsingToken;
    property value : system::ParsingToken;

    constructor () : system::XmlAttribute^;
}

@FullName:vl::glr::xml::XmlCData
class system::XmlCData : system::XmlNode {
    property content : system::ParsingToken;

    constructor () : system::XmlCData^;
}

@FullName:vl::glr::xml::XmlComment
class system::XmlComment : system::XmlNode {
    property content : system::ParsingToken;

    constructor () : system::XmlComment^;
}

@FullName:vl::glr::xml::XmlDocument
class system::XmlDocument : system::XmlNode {
    property prologs : system::List<system::XmlNode^>^ { get }
    property rootElement : system::XmlElement^;

    constructor () : system::XmlDocument^;
}

@FullName:vl::glr::xml::XmlElement
class system::XmlElement : system::XmlNode {
    property attributes : system::List<system::XmlAttribute^>^ { get }
    property closingName : system::ParsingToken;
    property name : system::ParsingToken;
    property subNodes : system::List<system::XmlNode^>^ { get }

    constructor () : system::XmlElement^;
}

@FullName:vl::glr::xml::XmlInstruction
class system::XmlInstruction : system::XmlNode {
    property attributes : system::List<system::XmlAttribute^>^ { get }
    property name : system::ParsingToken;

    constructor () : system::XmlInstruction^;
}

@FullName:vl::glr::xml::XmlNode
class system::XmlNode : system::ParsingAstBase {
}

@FullName:vl::glr::xml::XmlNode::IVisitor
interface system::XmlNode::IVisitor : system::Interface {
    function Visit(node : system::XmlText*) : system::Void;
    function Visit(node : system::XmlCData*) : system::Void;
    function Visit(node : system::XmlComment*) : system::Void;
    function Visit(node : system::XmlElement*) : system::Void;
    function Visit(node : system::XmlInstruction*) : system::Void;
    function Visit(node : system::XmlDocument*) : system::Void;

    @InvokeTemplate:::vl::reflection::description::ValueInterfaceProxy<vl::glr::xml::XmlNode::IVisitor>::Create($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ValueInterfaceProxy<vl::glr::xml::XmlNode::IVisitor>::Create)
    constructor (proxy : system::InterfaceProxy^) : system::XmlNode::IVisitor^;
}

@FullName:vl::glr::xml::XmlText
class system::XmlText : system::XmlNode {
    property content : system::ParsingToken;

    constructor () : system::XmlText^;
}

@FullName:vl::reflection::description::IBoxedValue
interface system::reflection::BoxedValue : system::Interface {
    function Copy() : system::reflection::BoxedValue^;

}

@FullName:vl::reflection::description::IEnumType
interface system::reflection::EnumType : system::Interface {
    function FromEnum(value : system::Object) : system::UInt64;
    function GetItemCount() : system::Int64;
    function GetItemName(index : system::Int64) : system::String;
    function GetItemValue(index : system::Int64) : system::UInt64;
    function IndexOfItem(name : system::String) : system::Int64;
    function IsFlagEnum() : system::Boolean;
    function ToEnum(value : system::UInt64) : system::Object;

}

@FullName:vl::reflection::description::IEventHandler
interface system::reflection::EventHandler : system::Interface {
    function IsAttached() : system::Boolean;

}

@FullName:vl::reflection::description::IEventInfo
interface system::reflection::EventInfo : system::reflection::MemberInfo {
    property HandlerType : system::reflection::TypeInfo* { get:GetHandlerType }
    property ObservingPropertyCount : system::Int64 { get:GetObservingPropertyCount }

    function Attach(thisObject : system::Object, handler : system::Function^) : system::reflection::EventHandler^;
    function GetHandlerType() : system::reflection::TypeInfo*;
    function GetObservingProperty(index : system::Int64) : system::reflection::PropertyInfo*;
    function GetObservingPropertyCount() : system::Int64;
    function Invoke(thisObject : system::Object, arguments : system::ReadonlyList^) : system::Void;

}

@FullName:vl::reflection::description::IMemberInfo
interface system::reflection::MemberInfo : system::Interface {
    property Name : system::String { get:GetName }
    property OwnerTypeDescriptor : system::reflection::TypeDescriptor* { get:GetOwnerTypeDescriptor }

    function GetName() : system::String;
    function GetOwnerTypeDescriptor() : system::reflection::TypeDescriptor*;

}

@FullName:vl::reflection::description::IMethodGroupInfo
interface system::reflection::MethodGroupInfo : system::reflection::MemberInfo {
    property MethodCount : system::Int64 { get:GetMethodCount }

    function GetMethod(index : system::Int64) : system::reflection::MethodInfo*;
    function GetMethodCount() : system::Int64;

}

@FullName:vl::reflection::description::IMethodInfo
interface system::reflection::MethodInfo : system::reflection::MemberInfo, system::reflection::MemberInfo {
    property OwnerMethodGroup : system::reflection::MethodGroupInfo* { get:GetOwnerMethodGroup }
    property OwnerProperty : system::reflection::PropertyInfo* { get:GetOwnerProperty }
    property ParameterCount : system::Int64 { get:GetParameterCount }
    property Return : system::reflection::TypeInfo* { get:GetReturn }

    function CheckArguments(arguments : system::Array<system::Object>^) : system::Void;
    function GetOwnerMethodGroup() : system::reflection::MethodGroupInfo*;
    function GetOwnerProperty() : system::reflection::PropertyInfo*;
    function GetParameter(index : system::Int64) : system::reflection::ParameterInfo*;
    function GetParameterCount() : system::Int64;
    function GetReturn() : system::reflection::TypeInfo*;
    function Invoke(thisObject : system::Object, arguments : system::Array<system::Object>^) : system::Object;
    function IsStatic() : system::Boolean;

}

@FullName:vl::reflection::description::IParameterInfo
interface system::reflection::ParameterInfo : system::reflection::MemberInfo {
    property OwnerMethod : system::reflection::MethodInfo* { get:GetOwnerMethod }
    property Type : system::reflection::TypeInfo* { get:GetType }

    function GetOwnerMethod() : system::reflection::MethodInfo*;
    function GetType() : system::reflection::TypeInfo*;

}

@FullName:vl::reflection::description::IPropertyInfo
interface system::reflection::PropertyInfo : system::reflection::MemberInfo {
    property Getter : system::reflection::MethodInfo* { get:GetGetter }
    property Return : system::reflection::TypeInfo* { get:GetReturn }
    property Setter : system::reflection::MethodInfo* { get:GetSetter }
    property ValueChangedEvent : system::reflection::EventInfo* { get:GetValueChangedEvent }

    function GetGetter() : system::reflection::MethodInfo*;
    function GetReturn() : system::reflection::TypeInfo*;
    function GetSetter() : system::reflection::MethodInfo*;
    function GetValue(thisObject : system::Object) : system::Object;
    function GetValueChangedEvent() : system::reflection::EventInfo*;
    function IsReadable() : system::Boolean;
    function IsWritable() : system::Boolean;
    function SetValue(thisObject : system::Object, newValue : system::Object) : system::Void;

}

@FullName:vl::reflection::description::ISerializableType
interface system::reflection::SerializableType : system::Interface {
    function Deserialize(input : system::String, output : system::Object) : system::Boolean;
    function Serialize(input : system::Object, output : system::String) : system::Boolean;

}

@FullName:vl::reflection::description::ITypeDescriptor
interface system::reflection::TypeDescriptor : system::Interface {
    property BaseTypeDescriptorCount : system::Int64 { get:GetBaseTypeDescriptorCount }
    property ConstructorGroup : system::reflection::MethodGroupInfo* { get:GetConstructorGroup }
    property EnumType : system::reflection::EnumType* { get:GetEnumType }
    property EventCount : system::Int64 { get:GetEventCount }
    property MethodGroupCount : system::Int64 { get:GetMethodGroupCount }
    property PropertyCount : system::Int64 { get:GetPropertyCount }
    property SerializableType : system::reflection::SerializableType* { get:GetSerializableType }
    property TypeDescriptorFlags : system::reflection::TypeDescriptorFlags { get:GetTypeDescriptorFlags }
    property TypeName : system::String { get:GetTypeName }
    property ValueType : system::reflection::ValueType* { get:GetValueType }

    function CanConvertTo(targetType : system::reflection::TypeDescriptor*) : system::Boolean;
    function GetBaseTypeDescriptor(index : system::Int64) : system::reflection::TypeDescriptor*;
    function GetBaseTypeDescriptorCount() : system::Int64;
    function GetConstructorGroup() : system::reflection::MethodGroupInfo*;
    function GetEnumType() : system::reflection::EnumType*;
    function GetEvent(index : system::Int64) : system::reflection::EventInfo*;
    function GetEventByName(name : system::String, inheritable : system::Boolean) : system::reflection::EventInfo*;
    function GetEventCount() : system::Int64;
    function GetMethodGroup(index : system::Int64) : system::reflection::MethodGroupInfo*;
    function GetMethodGroupByName(name : system::String, inheritable : system::Boolean) : system::reflection::MethodGroupInfo*;
    function GetMethodGroupCount() : system::Int64;
    function GetProperty(index : system::Int64) : system::reflection::PropertyInfo*;
    function GetPropertyByName(name : system::String, inheritable : system::Boolean) : system::reflection::PropertyInfo*;
    function GetPropertyCount() : system::Int64;
    function GetSerializableType() : system::reflection::SerializableType*;
    @InvokeTemplate:::vl::reflection::description::ITypeDescriptor_GetTypeDescriptor($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ITypeDescriptor_GetTypeDescriptor)
    static function GetTypeDescriptor(index : system::Int64) : system::reflection::TypeDescriptor*;
    @InvokeTemplate:::vl::reflection::description::ITypeDescriptor_GetTypeDescriptor($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ITypeDescriptor_GetTypeDescriptor)
    static function GetTypeDescriptor(name : system::String) : system::reflection::TypeDescriptor*;
    @InvokeTemplate:::vl::reflection::description::ITypeDescriptor_GetTypeDescriptor($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ITypeDescriptor_GetTypeDescriptor)
    static function GetTypeDescriptor(value : system::Object) : system::reflection::TypeDescriptor*;
    @InvokeTemplate:::vl::reflection::description::ITypeDescriptor_GetTypeDescriptorCount($Arguments)
    @ClosureTemplate:::vl::Func<$Func>(&::vl::reflection::description::ITypeDescriptor_GetTypeDescriptorCount)
    static function GetTypeDescriptorCount() : system::Int64;
    function GetTypeDescriptorFlags() : system::reflection::TypeDescriptorFlags;
    function GetTypeName() : system::String;
    function GetValueType() : system::reflection::ValueType*;
    function IsEventExists(name : system::String, inheritable : system::Boolean) : system::Boolean;
    function IsMethodGroupExists(name : system::String, inheritable : system::Boolean) : system::Boolean;
    function IsPropertyExists(name : system::String, inheritable : system::Boolean) : system::Boolean;

}

@FullName:vl::reflection::description::TypeDescriptorFlags
@ValueType
@Flags
enum system::reflection::TypeDescriptorFlags {
    Class = 4,
    FlagEnum = 64,
    IDescriptable = 2,
    Interface = 8,
    NormalEnum = 128,
    Object = 1,
    Primitive = 16,
    Struct = 32,
    Undefined = 0,
}

@FullName:vl::reflection::description::ITypeInfo
interface system::reflection::TypeInfo : system::Interface {
    property Decorator : system::reflection::TypeInfo::Decorator { get:GetDecorator }
    property ElementType : system::reflection::TypeInfo* { get:GetElementType }
    property GenericArgumentCount : system::Int64 { get:GetGenericArgumentCount }
    property TypeDescriptor : system::reflection::TypeDescriptor* { get:GetTypeDescriptor }
    property TypeFriendlyName : system::String { get:GetTypeFriendlyName }

    function GetDecorator() : system::reflection::TypeInfo::Decorator;
    function GetElementType() : system::reflection::TypeInfo*;
    function GetGenericArgument(index : system::Int64) : system::reflection::TypeInfo*;
    function GetGenericArgumentCount() : system::Int64;
    function GetTypeDescriptor() : system::reflection::TypeDescriptor*;
    function GetTypeFriendlyName() : system::String;

}

@FullName:vl::reflection::description::ITypeInfo::Decorator
@ValueType
enum system::reflection::TypeInfo::Decorator {
    Generic = 4,
    Nullable = 2,
    RawPtr = 0,
    SharedPtr = 1,
    TypeDescriptor = 3,
}

@FullName:vl::reflection::description::IValueType
interface system::reflection::ValueType : system::Interface {
    function CreateDefault() : system::Object;

}

@FullName:vl::reflection::description::IBoxedValue::CompareResult
@ValueType
enum system::reflection::ValueType::CompareResult {
    Equal = 2,
    Greater = 1,
    NotComparable = 3,
    Smaller = 0,
}

