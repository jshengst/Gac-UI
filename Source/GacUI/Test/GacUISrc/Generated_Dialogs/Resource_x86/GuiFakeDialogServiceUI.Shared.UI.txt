================================(1/1)================================
module <localized-strings>gaclib_controls::DialogStrings;

namespace gaclib_controls
{
    interface IDialogStringsStrings
    {
        func Abort() : (::system::String);

        func Blue() : (::system::String);

        func Bold() : (::system::String);

        func Cancel() : (::system::String);

        func Color() : (::system::String);

        func ColorDialogTitle() : (::system::String);

        func Continue() : (::system::String);

        func FileDialogAskCreateFile() : (::system::String);

        func FileDialogAskOverrideFile() : (::system::String);

        func FileDialogErrorEmptySelection() : (::system::String);

        func FileDialogErrorFileExpected() : (::system::String);

        func FileDialogErrorFileNotExist() : (::system::String);

        func FileDialogErrorFolderNotExist() : (::system::String);

        func FileDialogErrorMultipleSelectionNotEnabled() : (::system::String);

        func FileDialogFileName() : (::system::String);

        func FileDialogOpen() : (::system::String);

        func FileDialogSave() : (::system::String);

        func FileDialogTextLoadingFiles() : (::system::String);

        func FileDialogTextLoadingFolders() : (::system::String);

        func FontColorGroup() : (::system::String);

        func FontColorGroup2() : (::system::String);

        func FontDialogTitle() : (::system::String);

        func FontEffectGroup() : (::system::String);

        func FontNameGroup() : (::system::String);

        func FontPreviewGroup() : (::system::String);

        func FontSizeGroup() : (::system::String);

        func Green() : (::system::String);

        func HAA() : (::system::String);

        func Ignore() : (::system::String);

        func Italic() : (::system::String);

        func No() : (::system::String);

        func OK() : (::system::String);

        func Red() : (::system::String);

        func Retry() : (::system::String);

        func Strikeline() : (::system::String);

        func TryAgain() : (::system::String);

        func Underline() : (::system::String);

        func VAA() : (::system::String);

        func Yes() : (::system::String);
    }
}

namespace gaclib_controls
{
    var <ls>DialogStrings : IDialogStringsStrings^[::system::Locale] = {};
}

namespace gaclib_controls
{
    class DialogStrings
    {
        static func <ls_en-US>BuildStrings(<ls>locale : ::system::Locale) : (::gaclib_controls::IDialogStringsStrings^)
        {
            return new (::gaclib_controls::IDialogStringsStrings^)
            {
                override func Abort() : (::system::String)
                {
                    return "Abort";
                }

                override func Blue() : (::system::String)
                {
                    return "Blue:";
                }

                override func Bold() : (::system::String)
                {
                    return "Bold";
                }

                override func Cancel() : (::system::String)
                {
                    return "Cancel";
                }

                override func Color() : (::system::String)
                {
                    return "Color:";
                }

                override func ColorDialogTitle() : (::system::String)
                {
                    return "Choose Color";
                }

                override func Continue() : (::system::String)
                {
                    return "Continue";
                }

                override func FileDialogAskCreateFile() : (::system::String)
                {
                    return "Do you want to create the following file(s):";
                }

                override func FileDialogAskOverrideFile() : (::system::String)
                {
                    return "Do you want to override the following file(s):";
                }

                override func FileDialogErrorEmptySelection() : (::system::String)
                {
                    return "At least one file must be selected.";
                }

                override func FileDialogErrorFileExpected() : (::system::String)
                {
                    return "File(s) expected but folder(s) selected:";
                }

                override func FileDialogErrorFileNotExist() : (::system::String)
                {
                    return "File(s) not exist:";
                }

                override func FileDialogErrorFolderNotExist() : (::system::String)
                {
                    return "Folder not exist:";
                }

                override func FileDialogErrorMultipleSelectionNotEnabled() : (::system::String)
                {
                    return "Multiple selection is not enabled in this dialog.";
                }

                override func FileDialogFileName() : (::system::String)
                {
                    return "File Name:";
                }

                override func FileDialogOpen() : (::system::String)
                {
                    return "Open";
                }

                override func FileDialogSave() : (::system::String)
                {
                    return "Save";
                }

                override func FileDialogTextLoadingFiles() : (::system::String)
                {
                    return "(Loading Folders and Files...)";
                }

                override func FileDialogTextLoadingFolders() : (::system::String)
                {
                    return "(Loading...)";
                }

                override func FontColorGroup() : (::system::String)
                {
                    return "Color:";
                }

                override func FontColorGroup2() : (::system::String)
                {
                    return "Pick a Color:";
                }

                override func FontDialogTitle() : (::system::String)
                {
                    return "Choose Font";
                }

                override func FontEffectGroup() : (::system::String)
                {
                    return "Effect:";
                }

                override func FontNameGroup() : (::system::String)
                {
                    return "Font:";
                }

                override func FontPreviewGroup() : (::system::String)
                {
                    return "Preview:";
                }

                override func FontSizeGroup() : (::system::String)
                {
                    return "Size:";
                }

                override func Green() : (::system::String)
                {
                    return "Green:";
                }

                override func HAA() : (::system::String)
                {
                    return "Horizontal Antialias";
                }

                override func Ignore() : (::system::String)
                {
                    return "Ignore";
                }

                override func Italic() : (::system::String)
                {
                    return "Italic";
                }

                override func No() : (::system::String)
                {
                    return "No";
                }

                override func OK() : (::system::String)
                {
                    return "OK";
                }

                override func Red() : (::system::String)
                {
                    return "Red:";
                }

                override func Retry() : (::system::String)
                {
                    return "Retry";
                }

                override func Strikeline() : (::system::String)
                {
                    return "Strike-through";
                }

                override func TryAgain() : (::system::String)
                {
                    return "Try Again";
                }

                override func Underline() : (::system::String)
                {
                    return "Underline";
                }

                override func VAA() : (::system::String)
                {
                    return "Vertical Antialias";
                }

                override func Yes() : (::system::String)
                {
                    return "Yes";
                }
            };
        }

        static func Install(<ls>locale : ::system::Locale, <ls>impl : IDialogStringsStrings^) : (void)
        {
            if (<ls>DialogStrings.Keys.Contains(<ls>locale))
            {
                raise (("Localized strings \"gaclib_controls::DialogStrings\" has already registered for locale \"" & <ls>locale) & "\".");
            }
            <ls>DialogStrings.Set(<ls>locale, <ls>impl);
        }

        static func Get(<ls>locale : ::system::Locale) : (IDialogStringsStrings^)
        {
            if (<ls>DialogStrings.Keys.Contains(<ls>locale))
            {
                return <ls>DialogStrings[<ls>locale];
            }
            return <ls>DialogStrings[(cast (::system::Locale) "en-US")];
        }

        new ()
        {
        }
    }
}

namespace gaclib_controls
{
    static
    {
        ::gaclib_controls::DialogStrings::Install((cast (::system::Locale) "en-US"), DialogStrings::<ls_en-US>BuildStrings((cast (::system::Locale) "en-US")));
    }
}

