================================(1/23)================================
module <constructor>gaclib_controls::ColorComponentControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class ColorComponentControlConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::ColorComponentControl* = null of (::gaclib_controls::ColorComponentControl*);

        @cpp:Protected
        var textBox : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var tracker : ::presentation::controls::GuiScroll* = null of (::presentation::controls::GuiScroll*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-ColorComponentControl>Initialize(<this> : ::gaclib_controls::ColorComponentControl*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int64));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(1, 2);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Absolute; absolute : 48;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (textBox = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("textBox", textBox);
            }
            (<precompile>2 = textBox.BoundsComposition);
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>1.AddChild(textBox.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 1, 1, 1);
            }
            {
                (tracker = new (::presentation::controls::GuiScroll*)(::presentation::theme::ThemeName::HTracker));
                tracker.SetPageSize(0);
                <this>.SetNamedObject("tracker", tracker);
            }
            {
                (tracker.BigMove = 16 of (::system::Int64));
            }
            {
                (tracker.SmallMove = 1 of (::system::Int64));
            }
            {
                (tracker.PageSize = 1 of (::system::Int64));
            }
            {
                (tracker.TotalSize = 256 of (::system::Int64));
            }
            (<precompile>4 = tracker.BoundsComposition);
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>3.AddChild(tracker.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorComponentControl* = null of (::gaclib_controls::ColorComponentControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (string) <bind-cache>0.Value) of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gaclib_controls::ColorComponentControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorComponentControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = textBox.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (textBox.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorComponentControl* = null of (::gaclib_controls::ColorComponentControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.TextBoxAlt of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gaclib_controls::ColorComponentControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextBoxAltChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextBoxAltChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorComponentControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = textBox.Alt;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (textBox.Alt = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var value = ((cast (int) textBox.Text) ?? (-1));
                    if ((value == (-1)))
                    {
                        return;
                    }
                    else if ((value < 0))
                    {
                        (tracker.Position = 0);
                    }
                    else if ((value > 255))
                    {
                        (tracker.Position = 255);
                    }
                    else
                    {
                        (tracker.Position = value);
                    }
                };
                attach(textBox.TextChanged, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiScroll* = null of (::presentation::controls::GuiScroll*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Position of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (tracker ?? null of (::presentation::controls::GuiScroll*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.PositionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.PositionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiScroll*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Value;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Value = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(2/23)================================
module <instance>gaclib_controls::ColorComponentControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(ColorComponentControlConstructor))
    class ColorComponentControl : ::presentation::controls::GuiCustomControl, ColorComponentControlConstructor
    {
        @cpp:Private
        var <prop>Value : int = 0;

        func GetValue() : (int)
        {
            return <prop>Value;
        }

        func SetValue(<value> : int) : (void)
        {
            if ((<prop>Value != <value>))
            {
                (<prop>Value = <value>);
                ValueChanged();
            }
        }

        event ValueChanged();

        prop Value : int{GetValue, SetValue : ValueChanged}

        @cpp:Private
        var <prop>TextBoxAlt : string = "";

        func GetTextBoxAlt() : (string)
        {
            return <prop>TextBoxAlt;
        }

        func SetTextBoxAlt(<value> : string) : (void)
        {
            if ((<prop>TextBoxAlt != <value>))
            {
                (<prop>TextBoxAlt = <value>);
                TextBoxAltChanged();
            }
        }

        event TextBoxAltChanged();

        prop TextBoxAlt : string{GetTextBoxAlt, SetTextBoxAlt : TextBoxAltChanged}

        new* ()
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::ColorComponentControl");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-ColorComponentControl>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(3/23)================================
module <constructor>gaclib_controls::ColorDialogControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class ColorDialogControlConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

        @cpp:Protected
        var ViewModel : ::presentation::IColorDialogViewModel^ = null of (::presentation::IColorDialogViewModel^);

        @cpp:Protected
        var colorRed : ::gaclib_controls::ColorComponentControl* = null of (::gaclib_controls::ColorComponentControl*);

        @cpp:Protected
        var colorGreen : ::gaclib_controls::ColorComponentControl* = null of (::gaclib_controls::ColorComponentControl*);

        @cpp:Protected
        var colorBlue : ::gaclib_controls::ColorComponentControl* = null of (::gaclib_controls::ColorComponentControl*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <gaclib_controls-ColorDialogControl>Initialize(<this> : ::gaclib_controls::ColorDialogControl*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int64));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(4, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(3, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(2, 0, 1, 1);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>5.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(3, 0, 1, 1);
            }
            {
                (<precompile>8 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>9.SetSite(0, 1, 1, 1);
            }
            (colorRed = new (::gaclib_controls::ColorComponentControl*)());
            <this>.SetNamedObject("colorRed", colorRed);
            {
                (colorRed.TextBoxAlt = "R");
            }
            (<precompile>10 = colorRed.BoundsComposition);
            {
                (<precompile>10.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>9.AddChild(colorRed.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>9);
            }
            (<precompile>11 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>11.SetSite(1, 1, 1, 1);
            }
            (colorGreen = new (::gaclib_controls::ColorComponentControl*)());
            <this>.SetNamedObject("colorGreen", colorGreen);
            {
                (colorGreen.TextBoxAlt = "G");
            }
            (<precompile>12 = colorGreen.BoundsComposition);
            {
                (<precompile>12.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>11.AddChild(colorGreen.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>11);
            }
            (<precompile>13 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>13.SetSite(2, 1, 1, 1);
            }
            (colorBlue = new (::gaclib_controls::ColorComponentControl*)());
            <this>.SetNamedObject("colorBlue", colorBlue);
            {
                (colorBlue.TextBoxAlt = "B");
            }
            (<precompile>14 = colorBlue.BoundsComposition);
            {
                (<precompile>14.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>13.AddChild(colorBlue.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>13);
            }
            (<precompile>15 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>15.PreferredMinSize = {x : 256;} of (::presentation::Size));
            }
            {
                <precompile>15.SetSite(3, 1, 1, 1);
            }
            (<precompile>16 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>15.OwnedElement = <precompile>16);
            }
            {
                <precompile>0.AddChild(<precompile>15);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Red();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Green();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Blue();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Color();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (colorRed.Value = (cast (int) ViewModel.Color.r));
            }
            {
                (colorGreen.Value = (cast (int) ViewModel.Color.g));
            }
            {
                (colorBlue.Value = (cast (int) ViewModel.Color.b));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Value of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gaclib_controls::ColorDialogControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>16.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>16.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>0_1 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>0_2 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.ReadColor() of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>0_1() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>0_2() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gaclib_controls::ColorDialogControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.colorRed.ValueChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>0_1 = (attach(<bind-cache>0.colorGreen.ValueChanged, <bind-callback>0_1) ?? null));
                            (<bind-handler>0_2 = (attach(<bind-cache>0.colorBlue.ValueChanged, <bind-callback>0_2) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.colorRed.ValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>0_1 is not null)
                            {
                                detach(<bind-cache>0.colorGreen.ValueChanged, <bind-handler>0_1);
                                (<bind-handler>0_1 = null);
                            }
                            if (<bind-handler>0_2 is not null)
                            {
                                detach(<bind-cache>0.colorBlue.ValueChanged, <bind-handler>0_2);
                                (<bind-handler>0_2 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>0_1 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>0_2 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Value;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Value = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(4/23)================================
module <instance>gaclib_controls::ColorDialogControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(ColorDialogControlConstructor))
    class ColorDialogControl : ::presentation::controls::GuiCustomControl, ColorDialogControlConstructor
    {
        @cpp:Private
        var <prop>Value : Color = (cast (Color) "#FFFFFF");

        func GetValue() : (Color)
        {
            return <prop>Value;
        }

        func SetValue(<value> : Color) : (void)
        {
            if ((<prop>Value != <value>))
            {
                (<prop>Value = <value>);
                ValueChanged();
            }
        }

        event ValueChanged();

        prop Value : Color{GetValue, SetValue : ValueChanged}

        func ReadColor() : (Color)
        {
            return {r : (cast (UInt8) colorRed.Value); g : (cast (UInt8) colorGreen.Value); b : (cast (UInt8) colorBlue.Value);};
        }

        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        @cpp:Private
        var <parameter>ViewModel : presentation::IColorDialogViewModel^ = null of (::presentation::IColorDialogViewModel^);

        func GetViewModel() : (presentation::IColorDialogViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : presentation::IColorDialogViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : presentation::IColorDialogViewModel^)
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::ColorDialogControl");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-ColorDialogControl>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(5/23)================================
module <constructor>gaclib_controls::ColorDialogWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class ColorDialogWindowConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::ColorDialogWindow* = null of (::gaclib_controls::ColorDialogWindow*);

        @cpp:Protected
        var ViewModel : ::presentation::IColorDialogViewModel^ = null of (::presentation::IColorDialogViewModel^);

        @cpp:Protected
        var colorControl : ::gaclib_controls::ColorDialogControl* = null of (::gaclib_controls::ColorDialogControl*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-ColorDialogWindow>Initialize(<this> : ::gaclib_controls::ColorDialogWindow*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (self.IconVisible = false);
            }
            {
                (self.MinimizedBox = false);
            }
            {
                (self.MaximizedBox = false);
            }
            {
                (self.ShowInTaskBar = false);
            }
            {
                (self.ClientSize = {x : 240; y : 120;} of (::presentation::Size));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 10 of (::system::Int64));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 10; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 3);
            }
            (colorControl = new (::gaclib_controls::ColorDialogControl*)(ViewModel));
            <this>.SetNamedObject("colorControl", colorControl);
            (<precompile>2 = colorControl.BoundsComposition);
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>1.AddChild(colorControl.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>5 = <precompile>4.BoundsComposition);
            {
                (<precompile>5.PreferredMinSize = {x : 80; y : 24;} of (::presentation::Size));
            }
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>4.Alt = "O");
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(1, 2, 1, 1);
            }
            {
                (<precompile>7 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>8 = <precompile>7.BoundsComposition);
            {
                (<precompile>8.PreferredMinSize = {x : 80; y : 24;} of (::presentation::Size));
            }
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>7.Alt = "C");
            }
            {
                <precompile>6.AddChild(<precompile>7.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>6);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogWindow* = null of (::gaclib_controls::ColorDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.OK();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (ViewModel.Confirmed = true);
                    (ViewModel.Color = colorControl.Value);
                    self.Close();
                };
                attach(<precompile>4.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogWindow* = null of (::gaclib_controls::ColorDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Cancel();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.Close();
                };
                attach(<precompile>7.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::ColorDialogWindow* = null of (::gaclib_controls::ColorDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.ColorDialogTitle();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::ColorDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::ColorDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(6/23)================================
module <instance>gaclib_controls::ColorDialogWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(ColorDialogWindowConstructor))
    class ColorDialogWindow : ::presentation::controls::GuiWindow, ColorDialogWindowConstructor
    {
        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        @cpp:Private
        var <parameter>ViewModel : presentation::IColorDialogViewModel^ = null of (::presentation::IColorDialogViewModel^);

        func GetViewModel() : (presentation::IColorDialogViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : presentation::IColorDialogViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : presentation::IColorDialogViewModel^)
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::ColorDialogWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-ColorDialogWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(7/23)================================
module <constructor>gaclib_controls::FileDialogWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class FileDialogWindowConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::FileDialogWindow* = null of (::gaclib_controls::FileDialogWindow*);

        @cpp:Protected
        var ViewModel : ::presentation::IFileDialogViewModel^ = null of (::presentation::IFileDialogViewModel^);

        @cpp:Protected
        var filePickerControl : ::gaclib_controls::FilePickerControl* = null of (::gaclib_controls::FilePickerControl*);

        @cpp:Protected
        var buttonOK : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-FileDialogWindow>Initialize(<this> : ::gaclib_controls::FileDialogWindow*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (self.IconVisible = false);
            }
            {
                (self.MinimizedBox = false);
            }
            {
                (self.MaximizedBox = false);
            }
            {
                (self.ShowInTaskBar = false);
            }
            {
                (self.ClientSize = {x : 480; y : 360;} of (::presentation::Size));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int64));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 5; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 3);
            }
            (filePickerControl = new (::gaclib_controls::FilePickerControl*)(ViewModel));
            <this>.SetNamedObject("filePickerControl", filePickerControl);
            (<precompile>2 = filePickerControl.BoundsComposition);
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>1.AddChild(filePickerControl.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(1, 1, 1, 1);
            }
            {
                (buttonOK = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
                <this>.SetNamedObject("buttonOK", buttonOK);
            }
            (<precompile>4 = buttonOK.BoundsComposition);
            {
                (<precompile>4.PreferredMinSize = {x : 80; y : 24;} of (::presentation::Size));
            }
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (buttonOK.Alt = "O");
            }
            {
                <precompile>3.AddChild(buttonOK.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(1, 2, 1, 1);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>7 = <precompile>6.BoundsComposition);
            {
                (<precompile>7.PreferredMinSize = {x : 80; y : 24;} of (::presentation::Size));
            }
            {
                (<precompile>7.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>6.Alt = "C");
            }
            {
                <precompile>5.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func () : (::system::Void)
                {
                    GuiApplication::GetApplication().InvokeInMainThread(self.RelatedControlHost, func () : (void)
                    {
                        self.Close();
                    });
                };
                attach(filePickerControl.RequestClose, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::IFileDialogViewModel^ = null of (::presentation::IFileDialogViewModel^);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (!<bind-cache>0.IsLoadingFiles) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (ViewModel ?? null of (::presentation::IFileDialogViewModel^)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.IsLoadingFilesChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.IsLoadingFilesChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::IFileDialogViewModel^));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = buttonOK.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (buttonOK.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (ViewModel.TryConfirm(self, filePickerControl.Selection))
                    {
                        self.Close();
                    }
                };
                attach(buttonOK.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FileDialogWindow* = null of (::gaclib_controls::FileDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Cancel();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FileDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FileDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.Close();
                };
                attach(<precompile>6.Clicked, <event-handler>);
            }
            {
                (self.Text = ViewModel.Title);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(8/23)================================
module <instance>gaclib_controls::FileDialogWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(FileDialogWindowConstructor))
    class FileDialogWindow : ::presentation::controls::GuiWindow, FileDialogWindowConstructor
    {
        func MakeOpenFileDialog() : (void)
        {
            (buttonOK.Text = Strings.FileDialogOpen());
        }

        func MakeSaveFileDialog() : (void)
        {
            (buttonOK.Text = Strings.FileDialogSave());
        }

        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        @cpp:Private
        var <parameter>ViewModel : presentation::IFileDialogViewModel^ = null of (::presentation::IFileDialogViewModel^);

        func GetViewModel() : (presentation::IFileDialogViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : presentation::IFileDialogViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : presentation::IFileDialogViewModel^)
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::FileDialogWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-FileDialogWindow>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            GuiApplication::GetApplication().InvokeInMainThread(self, func () : (void)
            {
                filePickerControl.LocateSelectedFolderInTreeView();
            });
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(9/23)================================
module <constructor>gaclib_controls::FilePickerControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class FilePickerControlConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::FilePickerControl* = null of (::gaclib_controls::FilePickerControl*);

        @cpp:Protected
        var ViewModel : ::presentation::IFileDialogViewModel^ = null of (::presentation::IFileDialogViewModel^);

        @cpp:Protected
        var textBox : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var treeView : ::presentation::controls::GuiBindableTreeView* = null of (::presentation::controls::GuiBindableTreeView*);

        @cpp:Protected
        var dataGrid : ::presentation::controls::GuiBindableDataGrid* = null of (::presentation::controls::GuiBindableDataGrid*);

        @cpp:Protected
        var comboBox : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiColumnSplitterComposition* = null of (::presentation::compositions::GuiColumnSplitterComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiColumnSplitterComposition* = null of (::presentation::compositions::GuiColumnSplitterComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>18 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>19 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>20 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>21 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::GuiBindableTextList* = null of (::presentation::controls::GuiBindableTextList*);

        @cpp:Protected
        var <precompile>23 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>24 : ::presentation::IFileDialogViewModel^ = null of (::presentation::IFileDialogViewModel^);

        @cpp:Protected
        func <gaclib_controls-FilePickerControl>Initialize(<this> : ::gaclib_controls::FilePickerControl*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            (<precompile>24 = self.ViewModel);
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int64));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 1);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            (<precompile>3 = <precompile>2.BoundsComposition);
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(1, 0, 1, 1);
            }
            (<precompile>5 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>5.CellPadding = 5 of (::system::Int64));
            }
            {
                (<precompile>5.BorderVisible = false);
            }
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>5.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>5.SetRowsAndColumns(1, 2);
                <precompile>5.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>5.SetColumnOption(0, {composeType : Absolute; absolute : 192;} of (::presentation::compositions::GuiCellOption));
                <precompile>5.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>6 = new (::presentation::compositions::GuiColumnSplitterComposition*)());
            {
                (<precompile>6.ColumnsToTheLeft = 1 of (::system::Int64));
            }
            {
                <precompile>5.AddChild(<precompile>6);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(0, 0, 1, 1);
            }
            {
                (treeView = new (::presentation::controls::GuiBindableTreeView*)(::presentation::theme::ThemeName::TreeView));
                <this>.SetNamedObject("treeView", treeView);
            }
            {
                (treeView.ChildrenProperty = func (<item> : ::system::Object) : (::system::Enumerable^)
                {
                    var item = (cast (IFileDialogFolder^) <item>);
                    return item.Folders;
                });
            }
            {
                (treeView.HorizontalAlwaysVisible = false);
            }
            {
                (treeView.VerticalAlwaysVisible = false);
            }
            {
                (treeView.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (IFileDialogFolder^) <item>);
                    return item.Name;
                });
            }
            (<precompile>8 = treeView.BoundsComposition);
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (treeView.Alt = "D");
            }
            {
                <precompile>7.AddChild(treeView.BoundsComposition);
            }
            {
                <precompile>5.AddChild(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>9.SetSite(0, 1, 1, 1);
            }
            {
                (dataGrid = new (::presentation::controls::GuiBindableDataGrid*)(::presentation::theme::ThemeName::ListView));
                <this>.SetNamedObject("dataGrid", dataGrid);
            }
            (<precompile>12 = dataGrid.FocusableComposition);
            {
                (dataGrid.View = ListViewView::List of (::presentation::controls::ListViewView));
            }
            {
                (dataGrid.HorizontalAlwaysVisible = false);
            }
            {
                (dataGrid.VerticalAlwaysVisible = false);
            }
            (<precompile>11 = dataGrid.BoundsComposition);
            {
                (<precompile>11.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (dataGrid.Alt = "F");
            }
            (<precompile>10 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>10.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (IFileDialogFile^) <item>);
                    return item.Name;
                });
            }
            {
                var <collection> = dataGrid.Columns;
                <collection>.Add(<precompile>10);
            }
            {
                <precompile>9.AddChild(dataGrid.BoundsComposition);
            }
            {
                <precompile>5.AddChild(<precompile>9);
            }
            {
                <precompile>4.AddChild(<precompile>5);
            }
            {
                <precompile>0.AddChild(<precompile>4);
            }
            (<precompile>13 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>13.SetSite(2, 0, 1, 1);
            }
            (<precompile>14 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>14.CellPadding = 5 of (::system::Int64));
            }
            {
                (<precompile>14.BorderVisible = false);
            }
            {
                (<precompile>14.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>14.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>14.SetRowsAndColumns(1, 3);
                <precompile>14.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>14.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>14.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>14.SetColumnOption(2, {composeType : Absolute; absolute : 120;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>15 = new (::presentation::compositions::GuiColumnSplitterComposition*)());
            {
                (<precompile>15.ColumnsToTheLeft = 2 of (::system::Int64));
            }
            {
                <precompile>14.AddChild(<precompile>15);
            }
            (<precompile>16 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>16.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>17 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>16.AddChild(<precompile>17.BoundsComposition);
            }
            {
                <precompile>14.AddChild(<precompile>16);
            }
            (<precompile>18 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>18.SetSite(0, 1, 1, 1);
            }
            {
                (textBox = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("textBox", textBox);
            }
            (<precompile>20 = textBox.FocusableComposition);
            (<precompile>19 = textBox.BoundsComposition);
            {
                (<precompile>19.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (textBox.Alt = "S");
            }
            {
                <precompile>18.AddChild(textBox.BoundsComposition);
            }
            {
                <precompile>14.AddChild(<precompile>18);
            }
            (<precompile>21 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>21.SetSite(0, 2, 1, 1);
            }
            {
                (<precompile>22 = new (::presentation::controls::GuiBindableTextList*)(::presentation::theme::ThemeName::TextList));
            }
            {
                (<precompile>22.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>22.VerticalAlwaysVisible = false);
            }
            {
                (<precompile>22.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (IFileDialogFilter^) <item>);
                    return item.Name;
                });
            }
            {
                (comboBox = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, <precompile>22));
                <this>.SetNamedObject("comboBox", comboBox);
            }
            (<precompile>23 = comboBox.BoundsComposition);
            {
                (<precompile>23.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (comboBox.Alt = "E");
            }
            {
                <precompile>21.AddChild(comboBox.BoundsComposition);
            }
            {
                <precompile>14.AddChild(<precompile>21);
            }
            {
                <precompile>13.AddChild(<precompile>14);
            }
            {
                <precompile>0.AddChild(<precompile>13);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::IFileDialogViewModel^ = null of (::presentation::IFileDialogViewModel^);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.SelectedFolder.FullPath ?? "") of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (ViewModel ?? null of (::presentation::IFileDialogViewModel^)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedFolderChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedFolderChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::IFileDialogViewModel^));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (treeView.ImageProperty = [let node = (cast (IFileDialogFolder^) $1) in ((node.Type == FileDialogFolderType::Folder) ? self.imageFolder : null)]);
            }
            {
                (dataGrid.MultiSelect = ViewModel.EnabledMultipleSelection);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::IFileDialogViewModel^ = null of (::presentation::IFileDialogViewModel^);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.CreateFileFilter(<bind-cache>0.SelectedFilter) of (::presentation::controls::list::IDataFilter^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (ViewModel ?? null of (::presentation::IFileDialogViewModel^)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedFilterChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedFilterChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::IFileDialogViewModel^));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = dataGrid.AdditionalFilter;
                    var <new> = (cast (::presentation::controls::list::IDataFilter^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (dataGrid.AdditionalFilter = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiKeyEventArgs*) : (::system::Void)
                {
                    if (((((!arguments.ctrl) and (!arguments.shift)) and (!arguments.alt)) and (arguments.code == VKEY::KEY_RETURN)))
                    {
                        if (ViewModel.TryConfirm((cast (::presentation::controls::GuiWindow*) self.RelatedControlHost), self.Selection))
                        {
                            self.RequestClose();
                        }
                    }
                };
                attach(<precompile>12.keyUp, <event-handler>);
            }
            {
                (dataGrid.SmallImageProperty = [let node = (cast (IFileDialogFile^) $1) in ((node.Type == FileDialogFileType::Folder) ? self.imageFolder : (node.Type == FileDialogFileType::File) ? self.imageFile : null)]);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (textBox.Text = ViewModel.GetDisplayString(self.GetSelectedFiles()));
                    textBox.Select({row : 0; column : 0;}, {row : 0; column : 0;});
                };
                attach(dataGrid.SelectionChanged, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiItemMouseEventArgs*) : (::system::Void)
                {
                    var file = ViewModel.Files[arguments.itemIndex];
                    var selection = ViewModel.ParseDisplayString(ViewModel.GetDisplayString({file;}));
                    GuiApplication::GetApplication().InvokeInMainThread(self.RelatedControlHost, func () : (void)
                    {
                        if (ViewModel.TryConfirm((cast (::presentation::controls::GuiWindow*) self.RelatedControlHost), selection))
                        {
                            self.RequestClose();
                        }
                    });
                };
                attach(dataGrid.ItemLeftButtonDoubleClick, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FilePickerControl* = null of (::gaclib_controls::FilePickerControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.FileDialogFileName();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FilePickerControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FilePickerControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>17.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>17.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiKeyEventArgs*) : (::system::Void)
                {
                    if (((((!arguments.ctrl) and (!arguments.shift)) and (!arguments.alt)) and (arguments.code == VKEY::KEY_RETURN)))
                    {
                        if (ViewModel.TryConfirm((cast (::presentation::controls::GuiWindow*) self.RelatedControlHost), self.Selection))
                        {
                            self.RequestClose();
                        }
                    }
                };
                attach(<precompile>20.keyUp, <event-handler>);
            }
            {
                (<precompile>22.ItemSource = ViewModel.Filters);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.SelectedItem as (::presentation::IFileDialogFilter^)) of (::presentation::IFileDialogFilter^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (comboBox ?? null of (::presentation::controls::GuiComboBoxListControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedIndexChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedIndexChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiComboBoxListControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>24.SelectedFilter;
                    var <new> = (cast (::presentation::IFileDialogFilter^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>24.SelectedFilter = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiBindableTreeView* = null of (::presentation::controls::GuiBindableTreeView*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.SelectedItem as (::presentation::IFileDialogFolder^)) of (::presentation::IFileDialogFolder^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (treeView ?? null of (::presentation::controls::GuiBindableTreeView*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiBindableTreeView*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>24.SelectedFolder;
                    var <new> = (cast (::presentation::IFileDialogFolder^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>24.SelectedFolder = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func () : (::system::Void)
                {
                    self.LocateSelectedFolderInTreeView();
                };
                attach(<precompile>24.SelectedFolderChanged, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(10/23)================================
module <instance>gaclib_controls::FilePickerControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(FilePickerControlConstructor))
    class FilePickerControl : ::presentation::controls::GuiCustomControl, FilePickerControlConstructor
    {
        var imageFolder : GuiImageData^ = null;

        var imageFile : GuiImageData^ = null;

        prop Selection : string{}{GetSelection}

        event RequestClose();

        func GetSelectedFiles() : (IFileDialogFile^{})
        {
            return (cast (::presentation::IFileDialogFile^{}) ::system::EnumerableCoroutine::Create(func (<co-impl> : ::system::EnumerableCoroutine::IImpl*) : (::system::Coroutine^)
            {
                return new (::system::Coroutine^)
                {
                    var <co0>file : ::presentation::IFileDialogFile^ = null of (::presentation::IFileDialogFile^);

                    var <co1>item : ::system::Int64 = 0 of (::system::Int64);

                    var <co2-for-enumerable>item : ::system::Enumerable^ = null of (::system::Enumerable^);

                    var <co3-for-enumerator>item : ::system::Enumerator^ = null of (::system::Enumerator^);

                    var <co-state> : ::system::Int64 = 0;

                    var <co-state-before-pause> : ::system::Int64 = (-1);

                    @cpp:Private
                    var <prop>Failure : ::system::Exception^ = null;

                    override func GetFailure() : (::system::Exception^)
                    {
                        return <prop>Failure;
                    }

                    @cpp:Protected
                    func SetFailure(<value> : ::system::Exception^) : (void)
                    {
                        (<prop>Failure = <value>);
                    }

                    @cpp:Private
                    var <prop>Status : ::system::CoroutineStatus = Waiting;

                    override func GetStatus() : (::system::CoroutineStatus)
                    {
                        return <prop>Status;
                    }

                    @cpp:Protected
                    func SetStatus(<value> : ::system::CoroutineStatus) : (void)
                    {
                        (<prop>Status = <value>);
                    }

                    override func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
                    {
                        if ((Status != ::system::CoroutineStatus::Waiting))
                        {
                            raise "Resume should be called only when the coroutine is in the waiting status.";
                        }
                        SetStatus(Executing);
                        try
                        {
                            if ((<co-state-before-pause> != (-1)))
                            {
                                if (<co-result> is null)
                                {
                                    (<co-state-before-pause> = (-1));
                                }
                                else if (<co-result>.Failure is null)
                                {
                                    (<co-state-before-pause> = (-1));
                                }
                                else
                                {
                                    {
                                        (<co-state-before-pause> = (-1));
                                        raise <co-result>.Failure;
                                    }
                                }
                            }
                            while (true)
                            {
                                if ((<co-state> == 0))
                                {
                                    (<co2-for-enumerable>item = dataGrid.SelectedItems of (::system::Enumerable^));
                                    (<co3-for-enumerator>item = <co2-for-enumerable>item.CreateEnumerator());
                                    if (<co3-for-enumerator>item.Next())
                                    {
                                        (<co-state> = 3);
                                        continue;
                                    }
                                    (<co-state> = 1);
                                    continue;
                                }
                                if ((<co-state> == 1))
                                {
                                    SetStatus(Stopped);
                                    return;
                                }
                                if ((<co-state> == 2))
                                {
                                    if (<co3-for-enumerator>item.Next())
                                    {
                                        (<co-state> = 3);
                                        continue;
                                    }
                                    (<co-state> = 1);
                                    continue;
                                }
                                if ((<co-state> == 3))
                                {
                                    (<co1>item = (cast (::system::Int64) <co3-for-enumerator>item.GetCurrent()));
                                    (<co0>file = (ViewModel.Files[<co1>item] as (IFileDialogFile^)));
                                    if (<co0>file is not null)
                                    {
                                        SetStatus(Waiting);
                                        (<co-state-before-pause> = <co-state>);
                                        (<co-state> = 4);
                                        {
                                            ::system::EnumerableCoroutine::YieldAndPause(<co-impl>, <co0>file);
                                        }
                                        return;
                                    }
                                    (<co-state> = 2);
                                    continue;
                                }
                                if ((<co-state> == 4))
                                {
                                    if (<co-result> is not null)
                                    {
                                        if (<co-result>.Failure is not null)
                                        {
                                            raise <co-result>.Failure;
                                        }
                                    }
                                    (<co-state> = 2);
                                    continue;
                                }
                            }
                        }
                        catch (<co-ex>)
                        {
                            SetFailure(<co-ex>);
                            SetStatus(Stopped);
                            if (<raise-exception>)
                            {
                                raise;
                            }
                        }
                    }
                };
            }));
        }

        func GetSelection() : (string{})
        {
            return ViewModel.ParseDisplayString(textBox.Text);
        }

        func LocateSelectedFolderInTreeView() : (void)
        {
            var fragments : IFileDialogFolder^[] = {};
            var currentFolder = ViewModel.SelectedFolder;
            if (currentFolder is null)
            {
                return;
            }
            while ((currentFolder is not null and (currentFolder.Type == FileDialogFolderType::Folder)))
            {
                fragments.Add(currentFolder);
                (currentFolder = currentFolder.Parent);
            }
            var currentNode = treeView.NodeRootProvider.RootNode;
            {
                var <for-enumerable>fragment = ::system::Sys::ReverseEnumerable(fragments);
                var <for-enumerator>fragment = <for-enumerable>fragment.CreateEnumerator();
                while (<for-enumerator>fragment.Next())
                {
                    var fragment = (cast (::presentation::IFileDialogFolder^) <for-enumerator>fragment.GetCurrent());
                    {
                        (currentNode.Expanding = true);
                        (currentNode = currentNode.GetChild(fragment.Index));
                        if (currentNode is null)
                        {
                            return;
                        }
                    }
                }
            }
            var index = treeView.NodeItemView.CalculateNodeVisibilityIndex((cast (::presentation::controls::tree::INodeProvider*) currentNode));
            treeView.EnsureItemVisible(index);
            treeView.SelectItemsByClick(index, false, false, true);
        }

        func CreateFileFilter(filter : IFileDialogFilter^) : (IDataFilter^)
        {
            if (filter is null)
            {
                return null;
            }
            else
            {
                return new (IDataFilter^)
                {
                    override func SetCallback(value : IDataProcessorCallback*) : (void)
                    {
                    }

                    override func Filter(row : object) : (bool)
                    {
                        return filter.FilterFile((cast (IFileDialogFile^) row));
                    }
                };
            }
        }

        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        @cpp:Private
        var <parameter>ViewModel : presentation::IFileDialogViewModel^ = null of (::presentation::IFileDialogViewModel^);

        func GetViewModel() : (presentation::IFileDialogViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : presentation::IFileDialogViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : presentation::IFileDialogViewModel^)
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::FilePickerControl");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-FilePickerControl>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            (imageFolder = (cast (GuiImageData^) self.ResolveResource("res", "Images/Folder", true)));
            (imageFile = (cast (GuiImageData^) self.ResolveResource("res", "Images/File", true)));
            ViewModel.InitLocalizedText(self.Strings.FileDialogTextLoadingFolders(), self.Strings.FileDialogTextLoadingFiles(), self.Strings.FileDialogErrorEmptySelection(), self.Strings.FileDialogErrorFileNotExist(), self.Strings.FileDialogErrorFileExpected(), self.Strings.FileDialogErrorFolderNotExist(), self.Strings.FileDialogErrorMultipleSelectionNotEnabled(), self.Strings.FileDialogAskCreateFile(), self.Strings.FileDialogAskOverrideFile());
            (treeView.ItemSource = ViewModel.RootFolder);
            (dataGrid.ItemSource = ViewModel.Files);
            (comboBox.SelectedIndex = ViewModel.Filters.IndexOf(ViewModel.SelectedFilter));
            ViewModel.RefreshFiles();
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(11/23)================================
module <constructor>gaclib_controls::FontNameControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class FontNameControlConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::FontNameControl* = null of (::gaclib_controls::FontNameControl*);

        @cpp:Protected
        var ViewModel : ::presentation::ICommonFontDialogViewModel^ = null of (::presentation::ICommonFontDialogViewModel^);

        @cpp:Protected
        var textBox : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var textList : ::presentation::controls::GuiBindableTextList* = null of (::presentation::controls::GuiBindableTextList*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-FontNameControl>Initialize(<this> : ::gaclib_controls::FontNameControl*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (<precompile>0 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>6 = <precompile>0.BoundsComposition);
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>1 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>1.CellPadding = 5 of (::system::Int64));
            }
            {
                (<precompile>1.BorderVisible = false);
            }
            {
                (<precompile>1.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>1.SetRowsAndColumns(2, 1);
                <precompile>1.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(0, 0, 1, 1);
            }
            {
                (textBox = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("textBox", textBox);
            }
            (<precompile>3 = textBox.BoundsComposition);
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (textBox.Alt = "F");
            }
            {
                <precompile>2.AddChild(textBox.BoundsComposition);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(1, 0, 1, 1);
            }
            {
                (textList = new (::presentation::controls::GuiBindableTextList*)(::presentation::theme::ThemeName::TextList));
                <this>.SetNamedObject("textList", textList);
            }
            {
                (textList.HorizontalAlwaysVisible = false);
            }
            {
                (textList.VerticalAlwaysVisible = false);
            }
            (<precompile>5 = textList.BoundsComposition);
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (textList.Alt = "N");
            }
            {
                <precompile>4.AddChild(textList.BoundsComposition);
            }
            {
                <precompile>1.AddChild(<precompile>4);
            }
            {
                <precompile>0.ContainerComposition.AddChild(<precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                (textBox.Readonly = ViewModel.FontMustExist);
            }
            {
                (textList.ItemSource = ViewModel.FontList);
            }
            {
                (textList.TextProperty = [(cast (string) $1)]);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (((textList.SelectedItemIndex != (-1)) and (textBox.Text != textList.SelectedItemText)))
                    {
                        (textBox.Text = textList.SelectedItemText);
                    }
                };
                attach(textList.SelectionChanged, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FontNameControl* = null of (::gaclib_controls::FontNameControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.FontNameGroup();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FontNameControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FontNameControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (textBox ?? null of (::presentation::controls::GuiSinglelineTextBox*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSinglelineTextBox*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Value;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Value = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((!ViewModel.FontMustExist) or (ViewModel.FontList.IndexOf(<bind-cache>0.Text) != (-1))) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (textBox ?? null of (::presentation::controls::GuiSinglelineTextBox*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSinglelineTextBox*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Legal;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Legal = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func () : (::system::Void)
                {
                    self.UpdateSelectedIndex();
                };
                attach(self.ValueChanged, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(12/23)================================
module <instance>gaclib_controls::FontNameControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(FontNameControlConstructor))
    class FontNameControl : ::presentation::controls::GuiCustomControl, FontNameControlConstructor
    {
        @cpp:Private
        var <prop>Value : string = "";

        func GetValue() : (string)
        {
            return <prop>Value;
        }

        func SetValue(<value> : string) : (void)
        {
            if ((<prop>Value != <value>))
            {
                (<prop>Value = <value>);
                ValueChanged();
            }
        }

        event ValueChanged();

        prop Value : string{GetValue, SetValue : ValueChanged}

        @cpp:Private
        var <prop>Legal : bool = false;

        func GetLegal() : (bool)
        {
            return <prop>Legal;
        }

        func SetLegal(<value> : bool) : (void)
        {
            if ((<prop>Legal != <value>))
            {
                (<prop>Legal = <value>);
                LegalChanged();
            }
        }

        event LegalChanged();

        prop Legal : bool{GetLegal, SetLegal : LegalChanged}

        func UpdateSelectedIndex() : (void)
        {
            var index = ViewModel.FontList.IndexOf(Value);
            if ((index > (-1)))
            {
                textList.SelectItemsByClick(index, false, false, true);
                textList.EnsureItemVisible(index);
            }
        }

        func InitValue(value : string) : (void)
        {
            (textBox.Text = value);
            textBox.Select({row : 0; column : 0;}, {row : 0; column : 0;});
            UpdateSelectedIndex();
        }

        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        @cpp:Private
        var <parameter>ViewModel : presentation::ICommonFontDialogViewModel^ = null of (::presentation::ICommonFontDialogViewModel^);

        func GetViewModel() : (presentation::ICommonFontDialogViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : presentation::ICommonFontDialogViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : presentation::ICommonFontDialogViewModel^)
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::FontNameControl");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-FontNameControl>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(13/23)================================
module <constructor>gaclib_controls::FontSizeControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class FontSizeControlConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::FontSizeControl* = null of (::gaclib_controls::FontSizeControl*);

        @cpp:Protected
        var textBox : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var textList : ::presentation::controls::GuiBindableTextList* = null of (::presentation::controls::GuiBindableTextList*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-FontSizeControl>Initialize(<this> : ::gaclib_controls::FontSizeControl*) : (::system::Void)
        {
            (self = <this>);
            {
                (<precompile>0 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>6 = <precompile>0.BoundsComposition);
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>1 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>1.CellPadding = 5 of (::system::Int64));
            }
            {
                (<precompile>1.BorderVisible = false);
            }
            {
                (<precompile>1.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>1.SetRowsAndColumns(2, 1);
                <precompile>1.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(0, 0, 1, 1);
            }
            {
                (textBox = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("textBox", textBox);
            }
            (<precompile>3 = textBox.BoundsComposition);
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (textBox.Alt = "S");
            }
            {
                <precompile>2.AddChild(textBox.BoundsComposition);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(1, 0, 1, 1);
            }
            {
                (textList = new (::presentation::controls::GuiBindableTextList*)(::presentation::theme::ThemeName::TextList));
                <this>.SetNamedObject("textList", textList);
            }
            {
                (textList.HorizontalAlwaysVisible = false);
            }
            {
                (textList.VerticalAlwaysVisible = false);
            }
            (<precompile>5 = textList.BoundsComposition);
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (textList.Alt = "L");
            }
            {
                <precompile>4.AddChild(textList.BoundsComposition);
            }
            {
                <precompile>1.AddChild(<precompile>4);
            }
            {
                <precompile>0.ContainerComposition.AddChild(<precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                (textList.ItemSource = self.SizeList);
            }
            {
                (textList.TextProperty = [(cast (string) (cast (int) $1))]);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (((textList.SelectedItemIndex != (-1)) and (textBox.Text != textList.SelectedItemText)))
                    {
                        (textBox.Text = textList.SelectedItemText);
                    }
                };
                attach(textList.SelectionChanged, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FontSizeControl* = null of (::gaclib_controls::FontSizeControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.FontSizeGroup();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FontSizeControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FontSizeControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((cast (int) <bind-cache>0.Text) ?? (-1)) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (textBox ?? null of (::presentation::controls::GuiSinglelineTextBox*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSinglelineTextBox*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Value;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Value = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FontSizeControl* = null of (::gaclib_controls::FontSizeControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Value > 0) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gaclib_controls::FontSizeControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FontSizeControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Legal;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Legal = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func () : (::system::Void)
                {
                    self.UpdateSelectedIndex();
                };
                attach(self.ValueChanged, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(14/23)================================
module <instance>gaclib_controls::FontSizeControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(FontSizeControlConstructor))
    class FontSizeControl : ::presentation::controls::GuiCustomControl, FontSizeControlConstructor
    {
        @cpp:Private
        var <prop>SizeList : int[] = {8; 9; 10; 11; 12; 14; 16; 18; 20; 22; 24; 26; 28; 36; 48; 72;};

        func GetSizeList() : (int[])
        {
            return <prop>SizeList;
        }

        @cpp:Protected
        func SetSizeList(<value> : int[]) : (void)
        {
            (<prop>SizeList = <value>);
        }

        prop SizeList : int[]{GetSizeList}

        @cpp:Private
        var <prop>Value : int = 0;

        func GetValue() : (int)
        {
            return <prop>Value;
        }

        func SetValue(<value> : int) : (void)
        {
            if ((<prop>Value != <value>))
            {
                (<prop>Value = <value>);
                ValueChanged();
            }
        }

        event ValueChanged();

        prop Value : int{GetValue, SetValue : ValueChanged}

        @cpp:Private
        var <prop>Legal : bool = false;

        func GetLegal() : (bool)
        {
            return <prop>Legal;
        }

        func SetLegal(<value> : bool) : (void)
        {
            if ((<prop>Legal != <value>))
            {
                (<prop>Legal = <value>);
                LegalChanged();
            }
        }

        event LegalChanged();

        prop Legal : bool{GetLegal, SetLegal : LegalChanged}

        func UpdateSelectedIndex() : (void)
        {
            var index = self.SizeList.IndexOf(Value);
            if ((index > (-1)))
            {
                textList.SelectItemsByClick(index, false, false, true);
                textList.EnsureItemVisible(index);
            }
        }

        func InitValue(value : int) : (void)
        {
            (textBox.Text = (cast (string) value));
            textBox.Select({row : 0; column : 0;}, {row : 0; column : 0;});
            UpdateSelectedIndex();
        }

        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        new* ()
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::FontSizeControl");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-FontSizeControl>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(15/23)================================
module <constructor>gaclib_controls::FullFontDialogWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class FullFontDialogWindowConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

        @cpp:Protected
        var ViewModel : ::presentation::IFullFontDialogViewModel^ = null of (::presentation::IFullFontDialogViewModel^);

        @cpp:Protected
        var nameControl : ::gaclib_controls::FontNameControl* = null of (::gaclib_controls::FontNameControl*);

        @cpp:Protected
        var sizeControl : ::gaclib_controls::FontSizeControl* = null of (::gaclib_controls::FontSizeControl*);

        @cpp:Protected
        var checkBold : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkItalic : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkUnderline : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkStrikeline : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkHAA : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkVAA : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var colorBounds : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var colorBackground : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>19 : ::presentation::elements::Gui3DBorderElement^ = null of (::presentation::elements::Gui3DBorderElement^);

        @cpp:Protected
        var <precompile>20 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>21 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>22 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>23 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>24 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>25 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>26 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>27 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>28 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>29 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>30 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>31 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>32 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>33 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>34 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-FullFontDialogWindow>Initialize(<this> : ::gaclib_controls::FullFontDialogWindow*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (self.IconVisible = false);
            }
            {
                (self.MinimizedBox = false);
            }
            {
                (self.MaximizedBox = false);
            }
            {
                (self.ShowInTaskBar = false);
            }
            {
                (self.ClientSize = {x : 360; y : 480;} of (::presentation::Size));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 10 of (::system::Int64));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 3);
            }
            (<precompile>2 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>2.CellPadding = 10 of (::system::Int64));
            }
            {
                (<precompile>2.BorderVisible = false);
            }
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 10; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>2.SetRowsAndColumns(3, 2);
                <precompile>2.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(1, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 0, 3, 1);
            }
            (nameControl = new (::gaclib_controls::FontNameControl*)(ViewModel));
            <this>.SetNamedObject("nameControl", nameControl);
            (<precompile>4 = nameControl.BoundsComposition);
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>3.AddChild(nameControl.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(0, 1, 1, 1);
            }
            (sizeControl = new (::gaclib_controls::FontSizeControl*)());
            <this>.SetNamedObject("sizeControl", sizeControl);
            (<precompile>6 = sizeControl.BoundsComposition);
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>5.AddChild(sizeControl.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>5);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>8 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>16 = <precompile>8.BoundsComposition);
            {
                (<precompile>16.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>9 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>9.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>9.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>9.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>10 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkBold = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkBold", checkBold);
            }
            {
                (checkBold.Alt = "B");
            }
            {
                <precompile>10.AddChild(checkBold.BoundsComposition);
            }
            {
                <precompile>9.AddChild(<precompile>10);
            }
            (<precompile>11 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkItalic = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkItalic", checkItalic);
            }
            {
                (checkItalic.Alt = "I");
            }
            {
                <precompile>11.AddChild(checkItalic.BoundsComposition);
            }
            {
                <precompile>9.AddChild(<precompile>11);
            }
            (<precompile>12 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkUnderline = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkUnderline", checkUnderline);
            }
            {
                (checkUnderline.Alt = "U");
            }
            {
                <precompile>12.AddChild(checkUnderline.BoundsComposition);
            }
            {
                <precompile>9.AddChild(<precompile>12);
            }
            (<precompile>13 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkStrikeline = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkStrikeline", checkStrikeline);
            }
            {
                (checkStrikeline.Alt = "U");
            }
            {
                <precompile>13.AddChild(checkStrikeline.BoundsComposition);
            }
            {
                <precompile>9.AddChild(<precompile>13);
            }
            (<precompile>14 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkHAA = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkHAA", checkHAA);
            }
            {
                (checkHAA.Alt = "H");
            }
            {
                <precompile>14.AddChild(checkHAA.BoundsComposition);
            }
            {
                <precompile>9.AddChild(<precompile>14);
            }
            (<precompile>15 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkVAA = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkVAA", checkVAA);
            }
            {
                (checkVAA.Alt = "V");
            }
            {
                <precompile>15.AddChild(checkVAA.BoundsComposition);
            }
            {
                <precompile>9.AddChild(<precompile>15);
            }
            {
                <precompile>8.ContainerComposition.AddChild(<precompile>9);
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>7);
            }
            (<precompile>17 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>17.SetSite(2, 1, 1, 1);
            }
            {
                (<precompile>18 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>21 = <precompile>18.BoundsComposition);
            {
                (<precompile>21.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (colorBounds = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("colorBounds", colorBounds);
            {
                (colorBounds.PreferredMinSize = {y : 20;} of (::presentation::Size));
            }
            {
                (colorBounds.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            (<precompile>19 = new (::presentation::elements::Gui3DBorderElement^)());
            {
                (<precompile>19.Color2 = (cast (::presentation::Color) "#AAAAAA"));
            }
            {
                (<precompile>19.Color1 = (cast (::presentation::Color) "#444444"));
            }
            {
                (colorBounds.OwnedElement = <precompile>19);
            }
            (<precompile>20 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>20.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            (colorBackground = new (::presentation::elements::GuiSolidBackgroundElement^)());
            <this>.SetNamedObject("colorBackground", colorBackground);
            {
                (<precompile>20.OwnedElement = colorBackground);
            }
            {
                colorBounds.AddChild(<precompile>20);
            }
            {
                <precompile>18.ContainerComposition.AddChild(colorBounds);
            }
            {
                <precompile>17.AddChild(<precompile>18.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>17);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>22 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>22.PreferredMinSize = {y : 48;} of (::presentation::Size));
            }
            {
                <precompile>22.SetSite(1, 0, 1, 3);
            }
            {
                (<precompile>23 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>28 = <precompile>23.BoundsComposition);
            {
                (<precompile>28.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>24 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>24.BorderVisible = false);
            }
            {
                (<precompile>24.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>24.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>24.SetRowsAndColumns(3, 3);
                <precompile>24.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>24.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>24.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>24.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>24.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>24.SetColumnOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>25 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>25.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>26 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            (<precompile>27 = <precompile>26.BoundsComposition);
            {
                (<precompile>27.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>26.Text = "ABCxyz");
            }
            {
                <precompile>25.AddChild(<precompile>26.BoundsComposition);
            }
            {
                <precompile>24.AddChild(<precompile>25);
            }
            {
                <precompile>23.ContainerComposition.AddChild(<precompile>24);
            }
            {
                <precompile>22.AddChild(<precompile>23.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>22);
            }
            (<precompile>29 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>29.SetSite(2, 1, 1, 1);
            }
            {
                (<precompile>30 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>31 = <precompile>30.BoundsComposition);
            {
                (<precompile>31.PreferredMinSize = {x : 80; y : 24;} of (::presentation::Size));
            }
            {
                (<precompile>31.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>30.Alt = "O");
            }
            {
                <precompile>29.AddChild(<precompile>30.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>29);
            }
            (<precompile>32 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>32.SetSite(2, 2, 1, 1);
            }
            {
                (<precompile>33 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>34 = <precompile>33.BoundsComposition);
            {
                (<precompile>34.PreferredMinSize = {x : 80; y : 24;} of (::presentation::Size));
            }
            {
                (<precompile>34.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>33.Alt = "C");
            }
            {
                <precompile>32.AddChild(<precompile>33.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>32);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Bold();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FullFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FullFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkBold.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkBold.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Italic();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FullFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FullFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkItalic.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkItalic.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Underline();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FullFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FullFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkUnderline.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkUnderline.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Strikeline();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FullFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FullFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkStrikeline.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkStrikeline.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.HAA();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FullFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FullFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkHAA.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkHAA.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.VAA();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FullFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FullFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkVAA.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkVAA.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.FontEffectGroup();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FullFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FullFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (colorBackground.Color = ViewModel.Color);
            }
            {
                (colorBounds.AssociatedCursor = INativeController::GetCurrentController().ResourceService().GetSystemCursor(Hand));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiMouseEventArgs*) : (::system::Void)
                {
                    if (ViewModel.SelectColor(self))
                    {
                        (colorBackground.Color = ViewModel.Color);
                    }
                };
                attach(colorBounds.leftButtonUp, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.FontColorGroup();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FullFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FullFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>18.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>18.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FontNameControl* = null of (::gaclib_controls::FontNameControl*);

                    var <bind-cache>1 : ::gaclib_controls::FontNameControl* = null of (::gaclib_controls::FontNameControl*);

                    var <bind-cache>2 : ::gaclib_controls::FontSizeControl* = null of (::gaclib_controls::FontSizeControl*);

                    var <bind-cache>3 : ::gaclib_controls::FontSizeControl* = null of (::gaclib_controls::FontSizeControl*);

                    var <bind-cache>4 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-cache>5 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-cache>6 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-cache>7 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-cache>8 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-cache>9 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>3_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>4_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>5_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>6_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>7_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>8_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>9_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = let defaultFont = INativeController::GetCurrentController().ResourceService().DefaultFont in ({fontFamily : ViewModel.FontList.Contains(<bind-cache>0.Value) ? <bind-cache>1.Value : defaultFont.fontFamily; size : (<bind-cache>2.Value > 0) ? <bind-cache>3.Value : defaultFont.size; bold : <bind-cache>4.Selected; italic : <bind-cache>5.Selected; underline : <bind-cache>6.Selected; strikeline : <bind-cache>7.Selected; antialias : <bind-cache>8.Selected; verticalAntialias : <bind-cache>9.Selected;}) of (::presentation::FontProperties?);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>3_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>4_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>5_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>6_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>7_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>8_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>9_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (nameControl ?? null of (::gaclib_controls::FontNameControl*)));
                            (<bind-cache>1 = (nameControl ?? null of (::gaclib_controls::FontNameControl*)));
                            (<bind-cache>2 = (sizeControl ?? null of (::gaclib_controls::FontSizeControl*)));
                            (<bind-cache>3 = (sizeControl ?? null of (::gaclib_controls::FontSizeControl*)));
                            (<bind-cache>4 = (checkBold ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-cache>5 = (checkItalic ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-cache>6 = (checkUnderline ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-cache>7 = (checkStrikeline ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-cache>8 = (checkHAA ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-cache>9 = (checkVAA ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.ValueChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.ValueChanged, <bind-callback>2_0) ?? null));
                            (<bind-handler>3_0 = (attach(<bind-cache>3.ValueChanged, <bind-callback>3_0) ?? null));
                            (<bind-handler>4_0 = (attach(<bind-cache>4.SelectedChanged, <bind-callback>4_0) ?? null));
                            (<bind-handler>5_0 = (attach(<bind-cache>5.SelectedChanged, <bind-callback>5_0) ?? null));
                            (<bind-handler>6_0 = (attach(<bind-cache>6.SelectedChanged, <bind-callback>6_0) ?? null));
                            (<bind-handler>7_0 = (attach(<bind-cache>7.SelectedChanged, <bind-callback>7_0) ?? null));
                            (<bind-handler>8_0 = (attach(<bind-cache>8.SelectedChanged, <bind-callback>8_0) ?? null));
                            (<bind-handler>9_0 = (attach(<bind-cache>9.SelectedChanged, <bind-callback>9_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.ValueChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.ValueChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            if (<bind-handler>3_0 is not null)
                            {
                                detach(<bind-cache>3.ValueChanged, <bind-handler>3_0);
                                (<bind-handler>3_0 = null);
                            }
                            if (<bind-handler>4_0 is not null)
                            {
                                detach(<bind-cache>4.SelectedChanged, <bind-handler>4_0);
                                (<bind-handler>4_0 = null);
                            }
                            if (<bind-handler>5_0 is not null)
                            {
                                detach(<bind-cache>5.SelectedChanged, <bind-handler>5_0);
                                (<bind-handler>5_0 = null);
                            }
                            if (<bind-handler>6_0 is not null)
                            {
                                detach(<bind-cache>6.SelectedChanged, <bind-handler>6_0);
                                (<bind-handler>6_0 = null);
                            }
                            if (<bind-handler>7_0 is not null)
                            {
                                detach(<bind-cache>7.SelectedChanged, <bind-handler>7_0);
                                (<bind-handler>7_0 = null);
                            }
                            if (<bind-handler>8_0 is not null)
                            {
                                detach(<bind-cache>8.SelectedChanged, <bind-handler>8_0);
                                (<bind-handler>8_0 = null);
                            }
                            if (<bind-handler>9_0 is not null)
                            {
                                detach(<bind-cache>9.SelectedChanged, <bind-handler>9_0);
                                (<bind-handler>9_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FontNameControl*));
                            (<bind-cache>1 = null of (::gaclib_controls::FontNameControl*));
                            (<bind-cache>2 = null of (::gaclib_controls::FontSizeControl*));
                            (<bind-cache>3 = null of (::gaclib_controls::FontSizeControl*));
                            (<bind-cache>4 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-cache>5 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-cache>6 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-cache>7 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-cache>8 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-cache>9 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>3_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>4_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>5_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>6_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>7_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>8_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>9_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>26.Font;
                    var <new> = (cast (::presentation::FontProperties?) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>26.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.FontPreviewGroup();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FullFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FullFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>23.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>23.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.OK();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FullFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FullFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>30.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>30.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FontNameControl* = null of (::gaclib_controls::FontNameControl*);

                    var <bind-cache>1 : ::gaclib_controls::FontSizeControl* = null of (::gaclib_controls::FontSizeControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Legal and <bind-cache>1.Legal) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (nameControl ?? null of (::gaclib_controls::FontNameControl*)));
                            (<bind-cache>1 = (sizeControl ?? null of (::gaclib_controls::FontSizeControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LegalChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.LegalChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LegalChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.LegalChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FontNameControl*));
                            (<bind-cache>1 = null of (::gaclib_controls::FontSizeControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>30.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>30.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (ViewModel.Confirmed = true);
                    (ViewModel.Font = {fontFamily : nameControl.Value; size : sizeControl.Value; bold : checkBold.Selected; italic : checkItalic.Selected; underline : checkUnderline.Selected; strikeline : checkStrikeline.Selected; antialias : checkHAA.Selected; verticalAntialias : checkVAA.Selected;});
                    self.Close();
                };
                attach(<precompile>30.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Cancel();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FullFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FullFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>33.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>33.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.Close();
                };
                attach(<precompile>33.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FullFontDialogWindow* = null of (::gaclib_controls::FullFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.FontDialogTitle();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::FullFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FullFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(16/23)================================
module <instance>gaclib_controls::FullFontDialogWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(FullFontDialogWindowConstructor))
    class FullFontDialogWindow : ::presentation::controls::GuiWindow, FullFontDialogWindowConstructor
    {
        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        @cpp:Private
        var <parameter>ViewModel : presentation::IFullFontDialogViewModel^ = null of (::presentation::IFullFontDialogViewModel^);

        func GetViewModel() : (presentation::IFullFontDialogViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : presentation::IFullFontDialogViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : presentation::IFullFontDialogViewModel^)
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::FullFontDialogWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-FullFontDialogWindow>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            nameControl.InitValue(ViewModel.Font.fontFamily);
            sizeControl.InitValue(ViewModel.Font.size);
            (checkBold.Selected = ViewModel.Font.bold);
            (checkItalic.Selected = ViewModel.Font.italic);
            (checkUnderline.Selected = ViewModel.Font.underline);
            (checkStrikeline.Selected = ViewModel.Font.strikeline);
            (checkHAA.Selected = ViewModel.Font.antialias);
            (checkVAA.Selected = ViewModel.Font.verticalAntialias);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(17/23)================================
module <constructor>gaclib_controls::SimpleFontDialogWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class SimpleFontDialogWindowConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::SimpleFontDialogWindow* = null of (::gaclib_controls::SimpleFontDialogWindow*);

        @cpp:Protected
        var ViewModel : ::presentation::ISimpleFontDialogViewModel^ = null of (::presentation::ISimpleFontDialogViewModel^);

        @cpp:Protected
        var nameControl : ::gaclib_controls::FontNameControl* = null of (::gaclib_controls::FontNameControl*);

        @cpp:Protected
        var sizeControl : ::gaclib_controls::FontSizeControl* = null of (::gaclib_controls::FontSizeControl*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>19 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-SimpleFontDialogWindow>Initialize(<this> : ::gaclib_controls::SimpleFontDialogWindow*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (self.IconVisible = false);
            }
            {
                (self.MinimizedBox = false);
            }
            {
                (self.MaximizedBox = false);
            }
            {
                (self.ShowInTaskBar = false);
            }
            {
                (self.ClientSize = {x : 360; y : 360;} of (::presentation::Size));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 10 of (::system::Int64));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 3);
            }
            (<precompile>2 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>2.CellPadding = 10 of (::system::Int64));
            }
            {
                (<precompile>2.BorderVisible = false);
            }
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 10; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>2.SetRowsAndColumns(1, 2);
                <precompile>2.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(1, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 0, 1, 1);
            }
            (nameControl = new (::gaclib_controls::FontNameControl*)(ViewModel));
            <this>.SetNamedObject("nameControl", nameControl);
            (<precompile>4 = nameControl.BoundsComposition);
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>3.AddChild(nameControl.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(0, 1, 1, 1);
            }
            (sizeControl = new (::gaclib_controls::FontSizeControl*)());
            <this>.SetNamedObject("sizeControl", sizeControl);
            (<precompile>6 = sizeControl.BoundsComposition);
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>5.AddChild(sizeControl.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>5);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>7.PreferredMinSize = {y : 48;} of (::presentation::Size));
            }
            {
                <precompile>7.SetSite(1, 0, 1, 3);
            }
            {
                (<precompile>8 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>13 = <precompile>8.BoundsComposition);
            {
                (<precompile>13.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>9 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>9.BorderVisible = false);
            }
            {
                (<precompile>9.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>9.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>9.SetRowsAndColumns(3, 3);
                <precompile>9.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetColumnOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>10 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>10.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>11 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            (<precompile>12 = <precompile>11.BoundsComposition);
            {
                (<precompile>12.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>11.Text = "ABCxyz");
            }
            {
                <precompile>10.AddChild(<precompile>11.BoundsComposition);
            }
            {
                <precompile>9.AddChild(<precompile>10);
            }
            {
                <precompile>8.ContainerComposition.AddChild(<precompile>9);
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>14 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>14.SetSite(2, 1, 1, 1);
            }
            {
                (<precompile>15 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>16 = <precompile>15.BoundsComposition);
            {
                (<precompile>16.PreferredMinSize = {x : 80; y : 24;} of (::presentation::Size));
            }
            {
                (<precompile>16.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>15.Alt = "O");
            }
            {
                <precompile>14.AddChild(<precompile>15.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>14);
            }
            (<precompile>17 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>17.SetSite(2, 2, 1, 1);
            }
            {
                (<precompile>18 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>19 = <precompile>18.BoundsComposition);
            {
                (<precompile>19.PreferredMinSize = {x : 80; y : 24;} of (::presentation::Size));
            }
            {
                (<precompile>19.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>18.Alt = "C");
            }
            {
                <precompile>17.AddChild(<precompile>18.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>17);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FontNameControl* = null of (::gaclib_controls::FontNameControl*);

                    var <bind-cache>1 : ::gaclib_controls::FontNameControl* = null of (::gaclib_controls::FontNameControl*);

                    var <bind-cache>2 : ::gaclib_controls::FontSizeControl* = null of (::gaclib_controls::FontSizeControl*);

                    var <bind-cache>3 : ::gaclib_controls::FontSizeControl* = null of (::gaclib_controls::FontSizeControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>3_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = let defaultFont = INativeController::GetCurrentController().ResourceService().DefaultFont in ({fontFamily : ViewModel.FontList.Contains(<bind-cache>0.Value) ? <bind-cache>1.Value : defaultFont.fontFamily; size : (<bind-cache>2.Value > 0) ? <bind-cache>3.Value : defaultFont.size; antialias : true; verticalAntialias : true;}) of (::presentation::FontProperties?);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>3_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (nameControl ?? null of (::gaclib_controls::FontNameControl*)));
                            (<bind-cache>1 = (nameControl ?? null of (::gaclib_controls::FontNameControl*)));
                            (<bind-cache>2 = (sizeControl ?? null of (::gaclib_controls::FontSizeControl*)));
                            (<bind-cache>3 = (sizeControl ?? null of (::gaclib_controls::FontSizeControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ValueChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.ValueChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.ValueChanged, <bind-callback>2_0) ?? null));
                            (<bind-handler>3_0 = (attach(<bind-cache>3.ValueChanged, <bind-callback>3_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.ValueChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.ValueChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            if (<bind-handler>3_0 is not null)
                            {
                                detach(<bind-cache>3.ValueChanged, <bind-handler>3_0);
                                (<bind-handler>3_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FontNameControl*));
                            (<bind-cache>1 = null of (::gaclib_controls::FontNameControl*));
                            (<bind-cache>2 = null of (::gaclib_controls::FontSizeControl*));
                            (<bind-cache>3 = null of (::gaclib_controls::FontSizeControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>3_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>11.Font;
                    var <new> = (cast (::presentation::FontProperties?) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>11.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::SimpleFontDialogWindow* = null of (::gaclib_controls::SimpleFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.FontPreviewGroup();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::SimpleFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::SimpleFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::SimpleFontDialogWindow* = null of (::gaclib_controls::SimpleFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.OK();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::SimpleFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::SimpleFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>15.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>15.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::FontNameControl* = null of (::gaclib_controls::FontNameControl*);

                    var <bind-cache>1 : ::gaclib_controls::FontSizeControl* = null of (::gaclib_controls::FontSizeControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Legal and <bind-cache>1.Legal) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (nameControl ?? null of (::gaclib_controls::FontNameControl*)));
                            (<bind-cache>1 = (sizeControl ?? null of (::gaclib_controls::FontSizeControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LegalChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.LegalChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LegalChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.LegalChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::FontNameControl*));
                            (<bind-cache>1 = null of (::gaclib_controls::FontSizeControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>15.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>15.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (ViewModel.Confirmed = true);
                    (ViewModel.FontFamily = nameControl.Value);
                    (ViewModel.FontSize = sizeControl.Value);
                    self.Close();
                };
                attach(<precompile>15.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::SimpleFontDialogWindow* = null of (::gaclib_controls::SimpleFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Cancel();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::SimpleFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::SimpleFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>18.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>18.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.Close();
                };
                attach(<precompile>18.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::SimpleFontDialogWindow* = null of (::gaclib_controls::SimpleFontDialogWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.FontDialogTitle();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::gaclib_controls::SimpleFontDialogWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::SimpleFontDialogWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(18/23)================================
module <instance>gaclib_controls::SimpleFontDialogWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(SimpleFontDialogWindowConstructor))
    class SimpleFontDialogWindow : ::presentation::controls::GuiWindow, SimpleFontDialogWindowConstructor
    {
        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        @cpp:Private
        var <parameter>ViewModel : presentation::ISimpleFontDialogViewModel^ = null of (::presentation::ISimpleFontDialogViewModel^);

        func GetViewModel() : (presentation::ISimpleFontDialogViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : presentation::ISimpleFontDialogViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : presentation::ISimpleFontDialogViewModel^)
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::SimpleFontDialogWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-SimpleFontDialogWindow>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            nameControl.InitValue(ViewModel.FontFamily);
            sizeControl.InitValue(ViewModel.FontSize);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(19/23)================================
module <constructor>gaclib_controls::MessageBoxButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class MessageBoxButtonTemplateConstructor
    {
        @cpp:Protected
        var Action : ::presentation::IMessageBoxDialogAction^ = null of (::presentation::IMessageBoxDialogAction^);

        @cpp:Protected
        var self : ::gaclib_controls::MessageBoxButtonTemplate* = null of (::gaclib_controls::MessageBoxButtonTemplate*);

        @cpp:Protected
        var buttonControl : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <gaclib_controls-MessageBoxButtonTemplate>Initialize(<this> : ::gaclib_controls::MessageBoxButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            (Action = <this>.Action);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (buttonControl = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
                <this>.SetNamedObject("buttonControl", buttonControl);
            }
            (<precompile>0 = buttonControl.BoundsComposition);
            {
                (<precompile>0.PreferredMinSize = {x : 80; y : 24;} of (::presentation::Size));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(buttonControl.BoundsComposition);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::gaclib_controls::MessageBoxButtonTemplate* = null of (::gaclib_controls::MessageBoxButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.GetButtonText(Action.Button, <bind-cache>0.Strings) of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::gaclib_controls::MessageBoxButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::gaclib_controls::MessageBoxButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = buttonControl.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (buttonControl.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (buttonControl.Alt = self.GetButtonAlt(Action.Button));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    Action.PerformAction();
                    self.RelatedControlHost.Close();
                };
                attach(buttonControl.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = gaclib_controls::DialogStrings::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::gaclib_controls::IDialogStringsStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(20/23)================================
module <instance>gaclib_controls::MessageBoxButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(MessageBoxButtonTemplateConstructor))
    class MessageBoxButtonTemplate : ::presentation::templates::GuiControlTemplate, MessageBoxButtonTemplateConstructor
    {
        @cpp:Private
        var <prop>ButtonControl : GuiButton* = null;

        func GetButtonControl() : (GuiButton*)
        {
            return <prop>ButtonControl;
        }

        @cpp:Protected
        func SetButtonControl(<value> : GuiButton*) : (void)
        {
            if ((<prop>ButtonControl != <value>))
            {
                (<prop>ButtonControl = <value>);
                ButtonControlChanged();
            }
        }

        event ButtonControlChanged();

        prop ButtonControl : GuiButton*{GetButtonControl : ButtonControlChanged}

        func GetButtonText(button : INativeDialogService::MessageBoxButtonsOutput, strings : IDialogStringsStrings^) : (string)
        {
            {
                var <switch>0 : ::presentation::INativeDialogService::MessageBoxButtonsOutput = button;
                if ((<switch>0 == SelectOK of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.OK();
                }
                else if ((<switch>0 == SelectCancel of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.Cancel();
                }
                else if ((<switch>0 == SelectYes of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.Yes();
                }
                else if ((<switch>0 == SelectNo of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.No();
                }
                else if ((<switch>0 == SelectRetry of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.Retry();
                }
                else if ((<switch>0 == SelectAbort of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.Abort();
                }
                else if ((<switch>0 == SelectIgnore of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.Ignore();
                }
                else if ((<switch>0 == SelectTryAgain of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.TryAgain();
                }
                else if ((<switch>0 == SelectContinue of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return strings.Continue();
                }
                else
                {
                    return "";
                }
            }
        }

        func GetButtonAlt(button : INativeDialogService::MessageBoxButtonsOutput) : (string)
        {
            {
                var <switch>1 : ::presentation::INativeDialogService::MessageBoxButtonsOutput = button;
                if ((<switch>1 == SelectOK of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return "O";
                }
                else if ((<switch>1 == SelectCancel of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return "C";
                }
                else if ((<switch>1 == SelectYes of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return "Y";
                }
                else if ((<switch>1 == SelectNo of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return "N";
                }
                else if ((<switch>1 == SelectRetry of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return "R";
                }
                else if ((<switch>1 == SelectAbort of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return "A";
                }
                else if ((<switch>1 == SelectIgnore of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return "I";
                }
                else if ((<switch>1 == SelectTryAgain of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return "T";
                }
                else if ((<switch>1 == SelectContinue of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                {
                    return "K";
                }
                else
                {
                    return "";
                }
            }
        }

        @cpp:Private
        var <prop>Strings : ::gaclib_controls::IDialogStringsStrings^ = ::gaclib_controls::DialogStrings::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::gaclib_controls::IDialogStringsStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::gaclib_controls::IDialogStringsStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::gaclib_controls::IDialogStringsStrings^{GetStrings, SetStrings : StringsChanged}

        @cpp:Private
        var <parameter>Action : presentation::IMessageBoxDialogAction^ = null of (::presentation::IMessageBoxDialogAction^);

        func GetAction() : (presentation::IMessageBoxDialogAction^)
        {
            return <parameter>Action;
        }

        prop Action : presentation::IMessageBoxDialogAction^{GetAction}

        new* (<ctor-parameter>Action : presentation::IMessageBoxDialogAction^)
        {
            (<parameter>Action = <ctor-parameter>Action);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::MessageBoxButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-MessageBoxButtonTemplate>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            self.SetButtonControl(self.buttonControl);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(21/23)================================
module <constructor>gaclib_controls::MessageBoxWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    class MessageBoxWindowConstructor
    {
        @cpp:Protected
        var self : ::gaclib_controls::MessageBoxWindow* = null of (::gaclib_controls::MessageBoxWindow*);

        @cpp:Protected
        var ViewModel : ::presentation::IMessageBoxDialogViewModel^ = null of (::presentation::IMessageBoxDialogViewModel^);

        @cpp:Protected
        var buttonStack : ::presentation::compositions::GuiRepeatStackComposition* = null of (::presentation::compositions::GuiRepeatStackComposition*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        func <gaclib_controls-MessageBoxWindow>Initialize(<this> : ::gaclib_controls::MessageBoxWindow*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (self.IconVisible = false);
            }
            {
                (self.SizeBox = false);
            }
            {
                (self.MinimizedBox = false);
            }
            {
                (self.MaximizedBox = false);
            }
            {
                (self.ShowInTaskBar = false);
            }
            {
                (self.ClientSize = {x : 240; y : 120;} of (::presentation::Size));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 10 of (::system::Int64));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 10; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>2.BorderVisible = false);
            }
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>2.SetRowsAndColumns(3, 1);
                <precompile>2.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(1, 0, 1, 1);
            }
            (<precompile>4 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>4.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            (<precompile>5 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>5.PreferredMinSize = {x : 48; y : 48;} of (::presentation::Size));
            }
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>5.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>6 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>6.Stretch = true);
            }
            {
                (<precompile>5.OwnedElement = <precompile>6);
            }
            {
                <precompile>3.AddChild(<precompile>5);
            }
            {
                <precompile>2.AddChild(<precompile>3);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(0, 1, 1, 1);
            }
            (<precompile>8 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>8.BorderVisible = false);
            }
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>8.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>8.SetRowsAndColumns(3, 1);
                <precompile>8.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>8.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>8.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>8.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>9.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>10 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            (<precompile>11 = <precompile>10.BoundsComposition);
            {
                (<precompile>11.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>9.AddChild(<precompile>10.BoundsComposition);
            }
            {
                <precompile>8.AddChild(<precompile>9);
            }
            {
                <precompile>7.AddChild(<precompile>8);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>12 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>12.SetSite(2, 0, 1, 2);
            }
            (<precompile>13 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>13.BorderVisible = false);
            }
            {
                (<precompile>13.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>13.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>13.SetRowsAndColumns(1, 3);
                <precompile>13.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>13.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>13.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>13.SetColumnOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>14 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>14.SetSite(0, 1, 1, 1);
            }
            (buttonStack = new (::presentation::compositions::GuiRepeatStackComposition*)());
            <this>.SetNamedObject("buttonStack", buttonStack);
            {
                (buttonStack.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTemplate*)
                {
                    {
                        if (<viewModel> is (::presentation::IMessageBoxDialogAction^))
                        {
                            return new (::gaclib_controls::MessageBoxButtonTemplate*)((cast (::presentation::IMessageBoxDialogAction^) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            {
                (buttonStack.Padding = 5 of (::system::Int64));
            }
            {
                (buttonStack.Direction = Horizontal of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (buttonStack.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (buttonStack.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>14.AddChild(buttonStack);
            }
            {
                <precompile>13.AddChild(<precompile>14);
            }
            {
                <precompile>12.AddChild(<precompile>13);
            }
            {
                <precompile>0.AddChild(<precompile>12);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                (<precompile>6.Image = self.GetIcon(ViewModel.Icon));
            }
            {
                (<precompile>10.Text = ViewModel.Text);
            }
            {
                (buttonStack.ItemSource = ViewModel.Buttons);
            }
            {
                (self.Text = ViewModel.Title);
            }
        }

        new ()
        {
        }
    }
}

================================(22/23)================================
module <instance>gaclib_controls::MessageBoxWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace gaclib_controls
{
    @cpp:Friend(typeof(MessageBoxWindowConstructor))
    class MessageBoxWindow : ::presentation::controls::GuiWindow, MessageBoxWindowConstructor
    {
        func GetIcon(icon : INativeDialogService::MessageBoxIcons) : (INativeImage^)
        {
            var iconUri = "Images/None";
            {
                var <switch>2 : ::presentation::INativeDialogService::MessageBoxIcons = ViewModel.Icon;
                if ((<switch>2 == IconError of (::presentation::INativeDialogService::MessageBoxIcons)))
                {
                    (iconUri = "Images/Error");
                }
                else if ((<switch>2 == IconQuestion of (::presentation::INativeDialogService::MessageBoxIcons)))
                {
                    (iconUri = "Images/Question");
                }
                else if ((<switch>2 == IconWarning of (::presentation::INativeDialogService::MessageBoxIcons)))
                {
                    (iconUri = "Images/Warning");
                }
                else if ((<switch>2 == IconInformation of (::presentation::INativeDialogService::MessageBoxIcons)))
                {
                    (iconUri = "Images/Information");
                }
            }
            return (cast (GuiImageData^) self.ResolveResource("res", iconUri, true)).Image;
        }

        @cpp:Private
        var <parameter>ViewModel : presentation::IMessageBoxDialogViewModel^ = null of (::presentation::IMessageBoxDialogViewModel^);

        func GetViewModel() : (presentation::IMessageBoxDialogViewModel^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : presentation::IMessageBoxDialogViewModel^{GetViewModel}

        new* (<ctor-parameter>ViewModel : presentation::IMessageBoxDialogViewModel^)
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("gaclib_controls::MessageBoxWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<gaclib_controls-MessageBoxWindow>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            var defaultButton = ViewModel.Buttons.IndexOf(ViewModel.DefaultButton);
            var buttonControl = (cast (MessageBoxButtonTemplate*) buttonStack.StackItems[defaultButton].Children[0]).ButtonControl;
            buttonControl.SetFocused();
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(23/23)================================
module <localized-strings>gaclib_controls::DialogStrings;

namespace gaclib_controls
{
    interface IDialogStringsStrings
    {
        func Abort() : (::system::String);

        func Blue() : (::system::String);

        func Bold() : (::system::String);

        func Cancel() : (::system::String);

        func Color() : (::system::String);

        func ColorDialogTitle() : (::system::String);

        func Continue() : (::system::String);

        func FileDialogAskCreateFile() : (::system::String);

        func FileDialogAskOverrideFile() : (::system::String);

        func FileDialogErrorEmptySelection() : (::system::String);

        func FileDialogErrorFileExpected() : (::system::String);

        func FileDialogErrorFileNotExist() : (::system::String);

        func FileDialogErrorFolderNotExist() : (::system::String);

        func FileDialogErrorMultipleSelectionNotEnabled() : (::system::String);

        func FileDialogFileName() : (::system::String);

        func FileDialogOpen() : (::system::String);

        func FileDialogSave() : (::system::String);

        func FileDialogTextLoadingFiles() : (::system::String);

        func FileDialogTextLoadingFolders() : (::system::String);

        func FontColorGroup() : (::system::String);

        func FontColorGroup2() : (::system::String);

        func FontDialogTitle() : (::system::String);

        func FontEffectGroup() : (::system::String);

        func FontNameGroup() : (::system::String);

        func FontPreviewGroup() : (::system::String);

        func FontSizeGroup() : (::system::String);

        func Green() : (::system::String);

        func HAA() : (::system::String);

        func Ignore() : (::system::String);

        func Italic() : (::system::String);

        func No() : (::system::String);

        func OK() : (::system::String);

        func Red() : (::system::String);

        func Retry() : (::system::String);

        func Strikeline() : (::system::String);

        func TryAgain() : (::system::String);

        func Underline() : (::system::String);

        func VAA() : (::system::String);

        func Yes() : (::system::String);
    }
}

namespace gaclib_controls
{
    var <ls>DialogStrings : IDialogStringsStrings^[::system::Locale] = {};
}

namespace gaclib_controls
{
    class DialogStrings
    {
        static func <ls_en-US>BuildStrings(<ls>locale : ::system::Locale) : (::gaclib_controls::IDialogStringsStrings^)
        {
            return new (::gaclib_controls::IDialogStringsStrings^)
            {
                override func Abort() : (::system::String)
                {
                    return "Abort";
                }

                override func Blue() : (::system::String)
                {
                    return "Blue:";
                }

                override func Bold() : (::system::String)
                {
                    return "Bold";
                }

                override func Cancel() : (::system::String)
                {
                    return "Cancel";
                }

                override func Color() : (::system::String)
                {
                    return "Color:";
                }

                override func ColorDialogTitle() : (::system::String)
                {
                    return "Choose Color";
                }

                override func Continue() : (::system::String)
                {
                    return "Continue";
                }

                override func FileDialogAskCreateFile() : (::system::String)
                {
                    return "Do you want to create the following file(s):";
                }

                override func FileDialogAskOverrideFile() : (::system::String)
                {
                    return "Do you want to override the following file(s):";
                }

                override func FileDialogErrorEmptySelection() : (::system::String)
                {
                    return "At least one file must be selected.";
                }

                override func FileDialogErrorFileExpected() : (::system::String)
                {
                    return "File(s) expected but folder(s) selected:";
                }

                override func FileDialogErrorFileNotExist() : (::system::String)
                {
                    return "File(s) not exist:";
                }

                override func FileDialogErrorFolderNotExist() : (::system::String)
                {
                    return "Folder not exist:";
                }

                override func FileDialogErrorMultipleSelectionNotEnabled() : (::system::String)
                {
                    return "Multiple selection is not enabled in this dialog.";
                }

                override func FileDialogFileName() : (::system::String)
                {
                    return "File Name:";
                }

                override func FileDialogOpen() : (::system::String)
                {
                    return "Open";
                }

                override func FileDialogSave() : (::system::String)
                {
                    return "Save";
                }

                override func FileDialogTextLoadingFiles() : (::system::String)
                {
                    return "(Loading Folders and Files...)";
                }

                override func FileDialogTextLoadingFolders() : (::system::String)
                {
                    return "(Loading...)";
                }

                override func FontColorGroup() : (::system::String)
                {
                    return "Color:";
                }

                override func FontColorGroup2() : (::system::String)
                {
                    return "Pick a Color:";
                }

                override func FontDialogTitle() : (::system::String)
                {
                    return "Choose Font";
                }

                override func FontEffectGroup() : (::system::String)
                {
                    return "Effect:";
                }

                override func FontNameGroup() : (::system::String)
                {
                    return "Font:";
                }

                override func FontPreviewGroup() : (::system::String)
                {
                    return "Preview:";
                }

                override func FontSizeGroup() : (::system::String)
                {
                    return "Size:";
                }

                override func Green() : (::system::String)
                {
                    return "Green:";
                }

                override func HAA() : (::system::String)
                {
                    return "Horizontal Antialias";
                }

                override func Ignore() : (::system::String)
                {
                    return "Ignore";
                }

                override func Italic() : (::system::String)
                {
                    return "Italic";
                }

                override func No() : (::system::String)
                {
                    return "No";
                }

                override func OK() : (::system::String)
                {
                    return "OK";
                }

                override func Red() : (::system::String)
                {
                    return "Red:";
                }

                override func Retry() : (::system::String)
                {
                    return "Retry";
                }

                override func Strikeline() : (::system::String)
                {
                    return "Strike-through";
                }

                override func TryAgain() : (::system::String)
                {
                    return "Try Again";
                }

                override func Underline() : (::system::String)
                {
                    return "Underline";
                }

                override func VAA() : (::system::String)
                {
                    return "Vertical Antialias";
                }

                override func Yes() : (::system::String)
                {
                    return "Yes";
                }
            };
        }

        static func Install(<ls>locale : ::system::Locale, <ls>impl : IDialogStringsStrings^) : (void)
        {
            if (<ls>DialogStrings.Keys.Contains(<ls>locale))
            {
                raise (("Localized strings \"gaclib_controls::DialogStrings\" has already registered for locale \"" & <ls>locale) & "\".");
            }
            <ls>DialogStrings.Set(<ls>locale, <ls>impl);
        }

        static func Get(<ls>locale : ::system::Locale) : (IDialogStringsStrings^)
        {
            if (<ls>DialogStrings.Keys.Contains(<ls>locale))
            {
                return <ls>DialogStrings[<ls>locale];
            }
            return <ls>DialogStrings[(cast (::system::Locale) "en-US")];
        }

        new ()
        {
        }
    }
}

namespace gaclib_controls
{
    static
    {
        ::gaclib_controls::DialogStrings::Install((cast (::system::Locale) "en-US"), DialogStrings::<ls_en-US>BuildStrings((cast (::system::Locale) "en-US")));
    }
}

