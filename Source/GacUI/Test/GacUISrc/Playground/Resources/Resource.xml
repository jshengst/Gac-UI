<Resource>
  <Instance name="ThemeResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::TestTheme" xmlns:x="testtheme::*">
      <ThemeTemplates Name="TestSkin">
      </ThemeTemplates>
    </Instance>
  </Instance>

  <Folder name="LargeImages" content="Link">../../../Resources/App/FullControlTest/Images/LargeImages.xml</Folder>
  <Folder name="SmallImages" content="Link">../../../Resources/App/FullControlTest/Images/SmallImages.xml</Folder>
  <Folder name="ToolbarImages" content="Link">../../../Resources/App/FullControlTest/ToolbarImages/Images.xml</Folder>

  <Instance name="MainWindowResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::TestWindow" xmlns:demo="demo::*">
      <ref.Members><![CDATA[
        var itemSource : observe MyDataItem^[] = 
        {
          new MyDataItem^("涼宮 春日",     Female, Lime,  (cast DateTime "1988-08-08 00:00:00.000"),  "http://www.haruhi.tv/")
          new MyDataItem^("キョン",        Male,   Black, (cast DateTime "1988-08-08 00:00:00.000"),  "http://www.haruhi.tv/")
          new MyDataItem^("长门 有希",     Female, White, (cast DateTime "2000-08-06 00:00:00.000"),  "http://www.haruhi.tv/")
          new MyDataItem^("朝比奈 实玖瑠", Female, Red,   (cast DateTime "1987-08-30 00:00:00.000"),  "http://www.haruhi.tv/")
          new MyDataItem^("古泉 一树",     Male,   Blue,  (cast DateTime "1986-08-12 00:00:00.000"),  "http://www.haruhi.tv/")
        };
      ]]></ref.Members>
      <Window ref.Name="self" Text="DataGrid" ClientSize="x:640 y:480">
        <att.BoundsComposition-set PreferredMinSize="x:640 y:480"/>
        <Table AlignmentToParent="left:0 top:0 right:0 bottom:0" CellPadding="5">
          <att.Rows>
            <_>composeType:MinSize</_>
            <_>composeType:Percentage percentage:1.0</_>
          </att.Rows>
          <att.Columns>
            <_>composeType:MinSize</_>
            <_>composeType:Percentage percentage:1.0</_>
            <_>composeType:MinSize</_>
          </att.Columns>

          <Cell Site="row:0 column:0">
            <ComboBox ref.Name="comboView" Alt="V" SelectedIndex="6">
              <att.BoundsComposition-set PreferredMinSize="x:120"/>
              <att.ListControl>
                <TextList HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false">
                  <att.Items>
                    <TextItem Text="BigIcon"/>
                    <TextItem Text="SmallIcon"/>
                    <TextItem Text="List"/>
                    <TextItem Text="Tile"/>
                    <TextItem Text="Information"/>
                    <TextItem Text="Detail"/>
                    <TextItem Text="DataGrid"/>
                  </att.Items>
                </TextList>
              </att.ListControl>
              <ev.SelectedIndexChanged-eval>
                <![CDATA[
                  {
                    switch (comboView.SelectedIndex)
                    {
                    case 0:
                      {
                        dataGrid.View = BigIcon;
                      }
                    case 1:
                      {
                        dataGrid.View = SmallIcon;
                      }
                    case 2:
                      {
                        dataGrid.View = ListViewView::List;
                      }
                    case 3:
                      {
                        dataGrid.View = Tile;
                      }
                    case 4:
                      {
                        dataGrid.View = Information;
                      }
                    case 5:
                      {
                        dataGrid.View = Detail;
                      }
                    case 6:
                      {
                        dataGrid.SetViewToDefault();
                      }
                    }
                  }
                ]]>
              </ev.SelectedIndexChanged-eval>
            </ComboBox>
          </Cell>

          <Cell Site="row:0 column:2">
            <Button Text="Add Random Item">
              <ev.Clicked-eval>
                <![CDATA[
                  {
                    var item = new MyDataItem^();
                    item.Name = Sys::LoremIpsumTitle(25);
                    item.Website = Sys::LoremIpsumTitle(60);
                    self.itemSource.Add(item);
                    self.ForceCalculateSizeImmediately();
                  }
                ]]>
              </ev.Clicked-eval>
            </Button>
          </Cell>

          <Cell Site="row:1 column:0 columnSpan:3">
            <BindableDataGrid ref.Name="dataGrid" Alt="L" env.ItemType="demo::MyDataItem^" env.ItemName="itemToBind" HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <att.ItemSource-eval>self.itemSource</att.ItemSource-eval>

              <att.Columns>
                <DataColumn Text="Name" Size="120">
                  <att.TextProperty>Name</att.TextProperty>
                  <!--
                  <att.ValueProperty>Name</att.ValueProperty>
                  <att.EditorFactory>demo:TextEditor</att.EditorFactory>
                  -->
                  <att.Sorter>[Sys::Compare($1.Name, $2.Name)]</att.Sorter>
                </DataColumn>

                <DataColumn Text="Gender" Size="80">
                  <att.TextProperty>demo::ToString(itemToBind.Gender)</att.TextProperty>
                  <!--
                  <att.ValueProperty>Gender</att.ValueProperty>
                  <att.VisualizerFactory>demo:GenderVisualizer;CellBorderVisualizerTemplate</att.VisualizerFactory>
                  <att.EditorFactory>demo:GenderEditor</att.EditorFactory>
                  -->
                  <att.Sorter>[Sys::Compare(cast UInt64 ($1.Gender), cast UInt64 ($2.Gender))]</att.Sorter>
                </DataColumn>

                <DataColumn Text="Category" Size="80">
                  <att.TextProperty>demo::ToString(itemToBind.Category)</att.TextProperty>
                  <!--
                  <att.ValueProperty>Category</att.ValueProperty>
                  <att.VisualizerFactory>demo:CategoryVisualizer;CellBorderVisualizerTemplate</att.VisualizerFactory>
                  <att.EditorFactory>demo:CategoryEditor</att.EditorFactory>
                  -->
                  <att.Sorter>[Sys::Compare(cast UInt64 ($1.Category), cast UInt64 ($2.Category))]</att.Sorter>
                </DataColumn>

                <DataColumn Text="Birthday" Size="80">
                  <att.TextProperty>demo::ToString(itemToBind.Birthday)</att.TextProperty>
                  <!--
                  <att.ValueProperty>Birthday</att.ValueProperty>
                  <att.EditorFactory>demo:DateEditor</att.EditorFactory>
                  <att.Filter-eval>dateFilter.Filter</att.Filter-eval>
                  <att.Popup>
                    <ToolstripMenu>
                      <demo:DateFilter ref.Name="dateFilter">
                        <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
                      </demo:DateFilter>
                    </ToolstripMenu>
                  </att.Popup>
                  -->
                  <att.Sorter>[Sys::Compare($1.Birthday, $2.Birthday)]</att.Sorter>
                </DataColumn>

                <DataColumn Text="Website" Size="160">
                  <att.TextProperty>Website</att.TextProperty>
                  <!--
                  <att.ValueProperty>Website</att.ValueProperty>
                  <att.VisualizerFactory>HyperlinkVisualizerTemplate;CellBorderVisualizerTemplate</att.VisualizerFactory>
                  <att.EditorFactory>demo:TextEditor</att.EditorFactory>
                  -->
                  <att.Sorter>[Sys::Compare($1.Website, $2.Website)]</att.Sorter>
                </DataColumn>
              </att.Columns>

              <att.DataColumns>
                <_>0</_>
              </att.DataColumns>
            </BindableDataGrid>
          </Cell>
        </Table>
      </Window>
    </Instance>
  </Instance>

  <Script name="ViewModelResource">
    <Workflow>
      <![CDATA[
        module viewmodel;
        
        using system::*;
        using presentation::*;
        
        namespace demo
        {          
          enum MyCategory
          {
            Black = 0,
            Red = 1,
            Lime = 2,
            Blue = 3,
            White = 4,
          }
          
          enum MyGender
          {
            Male = 0,
            Female = 1,
          }
          
          class MyDataItem
          {
            prop Name : string = "" {not observe}
            prop Gender : MyGender = Male {not observe}
            prop Category : MyCategory = White {not observe}
            prop Birthday : DateTime = (cast DateTime "2000-01-01 00:00:00.000") {not observe}
            prop Website : string = "" {not observe}
            
            new()
            {
            }
            
            new(name : string, gender : MyGender, category : MyCategory, birthday : DateTime, website : string)
            {
              Name = name;
              Gender = gender;
              Category = category;
              Birthday = birthday;
              Website = website;
            }
          }
          
          func ToString(value : MyCategory) : string
          {
            switch (value)
            {
              case Black:   { return "Black";  }
              case Red:     { return "Red";    }
              case Lime:    { return "Lime";   }
              case Blue:    { return "Blue";   }
              case White:   { return "White";  }
            }
            return "";
          }
          
          func ToColor(value : MyCategory) : Color
          {
            switch (value)
            {
              case Red:     { return cast Color "#FF0000"; }
              case Lime:    { return cast Color "#00FF00"; }
              case Blue:    { return cast Color "#0000FF"; }
              case White:   { return cast Color "#FFFFFF"; }
            }
            return cast Color "#000000";
          }
          
          func ToString(value : MyGender) : string
          {
            switch (value)
            {
              case Male:    { return "Male";   }
              case Female:  { return "Female"; }
            }
            return "";
          }
          
          func ToString(value : DateTime) : string
          {
            return $"$(value.month)/$(value.day)/$(value.year)";
          }
        }
      ]]>
    </Workflow>
  </Script>
</Resource>