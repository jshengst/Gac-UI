================================(1/4)================================
module <instance>rptest::ClickMeTab;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace rptest
{
    @cpp:File("ClickMeTab")
    class ClickMeTab : ::presentation::controls::GuiTabPage
    {
        new* ()
            :::presentation::controls::GuiTabPage((cast (::presentation::theme::ThemeName) (cast (::system::UInt64) 0)))
        {
            raise "Not Implemented";
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(2/4)================================
module <instance>rptest::DataGridTab;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace rptest
{
    @cpp:File("DataGridTab")
    class DataGridTab : ::presentation::controls::GuiTabPage
    {
        var itemSource : observe DataItem^[] = {};

        new* ()
            :::presentation::controls::GuiTabPage((cast (::presentation::theme::ThemeName) (cast (::system::UInt64) 0)))
        {
            raise "Not Implemented";
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(3/4)================================
module <instance>rptest::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace rptest
{
    @cpp:File("MainWindow")
    class MainWindow : ::presentation::controls::GuiWindow
    {
        new* ()
            :::presentation::controls::GuiWindow((cast (::presentation::theme::ThemeName) (cast (::system::UInt64) 0)))
        {
            raise "Not Implemented";
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(4/4)================================
module viewmodel;
using system::*;
using presentation::*;

namespace rptest
{
    class DataItem
    {
        @cpp:Private
        var <prop>Name : string = "";

        func GetName() : (string)
        {
            return <prop>Name;
        }

        func SetName(<value> : string) : (void)
        {
            (<prop>Name = <value>);
        }

        prop Name : string{GetName, SetName}

        @cpp:Private
        var <prop>Title : string = "";

        func GetTitle() : (string)
        {
            return <prop>Title;
        }

        func SetTitle(<value> : string) : (void)
        {
            (<prop>Title = <value>);
        }

        prop Title : string{GetTitle, SetTitle}

        @cpp:Private
        var <prop>Description : string = "";

        func GetDescription() : (string)
        {
            return <prop>Description;
        }

        func SetDescription(<value> : string) : (void)
        {
            (<prop>Description = <value>);
        }

        prop Description : string{GetDescription, SetDescription}

        new (name : string, title : string, description : string)
        {
            (Name = name);
            (Title = title);
            (Description = description);
        }
    }
}

