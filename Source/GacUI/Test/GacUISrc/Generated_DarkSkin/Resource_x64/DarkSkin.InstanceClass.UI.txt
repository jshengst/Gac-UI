================================(1/142)================================
module <constructor>darkskin::Theme;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ThemeConstructor
    {
        @cpp:Protected
        var <precompile>0 : ::darkskin::Theme* = null of (::darkskin::Theme*);

        @cpp:Protected
        func <darkskin-Theme>Initialize(<this> : ::darkskin::Theme*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.RibbonToolstripMenu = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiRibbonToolstripMenuTemplate*)
                {
                    {
                        return new (::darkskin::RibbonToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonGalleryItemList = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTextListTemplate*)
                {
                    {
                        return new (::darkskin::RibbonGalleryItemListTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonGalleryList = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiRibbonGalleryListTemplate*)
                {
                    {
                        return new (::darkskin::RibbonGalleryTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonGallery = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiRibbonGalleryTemplate*)
                {
                    {
                        return new (::darkskin::RibbonGalleryTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonToolstripHeader = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::RibbonToolstripHeaderTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonToolstrips = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiRibbonToolstripsTemplate*)
                {
                    {
                        return new (::darkskin::RibbonToolstripsTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonButtons = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiRibbonButtonsTemplate*)
                {
                    {
                        return new (::darkskin::RibbonButtonsTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonIconLabel = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiRibbonIconLabelTemplate*)
                {
                    {
                        return new (::darkskin::RibbonIconLabelTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonSmallIconLabel = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiRibbonIconLabelTemplate*)
                {
                    {
                        return new (::darkskin::RibbonSmallIconLabelTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonSplitter = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripSplitterTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonGroupMenu = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiRibbonGroupMenuTemplate*)
                {
                    {
                        return new (::darkskin::RibbonGroupMenuTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonGroup = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiRibbonGroupTemplate*)
                {
                    {
                        return new (::darkskin::RibbonGroupTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonLargeSplitButton = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiToolstripButtonTemplate*)
                {
                    {
                        return new (::darkskin::RibbonLargeSplitButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonLargeDropdownButton = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiToolstripButtonTemplate*)
                {
                    {
                        return new (::darkskin::RibbonLargeDropdownButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonLargeButton = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiToolstripButtonTemplate*)
                {
                    {
                        return new (::darkskin::RibbonLargeButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonSmallSplitButton = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiToolstripButtonTemplate*)
                {
                    {
                        return new (::darkskin::RibbonSmallSplitButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonSmallDropdownButton = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiToolstripButtonTemplate*)
                {
                    {
                        return new (::darkskin::RibbonSmallDropdownButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonSmallButton = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiToolstripButtonTemplate*)
                {
                    {
                        return new (::darkskin::RibbonSmallButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RibbonTab = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiRibbonTabTemplate*)
                {
                    {
                        return new (::darkskin::TabTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.ProgressBar = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::ProgressBarTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.VTracker = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::VTrackerTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.HTracker = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::HTrackerTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.VScroll = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::VScrollTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.HScroll = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::HScrollTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.DateComboBox = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiDateComboBoxTemplate*)
                {
                    {
                        return new (::darkskin::ComboBoxTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.DatePicker = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiDatePickerTemplate*)
                {
                    {
                        return new (::darkskin::DatePickerTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.RadioButton = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiSelectableButtonTemplate*)
                {
                    {
                        return new (::darkskin::RadioButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.CheckBox = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiSelectableButtonTemplate*)
                {
                    {
                        return new (::darkskin::CheckBoxTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.Button = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiButtonTemplate*)
                {
                    {
                        return new (::darkskin::ButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.ToolstripSplitterInMenu = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripSplitterInMenuTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.ToolstripSplitter = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripSplitterTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.ToolstripSplitButton = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiToolstripButtonTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripSplitButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.ToolstripDropdownButton = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiToolstripButtonTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripDropdownButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.ToolstripButton = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiToolstripButtonTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.ToolstripToolBarInMenu = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripInMenuTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.ToolstripToolBar = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.MenuItemButton = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiToolstripButtonTemplate*)
                {
                    {
                        return new (::darkskin::MenuItemButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.MenuBarButton = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiToolstripButtonTemplate*)
                {
                    {
                        return new (::darkskin::MenuBarButtonTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.MenuSplitter = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::MenuSplitterTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.MenuBar = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.Menu = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.TextList = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTextListTemplate*)
                {
                    {
                        return new (::darkskin::TextListTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.TreeView = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTreeViewTemplate*)
                {
                    {
                        return new (::darkskin::TreeViewTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.ListView = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiListViewTemplate*)
                {
                    {
                        return new (::darkskin::ListViewTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.DocumentTextBox = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiDocumentLabelTemplate*)
                {
                    {
                        return new (::darkskin::DocumentTextBoxTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.DocumentLabel = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiDocumentLabelTemplate*)
                {
                    {
                        return new (::darkskin::DocumentLabelTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.DocumentViewer = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiDocumentViewerTemplate*)
                {
                    {
                        return new (::darkskin::DocumentViewerTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.SinglelineTextBox = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiSinglelineTextBoxTemplate*)
                {
                    {
                        return new (::darkskin::SinglelineTextBoxTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.MultilineTextBox = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMultilineTextBoxTemplate*)
                {
                    {
                        return new (::darkskin::MultilineTextBoxTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.ComboBox = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiComboBoxTemplate*)
                {
                    {
                        return new (::darkskin::ComboBoxTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.Tab = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTabTemplate*)
                {
                    {
                        return new (::darkskin::TabTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.GroupBox = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::GroupBoxTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.ScrollView = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollViewTemplate*)
                {
                    {
                        return new (::darkskin::ScrollViewTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.ShortcutKey = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiLabelTemplate*)
                {
                    {
                        return new (::darkskin::ShortcutKeyTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.Label = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiLabelTemplate*)
                {
                    {
                        return new (::darkskin::LabelTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.Tooltip = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiWindowTemplate*)
                {
                    {
                        return new (::darkskin::TooltipTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.CustomControl = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::CustomControlTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.CustomFrameWindow = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiWindowTemplate*)
                {
                    {
                        return new (::darkskin::CustomFrameWindowTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.SystemFrameWindow = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiWindowTemplate*)
                {
                    {
                        return new (::darkskin::SystemFrameWindowTemplate*)();
                    }
                });
            }
            {
                (<precompile>0.PreferCustomFrameWindow = true);
            }
            {
                (<precompile>0.Name = "DarkSkin");
            }
        }

        new ()
        {
        }
    }
}

================================(2/142)================================
module <instance>darkskin::Theme;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ThemeConstructor))
    class Theme : ::presentation::theme::ThemeTemplates, ThemeConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::Theme");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-Theme>Initialize(this);
        }

        delete
        {
            FinalizeGeneralInstance(this);
        }
    }
}

================================(3/142)================================
module <constructor>darkskin::ButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ButtonTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::ButtonTemplate* = null of (::darkskin::ButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiFocusRectangleElement^ = null of (::presentation::elements::GuiFocusRectangleElement^);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <darkskin-ButtonTemplate>Initialize(<this> : ::darkskin::ButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                self.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>3.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>4 = new (::presentation::elements::GuiFocusRectangleElement^)());
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                self.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>5.AlignmentToParent = {left : 4; top : 2; right : 4; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>5.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>6 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>6.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>6.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>5.OwnedElement = <precompile>6);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>5.AddChild(container);
            }
            {
                self.AddChild(<precompile>5);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ButtonTemplate* = null of (::darkskin::ButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::ButtonTemplate* = null of (::darkskin::ButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#252526" : (state == ButtonState::Active) ? "#54545C" : (state == ButtonState::Pressed) ? "#007ACC" : "#3F3F46")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ButtonTemplate* = null of (::darkskin::ButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::ButtonTemplate* = null of (::darkskin::ButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#434346" : (state == ButtonState::Active) ? "#6A6A75" : (state == ButtonState::Pressed) ? "#1C97EA" : "#54545C")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ButtonTemplate* = null of (::darkskin::ButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Focused of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FocusedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FocusedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ButtonTemplate* = null of (::darkskin::ButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ButtonTemplate* = null of (::darkskin::ButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::ButtonTemplate* = null of (::darkskin::ButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Active) ? "#F1F1F1" : (state == ButtonState::Pressed) ? "#FFFFFF" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ButtonTemplate* = null of (::darkskin::ButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(4/142)================================
module <instance>darkskin::ButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ButtonTemplateConstructor))
    class ButtonTemplate : ::presentation::templates::GuiButtonTemplate, ButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(5/142)================================
module <constructor>darkskin::CheckBoxTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class CheckBoxTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::CheckBoxTemplate* = null of (::darkskin::CheckBoxTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::elements::GuiFocusRectangleElement^ = null of (::presentation::elements::GuiFocusRectangleElement^);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <darkskin-CheckBoxTemplate>Initialize(<this> : ::darkskin::CheckBoxTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 2);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 17;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Absolute; absolute : 17;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(1, 0, 1, 1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            (<precompile>4 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>4.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>4.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>5 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>4.OwnedElement = <precompile>5);
            }
            {
                <precompile>1.AddChild(<precompile>4);
            }
            (<precompile>6 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>6.AlignmentToParent = {left : 3; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (<precompile>6.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>7 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>7.Points = {{x : 0; y : 6;} of (::presentation::Point); {x : 3; y : 9;} of (::presentation::Point); {x : 10; y : 2;} of (::presentation::Point); {x : 10; y : 1;} of (::presentation::Point); {x : 3; y : 8;} of (::presentation::Point); {x : 0; y : 5;} of (::presentation::Point);});
            }
            {
                (<precompile>7.Size = {x : 11; y : 11;} of (::presentation::Size));
            }
            {
                (<precompile>6.OwnedElement = <precompile>7);
            }
            {
                <precompile>1.AddChild(<precompile>6);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>8 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>8.SetSite(0, 1, 3, 1);
            }
            (<precompile>9 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>9.AlignmentToParent = {left : 2; top : 0; right : (-1); bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>9.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>10 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>10.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>10.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>11 = new (::presentation::elements::GuiFocusRectangleElement^)());
            {
                (<precompile>10.OwnedElement = <precompile>11);
            }
            {
                <precompile>9.AddChild(<precompile>10);
            }
            (<precompile>12 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>12.AlignmentToParent = {left : 4; top : 2; right : 4; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>12.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>13 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>13.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>13.HorizontalAlignment = Left of (::presentation::Alignment));
            }
            {
                (<precompile>12.OwnedElement = <precompile>13);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>12.AddChild(container);
            }
            {
                <precompile>9.AddChild(<precompile>12);
            }
            {
                <precompile>8.AddChild(<precompile>9);
            }
            {
                <precompile>0.AddChild(<precompile>8);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CheckBoxTemplate* = null of (::darkskin::CheckBoxTemplate*);

                    var <bind-cache>1 : ::darkskin::CheckBoxTemplate* = null of (::darkskin::CheckBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#252526" : (state == ButtonState::Active) ? "#54545C" : (state == ButtonState::Pressed) ? "#007ACC" : "#3F3F46")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CheckBoxTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::CheckBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CheckBoxTemplate*));
                            (<bind-cache>1 = null of (::darkskin::CheckBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CheckBoxTemplate* = null of (::darkskin::CheckBoxTemplate*);

                    var <bind-cache>1 : ::darkskin::CheckBoxTemplate* = null of (::darkskin::CheckBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#434346" : (state == ButtonState::Active) ? "#6A6A75" : (state == ButtonState::Pressed) ? "#1C97EA" : "#54545C")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CheckBoxTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::CheckBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CheckBoxTemplate*));
                            (<bind-cache>1 = null of (::darkskin::CheckBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CheckBoxTemplate* = null of (::darkskin::CheckBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CheckBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CheckBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CheckBoxTemplate* = null of (::darkskin::CheckBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CheckBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CheckBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CheckBoxTemplate* = null of (::darkskin::CheckBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CheckBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CheckBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CheckBoxTemplate* = null of (::darkskin::CheckBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Focused of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CheckBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FocusedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FocusedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CheckBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>10.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>10.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CheckBoxTemplate* = null of (::darkskin::CheckBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CheckBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CheckBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>13.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>13.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CheckBoxTemplate* = null of (::darkskin::CheckBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CheckBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CheckBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>13.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>13.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CheckBoxTemplate* = null of (::darkskin::CheckBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CheckBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CheckBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>13.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>13.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(6/142)================================
module <instance>darkskin::CheckBoxTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(CheckBoxTemplateConstructor))
    class CheckBoxTemplate : ::presentation::templates::GuiSelectableButtonTemplate, CheckBoxTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::CheckBoxTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-CheckBoxTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(7/142)================================
module <constructor>darkskin::RadioButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RadioButtonTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::RadioButtonTemplate* = null of (::darkskin::RadioButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::elements::GuiFocusRectangleElement^ = null of (::presentation::elements::GuiFocusRectangleElement^);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <darkskin-RadioButtonTemplate>Initialize(<this> : ::darkskin::RadioButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 2);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 17;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Absolute; absolute : 17;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(1, 0, 1, 1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>3.Shape = {shapeType : Ellipse;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            (<precompile>4 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>4.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>4.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>5 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>5.Shape = {shapeType : Ellipse;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>4.OwnedElement = <precompile>5);
            }
            {
                <precompile>1.AddChild(<precompile>4);
            }
            (<precompile>6 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>6.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>6.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>7 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>7.Shape = {shapeType : Ellipse;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>6.OwnedElement = <precompile>7);
            }
            {
                <precompile>1.AddChild(<precompile>6);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>8 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>8.SetSite(0, 1, 3, 1);
            }
            (<precompile>9 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>9.AlignmentToParent = {left : 2; top : 0; right : (-1); bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>9.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>10 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>10.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>10.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>11 = new (::presentation::elements::GuiFocusRectangleElement^)());
            {
                (<precompile>10.OwnedElement = <precompile>11);
            }
            {
                <precompile>9.AddChild(<precompile>10);
            }
            (<precompile>12 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>12.AlignmentToParent = {left : 4; top : 2; right : 4; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>12.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>13 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>13.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>13.HorizontalAlignment = Left of (::presentation::Alignment));
            }
            {
                (<precompile>12.OwnedElement = <precompile>13);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>12.AddChild(container);
            }
            {
                <precompile>9.AddChild(<precompile>12);
            }
            {
                <precompile>8.AddChild(<precompile>9);
            }
            {
                <precompile>0.AddChild(<precompile>8);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RadioButtonTemplate* = null of (::darkskin::RadioButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RadioButtonTemplate* = null of (::darkskin::RadioButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#252526" : (state == ButtonState::Active) ? "#54545C" : (state == ButtonState::Pressed) ? "#007ACC" : "#3F3F46")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RadioButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RadioButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RadioButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RadioButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RadioButtonTemplate* = null of (::darkskin::RadioButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RadioButtonTemplate* = null of (::darkskin::RadioButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#434346" : (state == ButtonState::Active) ? "#6A6A75" : (state == ButtonState::Pressed) ? "#1C97EA" : "#54545C")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RadioButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RadioButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RadioButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RadioButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RadioButtonTemplate* = null of (::darkskin::RadioButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RadioButtonTemplate* = null of (::darkskin::RadioButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Active) ? "#F1F1F1" : (state == ButtonState::Pressed) ? "#FFFFFF" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RadioButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RadioButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RadioButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RadioButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RadioButtonTemplate* = null of (::darkskin::RadioButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RadioButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RadioButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RadioButtonTemplate* = null of (::darkskin::RadioButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Focused of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RadioButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FocusedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FocusedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RadioButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>10.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>10.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RadioButtonTemplate* = null of (::darkskin::RadioButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RadioButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RadioButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>13.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>13.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RadioButtonTemplate* = null of (::darkskin::RadioButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RadioButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RadioButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>13.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>13.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RadioButtonTemplate* = null of (::darkskin::RadioButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RadioButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RadioButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>13.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>13.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(8/142)================================
module <instance>darkskin::RadioButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RadioButtonTemplateConstructor))
    class RadioButtonTemplate : ::presentation::templates::GuiSelectableButtonTemplate, RadioButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RadioButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RadioButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(9/142)================================
module <constructor>darkskin::DocumentLabelTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class DocumentLabelTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::DocumentLabelTemplate* = null of (::darkskin::DocumentLabelTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-DocumentLabelTemplate>Initialize(<this> : ::darkskin::DocumentLabelTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.CaretColor = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#252526"));
            }
            {
                (self.OwnedElement = <precompile>0);
            }
            {
                (self.BaselineDocument = (cast (::presentation::DocumentModel^) <this>.ResolveResource("res", "DarkSkin/BaselineDocuments/Dark", true)));
            }
        }

        new ()
        {
        }
    }
}

================================(10/142)================================
module <instance>darkskin::DocumentLabelTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(DocumentLabelTemplateConstructor))
    class DocumentLabelTemplate : ::presentation::templates::GuiDocumentLabelTemplate, DocumentLabelTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::DocumentLabelTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-DocumentLabelTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(11/142)================================
module <constructor>darkskin::DocumentTextBoxTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class DocumentTextBoxTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::DocumentTextBoxTemplate* = null of (::darkskin::DocumentTextBoxTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-DocumentTextBoxTemplate>Initialize(<this> : ::darkskin::DocumentTextBoxTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.CaretColor = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.AddChild(container);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#252526"));
            }
            {
                (self.OwnedElement = <precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::DocumentTextBoxTemplate* = null of (::darkskin::DocumentTextBoxTemplate*);

                    var <bind-cache>1 : ::darkskin::DocumentTextBoxTemplate* = null of (::darkskin::DocumentTextBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::DocumentTextBoxTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::DocumentTextBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::DocumentTextBoxTemplate*));
                            (<bind-cache>1 = null of (::darkskin::DocumentTextBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.BaselineDocument = (cast (::presentation::DocumentModel^) <this>.ResolveResource("res", "DarkSkin/BaselineDocuments/Dark", true)));
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(12/142)================================
module <instance>darkskin::DocumentTextBoxTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(DocumentTextBoxTemplateConstructor))
    class DocumentTextBoxTemplate : ::presentation::templates::GuiDocumentLabelTemplate, DocumentTextBoxTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::DocumentTextBoxTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-DocumentTextBoxTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(13/142)================================
module <constructor>darkskin::DocumentViewerTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class DocumentViewerTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::DocumentViewerTemplate* = null of (::darkskin::DocumentViewerTemplate*);

        @cpp:Protected
        var look : ::presentation::templates::GuiCommonScrollViewLook* = null of (::presentation::templates::GuiCommonScrollViewLook*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-DocumentViewerTemplate>Initialize(<this> : ::darkskin::DocumentViewerTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.CaretColor = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (look = new (::presentation::templates::GuiCommonScrollViewLook*)(20 of (::system::Int64)));
            <this>.SetNamedObject("look", look);
            {
                (look.VScrollTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::VScrollTemplate*)();
                    }
                });
            }
            {
                (look.HScrollTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::HScrollTemplate*)();
                    }
                });
            }
            {
                (look.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                <precompile>0.AddChild(look);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#252526"));
            }
            {
                (self.OwnedElement = <precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::DocumentViewerTemplate* = null of (::darkskin::DocumentViewerTemplate*);

                    var <bind-cache>1 : ::darkskin::DocumentViewerTemplate* = null of (::darkskin::DocumentViewerTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::DocumentViewerTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::DocumentViewerTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::DocumentViewerTemplate*));
                            (<bind-cache>1 = null of (::darkskin::DocumentViewerTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.BaselineDocument = (cast (::presentation::DocumentModel^) <this>.ResolveResource("res", "DarkSkin/BaselineDocuments/Dark", true)));
            }
            {
                (self.ContainerComposition = look.ContainerComposition);
            }
            {
                (self.HorizontalScroll = look.HScroll);
            }
            {
                (self.VerticalScroll = look.VScroll);
            }
        }

        new ()
        {
        }
    }
}

================================(14/142)================================
module <instance>darkskin::DocumentViewerTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(DocumentViewerTemplateConstructor))
    class DocumentViewerTemplate : ::presentation::templates::GuiDocumentViewerTemplate, DocumentViewerTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::DocumentViewerTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-DocumentViewerTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(15/142)================================
module <constructor>darkskin::ComboBoxTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ComboBoxTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-ComboBoxTemplate>Initialize(<this> : ::darkskin::ComboBoxTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.DatePickerTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiDatePickerTemplate*)
                {
                    {
                        return new (::darkskin::DatePickerTemplate*)();
                    }
                });
            }
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 1; top : 1; right : 11; bottom : 1;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>3.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>4 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>4.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>4.HorizontalAlignment = Left of (::presentation::Alignment));
            }
            {
                (<precompile>4.Ellipse = true);
            }
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                container.AddChild(<precompile>3);
            }
            {
                <precompile>1.AddChild(container);
            }
            (<precompile>5 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>5.PreferredMinSize = {x : 9; y : 0;} of (::presentation::Size));
            }
            {
                (<precompile>5.AlignmentToParent = {left : (-1); top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>5.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>5.SetRowsAndColumns(3, 3);
                <precompile>5.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>5.SetRowOption(1, {composeType : Absolute; absolute : 3;} of (::presentation::compositions::GuiCellOption));
                <precompile>5.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>5.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>5.SetColumnOption(1, {composeType : Absolute; absolute : 5;} of (::presentation::compositions::GuiCellOption));
                <precompile>5.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>6 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>5.OwnedElement = <precompile>6);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(1, 1, 1, 1);
            }
            (<precompile>8 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>8.Points = {{x : 0; y : 0;} of (::presentation::Point); {x : 2; y : 2;} of (::presentation::Point); {x : 4; y : 0;} of (::presentation::Point);});
            }
            {
                (<precompile>8.Size = {x : 5; y : 3;} of (::presentation::Size));
            }
            {
                (<precompile>7.OwnedElement = <precompile>8);
            }
            {
                <precompile>5.AddChild(<precompile>7);
            }
            {
                <precompile>1.AddChild(<precompile>5);
            }
            {
                self.AddChild(<precompile>1);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-cache>1 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-cache>2 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#2D2D30" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#3F3F46" : (state == ButtonState::Active) ? "#3F3F46" : "#333337")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-cache>1 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.TextVisible of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextVisibleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextVisibleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-cache>1 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-cache>2 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#007ACC" : (state == ButtonState::Active) ? "#1F1F20" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-cache>1 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-cache>2 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#2D2D30" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#3F3F46" : (state == ButtonState::Active) ? "#3F3F46" : "#434346")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-cache>1 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-cache>2 : ::darkskin::ComboBoxTemplate* = null of (::darkskin::ComboBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#999999" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#FFFFFF" : (state == ButtonState::Active) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ComboBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ComboBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(16/142)================================
module <instance>darkskin::ComboBoxTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ComboBoxTemplateConstructor))
    class ComboBoxTemplate : ::presentation::templates::GuiDateComboBoxTemplate, ComboBoxTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ComboBoxTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ComboBoxTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(17/142)================================
module <constructor>darkskin::ExpandingDecoratorTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ExpandingDecoratorTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-ExpandingDecoratorTemplate>Initialize(<this> : ::darkskin::ExpandingDecoratorTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 9;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Absolute; absolute : 7;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(1, 1, 1, 1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>3.Points = {{x : 1; y : 0;} of (::presentation::Point); {x : 5; y : 4;} of (::presentation::Point); {x : 1; y : 8;} of (::presentation::Point);});
            }
            {
                (<precompile>3.Size = {x : 7; y : 9;} of (::presentation::Size));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            (<precompile>4 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>4.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>5 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>5.Points = {{x : 5; y : 2;} of (::presentation::Point); {x : 5; y : 7;} of (::presentation::Point); {x : 0; y : 7;} of (::presentation::Point);});
            }
            {
                (<precompile>5.Size = {x : 7; y : 9;} of (::presentation::Size));
            }
            {
                (<precompile>4.OwnedElement = <precompile>5);
            }
            {
                <precompile>1.AddChild(<precompile>4);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

                    var <bind-cache>1 : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

                    var <bind-cache>2 : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.Selected) ? "#00000000" : (!<bind-cache>2.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Pressed) ? "#0A75B9" : (state == ButtonState::Active) ? "#0A75B9" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ExpandingDecoratorTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ExpandingDecoratorTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ExpandingDecoratorTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectedChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.VisuallyEnabledChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.VisuallyEnabledChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ExpandingDecoratorTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ExpandingDecoratorTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ExpandingDecoratorTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

                    var <bind-cache>1 : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Pressed) ? "#0A75B9" : (state == ButtonState::Active) ? "#0A75B9" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ExpandingDecoratorTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ExpandingDecoratorTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ExpandingDecoratorTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ExpandingDecoratorTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (!<bind-cache>0.Selected) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ExpandingDecoratorTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ExpandingDecoratorTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

                    var <bind-cache>1 : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

                    var <bind-cache>2 : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.Selected) ? "#00000000" : (!<bind-cache>2.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Pressed) ? "#0A75B9" : (state == ButtonState::Active) ? "#0A75B9" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ExpandingDecoratorTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ExpandingDecoratorTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ExpandingDecoratorTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectedChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.VisuallyEnabledChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.VisuallyEnabledChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ExpandingDecoratorTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ExpandingDecoratorTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ExpandingDecoratorTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

                    var <bind-cache>1 : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Pressed) ? "#0A75B9" : (state == ButtonState::Active) ? "#0A75B9" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ExpandingDecoratorTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ExpandingDecoratorTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ExpandingDecoratorTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ExpandingDecoratorTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ExpandingDecoratorTemplate* = null of (::darkskin::ExpandingDecoratorTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ExpandingDecoratorTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ExpandingDecoratorTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(18/142)================================
module <instance>darkskin::ExpandingDecoratorTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ExpandingDecoratorTemplateConstructor))
    class ExpandingDecoratorTemplate : ::presentation::templates::GuiSelectableButtonTemplate, ExpandingDecoratorTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ExpandingDecoratorTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ExpandingDecoratorTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(19/142)================================
module <constructor>darkskin::ItemBackgroundTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ItemBackgroundTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::ItemBackgroundTemplate* = null of (::darkskin::ItemBackgroundTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-ItemBackgroundTemplate>Initialize(<this> : ::darkskin::ItemBackgroundTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (self.OwnedElement = <precompile>0);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                self.AddChild(container);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ItemBackgroundTemplate* = null of (::darkskin::ItemBackgroundTemplate*);

                    var <bind-cache>1 : ::darkskin::ItemBackgroundTemplate* = null of (::darkskin::ItemBackgroundTemplate*);

                    var <bind-cache>2 : ::darkskin::ItemBackgroundTemplate* = null of (::darkskin::ItemBackgroundTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : (<bind-cache>2.Selected or (state == ButtonState::Pressed)) ? "#3399FF" : (state == ButtonState::Active) ? "#3F3F46" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ItemBackgroundTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ItemBackgroundTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ItemBackgroundTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ItemBackgroundTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ItemBackgroundTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ItemBackgroundTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(20/142)================================
module <instance>darkskin::ItemBackgroundTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ItemBackgroundTemplateConstructor))
    class ItemBackgroundTemplate : ::presentation::templates::GuiSelectableButtonTemplate, ItemBackgroundTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ItemBackgroundTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ItemBackgroundTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(21/142)================================
module <constructor>darkskin::ListViewColumnHeaderTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ListViewColumnHeaderTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

        @cpp:Protected
        var buttonArrow : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <darkskin-ListViewColumnHeaderTemplate>Initialize(<this> : ::darkskin::ListViewColumnHeaderTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.PreferredMinSize = {x : 1; y : 0;} of (::presentation::Size));
            }
            {
                (<precompile>1.AlignmentToParent = {left : (-1); top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#404042"));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                self.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>3.PreferredMinSize = {x : 0; y : 1;} of (::presentation::Size));
            }
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : (-1); right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>4 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>4.Color = (cast (::presentation::Color) "#404042"));
            }
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                self.AddChild(<precompile>3);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 1; top : 1; right : 11; bottom : 1;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>5 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 1; right : 0; bottom : (-1);} of (::presentation::Margin));
            }
            {
                (<precompile>5.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>5.SetRowsAndColumns(2, 3);
                <precompile>5.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>5.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>5.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>5.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>5.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(0, 1, 1, 1);
            }
            (<precompile>7 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>7.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>8 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>8.Points = {{x : 0; y : 3;} of (::presentation::Point); {x : 3; y : 0;} of (::presentation::Point); {x : 6; y : 3;} of (::presentation::Point);});
            }
            {
                (<precompile>8.Size = {x : 7; y : 4;} of (::presentation::Size));
            }
            {
                (<precompile>7.OwnedElement = <precompile>8);
            }
            {
                <precompile>6.AddChild(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>9.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>10 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>10.Points = {{x : 0; y : 0;} of (::presentation::Point); {x : 3; y : 3;} of (::presentation::Point); {x : 6; y : 0;} of (::presentation::Point);});
            }
            {
                (<precompile>10.Size = {x : 7; y : 4;} of (::presentation::Size));
            }
            {
                (<precompile>9.OwnedElement = <precompile>10);
            }
            {
                <precompile>6.AddChild(<precompile>9);
            }
            {
                <precompile>5.AddChild(<precompile>6);
            }
            {
                container.AddChild(<precompile>5);
            }
            (<precompile>11 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>11.AlignmentToParent = {left : 8; top : 6; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>11.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>12 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>12.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>12.HorizontalAlignment = Left of (::presentation::Alignment));
            }
            {
                (<precompile>12.Ellipse = true);
            }
            {
                (<precompile>11.OwnedElement = <precompile>12);
            }
            {
                container.AddChild(<precompile>11);
            }
            {
                self.AddChild(container);
            }
            (<precompile>13 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>13.AlignmentToParent = {left : (-1); top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>13.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (buttonArrow = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("buttonArrow", buttonArrow);
            }
            (<precompile>14 = buttonArrow.BoundsComposition);
            {
                (<precompile>14.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (buttonArrow.AutoFocus = false);
            }
            {
                (buttonArrow.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripSplitArrowTemplate*)();
                    }
                });
            }
            {
                <precompile>13.AddChild(buttonArrow.BoundsComposition);
            }
            {
                self.AddChild(<precompile>13);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-cache>1 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-cache>2 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#3E3E40" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#007ACC" : (state == ButtonState::Active) ? "#3E3E40" : "#252527")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-cache>1 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-cache>2 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.Selected) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-cache>1 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-cache>2 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.Selected) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.SortingState == ColumnSortingState::Ascending) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SortingStateChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SortingStateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-cache>1 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-cache>2 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.Selected) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>10.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>10.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-cache>1 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-cache>2 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.Selected) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>10.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>10.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.SortingState == ColumnSortingState::Descending) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SortingStateChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SortingStateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>9.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>9.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>12.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>12.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-cache>1 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Active) ? "#F1F1F1" : (state == ButtonState::Pressed) ? "#FFFFFF" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>12.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>12.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>12.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>12.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.SubMenuExisting of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SubMenuExistingChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SubMenuExistingChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = buttonArrow.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (buttonArrow.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewColumnHeaderTemplate* = null of (::darkskin::ListViewColumnHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.SubMenuOpening of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewColumnHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SubMenuOpeningChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SubMenuOpeningChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewColumnHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = buttonArrow.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (buttonArrow.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
            {
                (self.SubMenuHost = buttonArrow);
            }
        }

        new ()
        {
        }
    }
}

================================(22/142)================================
module <instance>darkskin::ListViewColumnHeaderTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ListViewColumnHeaderTemplateConstructor))
    class ListViewColumnHeaderTemplate : ::presentation::templates::GuiListViewColumnHeaderTemplate, ListViewColumnHeaderTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ListViewColumnHeaderTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ListViewColumnHeaderTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(23/142)================================
module <constructor>darkskin::ListViewTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ListViewTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::ListViewTemplate* = null of (::darkskin::ListViewTemplate*);

        @cpp:Protected
        var look : ::presentation::templates::GuiCommonScrollViewLook* = null of (::presentation::templates::GuiCommonScrollViewLook*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-ListViewTemplate>Initialize(<this> : ::darkskin::ListViewTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.ColumnHeaderTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiListViewColumnHeaderTemplate*)
                {
                    {
                        return new (::darkskin::ListViewColumnHeaderTemplate*)();
                    }
                });
            }
            {
                (self.BackgroundTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiSelectableButtonTemplate*)
                {
                    {
                        return new (::darkskin::ItemBackgroundTemplate*)();
                    }
                });
            }
            {
                (self.ItemSeparatorColor = (cast (::presentation::Color) "#F1F1F1"));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (self.SecondaryTextColor = (cast (::presentation::Color) "#F1F1F1"));
            }
            {
                (self.PrimaryTextColor = (cast (::presentation::Color) "#F1F1F1"));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (look = new (::presentation::templates::GuiCommonScrollViewLook*)(20 of (::system::Int64)));
            <this>.SetNamedObject("look", look);
            {
                (look.VScrollTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::VScrollTemplate*)();
                    }
                });
            }
            {
                (look.HScrollTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::HScrollTemplate*)();
                    }
                });
            }
            {
                (look.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                <precompile>0.AddChild(look);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#252526"));
            }
            {
                (self.OwnedElement = <precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ListViewTemplate* = null of (::darkskin::ListViewTemplate*);

                    var <bind-cache>1 : ::darkskin::ListViewTemplate* = null of (::darkskin::ListViewTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ListViewTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ListViewTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ListViewTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ListViewTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = look.ContainerComposition);
            }
            {
                (self.HorizontalScroll = look.HScroll);
            }
            {
                (self.VerticalScroll = look.VScroll);
            }
        }

        new ()
        {
        }
    }
}

================================(24/142)================================
module <instance>darkskin::ListViewTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ListViewTemplateConstructor))
    class ListViewTemplate : ::presentation::templates::GuiListViewTemplate, ListViewTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ListViewTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ListViewTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(25/142)================================
module <constructor>darkskin::TextListTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class TextListTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::TextListTemplate* = null of (::darkskin::TextListTemplate*);

        @cpp:Protected
        var look : ::presentation::templates::GuiCommonScrollViewLook* = null of (::presentation::templates::GuiCommonScrollViewLook*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-TextListTemplate>Initialize(<this> : ::darkskin::TextListTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.RadioBulletTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiSelectableButtonTemplate*)
                {
                    {
                        return new (::darkskin::RadioButtonTemplate*)();
                    }
                });
            }
            {
                (self.CheckBulletTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiSelectableButtonTemplate*)
                {
                    {
                        return new (::darkskin::CheckBoxTemplate*)();
                    }
                });
            }
            {
                (self.BackgroundTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiSelectableButtonTemplate*)
                {
                    {
                        return new (::darkskin::ItemBackgroundTemplate*)();
                    }
                });
            }
            {
                (self.TextColor = (cast (::presentation::Color) "#F1F1F1"));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (look = new (::presentation::templates::GuiCommonScrollViewLook*)(20 of (::system::Int64)));
            <this>.SetNamedObject("look", look);
            {
                (look.VScrollTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::VScrollTemplate*)();
                    }
                });
            }
            {
                (look.HScrollTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::HScrollTemplate*)();
                    }
                });
            }
            {
                (look.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                <precompile>0.AddChild(look);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#252526"));
            }
            {
                (self.OwnedElement = <precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TextListTemplate* = null of (::darkskin::TextListTemplate*);

                    var <bind-cache>1 : ::darkskin::TextListTemplate* = null of (::darkskin::TextListTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TextListTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::TextListTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TextListTemplate*));
                            (<bind-cache>1 = null of (::darkskin::TextListTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = look.ContainerComposition);
            }
            {
                (self.HorizontalScroll = look.HScroll);
            }
            {
                (self.VerticalScroll = look.VScroll);
            }
        }

        new ()
        {
        }
    }
}

================================(26/142)================================
module <instance>darkskin::TextListTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(TextListTemplateConstructor))
    class TextListTemplate : ::presentation::templates::GuiTextListTemplate, TextListTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::TextListTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-TextListTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(27/142)================================
module <constructor>darkskin::TreeViewTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class TreeViewTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::TreeViewTemplate* = null of (::darkskin::TreeViewTemplate*);

        @cpp:Protected
        var look : ::presentation::templates::GuiCommonScrollViewLook* = null of (::presentation::templates::GuiCommonScrollViewLook*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-TreeViewTemplate>Initialize(<this> : ::darkskin::TreeViewTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.ExpandingDecoratorTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiSelectableButtonTemplate*)
                {
                    {
                        return new (::darkskin::ExpandingDecoratorTemplate*)();
                    }
                });
            }
            {
                (self.BackgroundTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiSelectableButtonTemplate*)
                {
                    {
                        return new (::darkskin::ItemBackgroundTemplate*)();
                    }
                });
            }
            {
                (self.TextColor = (cast (::presentation::Color) "#F1F1F1"));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (look = new (::presentation::templates::GuiCommonScrollViewLook*)(20 of (::system::Int64)));
            <this>.SetNamedObject("look", look);
            {
                (look.VScrollTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::VScrollTemplate*)();
                    }
                });
            }
            {
                (look.HScrollTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::HScrollTemplate*)();
                    }
                });
            }
            {
                (look.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                <precompile>0.AddChild(look);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#252526"));
            }
            {
                (self.OwnedElement = <precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TreeViewTemplate* = null of (::darkskin::TreeViewTemplate*);

                    var <bind-cache>1 : ::darkskin::TreeViewTemplate* = null of (::darkskin::TreeViewTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TreeViewTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::TreeViewTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TreeViewTemplate*));
                            (<bind-cache>1 = null of (::darkskin::TreeViewTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = look.ContainerComposition);
            }
            {
                (self.HorizontalScroll = look.HScroll);
            }
            {
                (self.VerticalScroll = look.VScroll);
            }
        }

        new ()
        {
        }
    }
}

================================(28/142)================================
module <instance>darkskin::TreeViewTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(TreeViewTemplateConstructor))
    class TreeViewTemplate : ::presentation::templates::GuiTreeViewTemplate, TreeViewTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::TreeViewTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-TreeViewTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(29/142)================================
module <constructor>darkskin::DateButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class DateButtonTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::DateButtonTemplate* = null of (::darkskin::DateButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiFocusRectangleElement^ = null of (::presentation::elements::GuiFocusRectangleElement^);

        @cpp:Protected
        func <darkskin-DateButtonTemplate>Initialize(<this> : ::darkskin::DateButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiFocusRectangleElement^)());
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                self.AddChild(<precompile>1);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                self.AddChild(container);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::DateButtonTemplate* = null of (::darkskin::DateButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::DateButtonTemplate* = null of (::darkskin::DateButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::DateButtonTemplate* = null of (::darkskin::DateButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : (<bind-cache>2.Selected or (state == ButtonState::Pressed)) ? "#3399FF" : (state == ButtonState::Active) ? "#3F3F46" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::DateButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::DateButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::DateButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::DateButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::DateButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::DateButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::DateButtonTemplate* = null of (::darkskin::DateButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Focused of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::DateButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FocusedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FocusedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::DateButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(30/142)================================
module <instance>darkskin::DateButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(DateButtonTemplateConstructor))
    class DateButtonTemplate : ::presentation::templates::GuiSelectableButtonTemplate, DateButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::DateButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-DateButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(31/142)================================
module <constructor>darkskin::DatePickerTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class DatePickerTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::DatePickerTemplate* = null of (::darkskin::DatePickerTemplate*);

        @cpp:Protected
        var look : ::presentation::templates::GuiCommonDatePickerLook* = null of (::presentation::templates::GuiCommonDatePickerLook*);

        @cpp:Protected
        func <darkskin-DatePickerTemplate>Initialize(<this> : ::darkskin::DatePickerTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (look = new (::presentation::templates::GuiCommonDatePickerLook*)((cast (::presentation::Color) "#2D2D30"), (cast (::presentation::Color) "#FFFFFF"), (cast (::presentation::Color) "#999999")));
            <this>.SetNamedObject("look", look);
            {
                (look.DateTextListTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTextListTemplate*)
                {
                    {
                        return new (::darkskin::TextListTemplate*)();
                    }
                });
            }
            {
                (look.DateButtonTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiSelectableButtonTemplate*)
                {
                    {
                        return new (::darkskin::DateButtonTemplate*)();
                    }
                });
            }
            {
                (look.DateComboBoxTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiComboBoxTemplate*)
                {
                    {
                        return new (::darkskin::ComboBoxTemplate*)();
                    }
                });
            }
            {
                (look.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(look);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::DatePickerTemplate* = null of (::darkskin::DatePickerTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::DatePickerTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::DatePickerTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = look.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (look.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::DatePickerTemplate* = null of (::darkskin::DatePickerTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Date of (::system::DateTime);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::DatePickerTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DateChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::DatePickerTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = look.Date;
                    var <new> = (cast (::system::DateTime) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (look.Date = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::DatePickerTemplate* = null of (::darkskin::DatePickerTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.DateLocale of (::system::Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::DatePickerTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DateLocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DateLocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::DatePickerTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = look.DateLocale;
                    var <new> = (cast (::system::Locale) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (look.DateLocale = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::DatePickerTemplate* = null of (::darkskin::DatePickerTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Commands of (::presentation::controls::IDatePickerCommandExecutor*);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::DatePickerTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CommandsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CommandsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::DatePickerTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = look.Commands;
                    var <new> = (cast (::presentation::controls::IDatePickerCommandExecutor*) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (look.Commands = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::templates::GuiCommonDatePickerLook* = null of (::presentation::templates::GuiCommonDatePickerLook*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Date of (::system::DateTime);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (look ?? null of (::presentation::templates::GuiCommonDatePickerLook*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DateChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::templates::GuiCommonDatePickerLook*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Date;
                    var <new> = (cast (::system::DateTime) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Date = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(32/142)================================
module <instance>darkskin::DatePickerTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(DatePickerTemplateConstructor))
    class DatePickerTemplate : ::presentation::templates::GuiDatePickerTemplate, DatePickerTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::DatePickerTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-DatePickerTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(33/142)================================
module <constructor>darkskin::GroupBoxTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class GroupBoxTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::GroupBoxTemplate* = null of (::darkskin::GroupBoxTemplate*);

        @cpp:Protected
        var titleBounds : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <darkskin-GroupBoxTemplate>Initialize(<this> : ::darkskin::GroupBoxTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#2D2D30"));
            }
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#3F3F46"));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>1.AddChild(container);
            }
            {
                self.AddChild(<precompile>1);
            }
            (titleBounds = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("titleBounds", titleBounds);
            {
                (titleBounds.AlignmentToParent = {left : 5; top : 0; right : (-1); bottom : (-1);} of (::presentation::Margin));
            }
            {
                (titleBounds.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>3.Color = (cast (::presentation::Color) "#2D2D30"));
            }
            {
                (titleBounds.OwnedElement = <precompile>3);
            }
            (<precompile>4 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>4.AlignmentToParent = {left : 2; top : 0; right : 2; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>4.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>5 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>5.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>5.Color = (cast (::presentation::Color) "#C7C7C7"));
            }
            {
                (<precompile>4.OwnedElement = <precompile>5);
            }
            {
                titleBounds.AddChild(<precompile>4);
            }
            {
                self.AddChild(titleBounds);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = {left : 1; top : (1 + (<bind-cache>0.CachedBounds.y2 / 2)); right : 1; bottom : 1;} of (::presentation::Margin);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (titleBounds ?? null of (::presentation::compositions::GuiBoundsComposition*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CachedBoundsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CachedBoundsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::compositions::GuiBoundsComposition*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = container.AlignmentToParent;
                    var <new> = (cast (::presentation::Margin) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (container.AlignmentToParent = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = {left : 0; top : (<bind-cache>0.CachedBounds.y2 / 2); right : 0; bottom : 0;} of (::presentation::Margin);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (titleBounds ?? null of (::presentation::compositions::GuiBoundsComposition*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CachedBoundsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CachedBoundsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::compositions::GuiBoundsComposition*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.AlignmentToParent;
                    var <new> = (cast (::presentation::Margin) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.AlignmentToParent = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::GroupBoxTemplate* = null of (::darkskin::GroupBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::GroupBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::GroupBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::GroupBoxTemplate* = null of (::darkskin::GroupBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::GroupBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::GroupBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(34/142)================================
module <instance>darkskin::GroupBoxTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(GroupBoxTemplateConstructor))
    class GroupBoxTemplate : ::presentation::templates::GuiControlTemplate, GroupBoxTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::GroupBoxTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-GroupBoxTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(35/142)================================
module <constructor>darkskin::LabelTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class LabelTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::LabelTemplate* = null of (::darkskin::LabelTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <darkskin-LabelTemplate>Initialize(<this> : ::darkskin::LabelTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.DefaultTextColor = (cast (::presentation::Color) "#F1F1F1"));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (self.OwnedElement = <precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::LabelTemplate* = null of (::darkskin::LabelTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::LabelTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::LabelTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::LabelTemplate* = null of (::darkskin::LabelTemplate*);

                    var <bind-cache>1 : ::darkskin::LabelTemplate* = null of (::darkskin::LabelTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : <bind-cache>1.TextColor) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::LabelTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::LabelTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.TextColorChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.TextColorChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::LabelTemplate*));
                            (<bind-cache>1 = null of (::darkskin::LabelTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::LabelTemplate* = null of (::darkskin::LabelTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::LabelTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::LabelTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(36/142)================================
module <instance>darkskin::LabelTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(LabelTemplateConstructor))
    class LabelTemplate : ::presentation::templates::GuiLabelTemplate, LabelTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::LabelTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-LabelTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(37/142)================================
module <constructor>darkskin::ShortcutKeyTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ShortcutKeyTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::ShortcutKeyTemplate* = null of (::darkskin::ShortcutKeyTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <darkskin-ShortcutKeyTemplate>Initialize(<this> : ::darkskin::ShortcutKeyTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.DefaultTextColor = (cast (::presentation::Color) "#F1F1F1"));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#3F3F46"));
            }
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#252526"));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            (<precompile>3 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 1; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>4 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                <precompile>1.AddChild(<precompile>3);
            }
            {
                self.AddChild(<precompile>1);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ShortcutKeyTemplate* = null of (::darkskin::ShortcutKeyTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ShortcutKeyTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ShortcutKeyTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ShortcutKeyTemplate* = null of (::darkskin::ShortcutKeyTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.TextColor of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ShortcutKeyTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextColorChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextColorChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ShortcutKeyTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ShortcutKeyTemplate* = null of (::darkskin::ShortcutKeyTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ShortcutKeyTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ShortcutKeyTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(38/142)================================
module <instance>darkskin::ShortcutKeyTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ShortcutKeyTemplateConstructor))
    class ShortcutKeyTemplate : ::presentation::templates::GuiLabelTemplate, ShortcutKeyTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ShortcutKeyTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ShortcutKeyTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(39/142)================================
module <constructor>darkskin::RibbonSplitArrowTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonSplitArrowTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-RibbonSplitArrowTemplate>Initialize(<this> : ::darkskin::RibbonSplitArrowTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 1);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(0, 0, 1, 1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>3.AlignmentToParent = {left : 3; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>4 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>4.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>4.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                <precompile>2.AddChild(<precompile>3);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>5.PreferredMinSize = {x : 11; y : 9;} of (::presentation::Size));
            }
            {
                <precompile>5.SetSite(1, 0, 1, 1);
            }
            (<precompile>6 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>6.Points = {{x : 0; y : 0;} of (::presentation::Point); {x : 2; y : 2;} of (::presentation::Point); {x : 4; y : 0;} of (::presentation::Point);});
            }
            {
                (<precompile>6.Size = {x : 5; y : 3;} of (::presentation::Size));
            }
            {
                (<precompile>5.OwnedElement = <precompile>6);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.Selected) ? "#007ACC" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Active) ? "#F1F1F1" : (state == ButtonState::Pressed) ? "#FFFFFF" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.Selected) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonSplitArrowTemplate* = null of (::darkskin::RibbonSplitArrowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.Selected) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonSplitArrowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonSplitArrowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(40/142)================================
module <instance>darkskin::RibbonSplitArrowTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonSplitArrowTemplateConstructor))
    class RibbonSplitArrowTemplate : ::presentation::templates::GuiSelectableButtonTemplate, RibbonSplitArrowTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonSplitArrowTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonSplitArrowTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(41/142)================================
module <constructor>darkskin::RibbonButtonsTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonButtonsTemplateConstructor
    {
        @cpp:Protected
        var <precompile>0 : ::darkskin::RibbonButtonsTemplate* = null of (::darkskin::RibbonButtonsTemplate*);

        @cpp:Protected
        func <darkskin-RibbonButtonsTemplate>Initialize(<this> : ::darkskin::RibbonButtonsTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
        }

        new ()
        {
        }
    }
}

================================(42/142)================================
module <instance>darkskin::RibbonButtonsTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonButtonsTemplateConstructor))
    class RibbonButtonsTemplate : ::presentation::templates::GuiRibbonButtonsTemplate, RibbonButtonsTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonButtonsTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonButtonsTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(43/142)================================
module <constructor>darkskin::RibbonGalleryDropdownButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonGalleryDropdownButtonTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::RibbonGalleryDropdownButtonTemplate* = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-RibbonGalleryDropdownButtonTemplate>Initialize(<this> : ::darkskin::RibbonGalleryDropdownButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(5, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 1;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Absolute; absolute : 2;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(3, {composeType : Absolute; absolute : 5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(4, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Absolute; absolute : 9;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(1, 1, 1, 1);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(3, 1, 1, 1);
            }
            (<precompile>4 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>4.Points = {{x : 0; y : 0;} of (::presentation::Point); {x : 4; y : 4;} of (::presentation::Point); {x : 8; y : 0;} of (::presentation::Point);});
            }
            {
                (<precompile>4.Size = {x : 9; y : 5;} of (::presentation::Size));
            }
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonGalleryDropdownButtonTemplate* = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonGalleryDropdownButtonTemplate* = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : (state == ButtonState::Active) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonGalleryDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonGalleryDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonGalleryDropdownButtonTemplate* = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonGalleryDropdownButtonTemplate* = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : (state == ButtonState::Active) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonGalleryDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonGalleryDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonGalleryDropdownButtonTemplate* = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonGalleryDropdownButtonTemplate* = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : (state == ButtonState::Active) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonGalleryDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonGalleryDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonGalleryDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(44/142)================================
module <instance>darkskin::RibbonGalleryDropdownButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonGalleryDropdownButtonTemplateConstructor))
    class RibbonGalleryDropdownButtonTemplate : ::presentation::templates::GuiButtonTemplate, RibbonGalleryDropdownButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonGalleryDropdownButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonGalleryDropdownButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(45/142)================================
module <constructor>darkskin::RibbonGalleryItemListTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonGalleryItemListTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::RibbonGalleryItemListTemplate* = null of (::darkskin::RibbonGalleryItemListTemplate*);

        @cpp:Protected
        func <darkskin-RibbonGalleryItemListTemplate>Initialize(<this> : ::darkskin::RibbonGalleryItemListTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.BackgroundTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiSelectableButtonTemplate*)
                {
                    {
                        return new (::darkskin::ItemBackgroundTemplate*)();
                    }
                });
            }
        }

        new ()
        {
        }
    }
}

================================(46/142)================================
module <instance>darkskin::RibbonGalleryItemListTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonGalleryItemListTemplateConstructor))
    class RibbonGalleryItemListTemplate : ::presentation::templates::GuiTextListTemplate, RibbonGalleryItemListTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonGalleryItemListTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonGalleryItemListTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(47/142)================================
module <constructor>darkskin::RibbonGalleryTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonGalleryTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::RibbonGalleryTemplate* = null of (::darkskin::RibbonGalleryTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <darkskin-RibbonGalleryTemplate>Initialize(<this> : ::darkskin::RibbonGalleryTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.GroupContainerTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollViewTemplate*)
                {
                    {
                        return new (::darkskin::ScrollViewTemplate*)();
                    }
                });
            }
            {
                (self.BackgroundTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiSelectableButtonTemplate*)
                {
                    {
                        return new (::darkskin::ItemBackgroundTemplate*)();
                    }
                });
            }
            {
                (self.HeaderTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::RibbonToolstripHeaderTemplate*)();
                    }
                });
            }
            {
                (self.ItemListTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTextListTemplate*)
                {
                    {
                        return new (::darkskin::RibbonGalleryItemListTemplate*)();
                    }
                });
            }
            {
                (self.MenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiRibbonToolstripMenuTemplate*)
                {
                    {
                        return new (::darkskin::RibbonToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 2);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 3, 1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>2.AddChild(container);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>5 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>6 = <precompile>5.BoundsComposition);
            {
                (<precompile>6.AlignmentToParent = {left : 4; top : 0; right : 4; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>5.AutoFocus = false);
            }
            {
                (<precompile>5.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::TopScrollButtonTemplate*)();
                    }
                });
            }
            {
                <precompile>4.AddChild(<precompile>5.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>4);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>8 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>9 = <precompile>8.BoundsComposition);
            {
                (<precompile>9.AlignmentToParent = {left : 4; top : 0; right : 4; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>8.AutoFocus = false);
            }
            {
                (<precompile>8.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::BottomScrollButtonTemplate*)();
                    }
                });
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>10 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>10.SetSite(2, 1, 1, 1);
            }
            {
                (<precompile>11 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>12 = <precompile>11.BoundsComposition);
            {
                (<precompile>12.AlignmentToParent = {left : 4; top : 0; right : 4; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>11.AutoFocus = false);
            }
            {
                (<precompile>11.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::RibbonGalleryDropdownButtonTemplate*)();
                    }
                });
            }
            {
                <precompile>10.AddChild(<precompile>11.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>10);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonGalleryTemplate* = null of (::darkskin::RibbonGalleryTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonGalleryTemplate* = null of (::darkskin::RibbonGalleryTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonGalleryTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonGalleryTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonGalleryTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonGalleryTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonGalleryTemplate* = null of (::darkskin::RibbonGalleryTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.ScrollUpEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonGalleryTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ScrollUpEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ScrollUpEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonGalleryTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.Commands.NotifyScrollUp();
                };
                attach(<precompile>5.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonGalleryTemplate* = null of (::darkskin::RibbonGalleryTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.ScrollDownEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonGalleryTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ScrollDownEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ScrollDownEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonGalleryTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.Commands.NotifyScrollDown();
                };
                attach(<precompile>8.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.Commands.NotifyDropdown();
                };
                attach(<precompile>11.Clicked, <event-handler>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(48/142)================================
module <instance>darkskin::RibbonGalleryTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonGalleryTemplateConstructor))
    class RibbonGalleryTemplate : ::presentation::templates::GuiRibbonGalleryListTemplate, RibbonGalleryTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonGalleryTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonGalleryTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(49/142)================================
module <constructor>darkskin::RibbonGroupExpandButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonGroupExpandButtonTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::RibbonGroupExpandButtonTemplate* = null of (::darkskin::RibbonGroupExpandButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-RibbonGroupExpandButtonTemplate>Initialize(<this> : ::darkskin::RibbonGroupExpandButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>1.Points = {{x : 6; y : 0;} of (::presentation::Point); {x : 6; y : 6;} of (::presentation::Point); {x : 0; y : 6;} of (::presentation::Point);});
            }
            {
                (<precompile>1.Size = {x : 7; y : 7;} of (::presentation::Size));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonGroupExpandButtonTemplate* = null of (::darkskin::RibbonGroupExpandButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonGroupExpandButtonTemplate* = null of (::darkskin::RibbonGroupExpandButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : (state == ButtonState::Pressed) ? "#004879" : (state == ButtonState::Active) ? "#A0D0FF" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonGroupExpandButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonGroupExpandButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonGroupExpandButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonGroupExpandButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonGroupExpandButtonTemplate* = null of (::darkskin::RibbonGroupExpandButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonGroupExpandButtonTemplate* = null of (::darkskin::RibbonGroupExpandButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#A0D0FF" : (state == ButtonState::Pressed) ? "#004879" : (state == ButtonState::Active) ? "#A0D0FF" : "#A0D0FF")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonGroupExpandButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonGroupExpandButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonGroupExpandButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonGroupExpandButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(50/142)================================
module <instance>darkskin::RibbonGroupExpandButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonGroupExpandButtonTemplateConstructor))
    class RibbonGroupExpandButtonTemplate : ::presentation::templates::GuiButtonTemplate, RibbonGroupExpandButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonGroupExpandButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonGroupExpandButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(51/142)================================
module <constructor>darkskin::RibbonGroupMenuTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonGroupMenuTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var self : ::darkskin::RibbonGroupMenuTemplate* = null of (::darkskin::RibbonGroupMenuTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <darkskin-RibbonGroupMenuTemplate>Initialize(<this> : ::darkskin::RibbonGroupMenuTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#2D2D30"));
            }
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#333337"));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            (<precompile>3 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>3.CellPadding = 3 of (::system::Int64));
            }
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>3.SetRowsAndColumns(2, 2);
                <precompile>3.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (container = new (::presentation::compositions::GuiCellComposition*)());
            <this>.SetNamedObject("container", container);
            {
                container.SetSite(0, 0, 1, 2);
            }
            {
                <precompile>3.AddChild(container);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>5 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>6 = <precompile>5.BoundsComposition);
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>5.AutoFocus = false);
            }
            {
                (<precompile>5.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::RibbonGroupExpandButtonTemplate*)();
                    }
                });
            }
            {
                <precompile>4.AddChild(<precompile>5.BoundsComposition);
            }
            {
                <precompile>3.AddChild(<precompile>4);
            }
            {
                <precompile>1.AddChild(<precompile>3);
            }
            {
                self.AddChild(<precompile>1);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonGroupMenuTemplate* = null of (::darkskin::RibbonGroupMenuTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Expandable of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonGroupMenuTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ExpandableChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ExpandableChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonGroupMenuTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.Commands.NotifyExpandButtonClicked();
                };
                attach(<precompile>5.Clicked, <event-handler>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(52/142)================================
module <instance>darkskin::RibbonGroupMenuTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonGroupMenuTemplateConstructor))
    class RibbonGroupMenuTemplate : ::presentation::templates::GuiRibbonGroupMenuTemplate, RibbonGroupMenuTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonGroupMenuTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonGroupMenuTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(53/142)================================
module <constructor>darkskin::RibbonGroupTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonGroupTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::RibbonGroupTemplate* = null of (::darkskin::RibbonGroupTemplate*);

        @cpp:Protected
        var table : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <darkskin-RibbonGroupTemplate>Initialize(<this> : ::darkskin::RibbonGroupTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiRibbonGroupMenuTemplate*)
                {
                    {
                        return new (::darkskin::RibbonGroupMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (table = new (::presentation::compositions::GuiTableComposition*)());
            <this>.SetNamedObject("table", table);
            {
                (table.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (table.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                table.SetRowsAndColumns(2, 1);
                table.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                table.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                table.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#3F3F46"));
            }
            {
                (table.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>1.AddChild(container);
            }
            {
                table.AddChild(<precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>2.PreferredMinSize = {x : 5; y : 5;} of (::presentation::Size));
            }
            {
                <precompile>2.SetSite(1, 0, 1, 1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>3.AlignmentToParent = {left : 2; top : 1; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>4 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>4.AlignmentToParent = {left : 10; top : 2; right : 10; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>4.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>5 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>5.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>5.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>5.Color = (cast (::presentation::Color) "#6D6D6D"));
            }
            {
                (<precompile>4.OwnedElement = <precompile>5);
            }
            {
                <precompile>3.AddChild(<precompile>4);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>7 = <precompile>6.BoundsComposition);
            {
                (<precompile>7.AlignmentToParent = {left : (-1); top : (-1); right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>6.AutoFocus = false);
            }
            {
                (<precompile>6.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::RibbonGroupExpandButtonTemplate*)();
                    }
                });
            }
            {
                <precompile>3.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>3);
            }
            {
                table.AddChild(<precompile>2);
            }
            {
                self.AddChild(table);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonGroupTemplate* = null of (::darkskin::RibbonGroupTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonGroupTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonGroupTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonGroupTemplate* = null of (::darkskin::RibbonGroupTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonGroupTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonGroupTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonGroupTemplate* = null of (::darkskin::RibbonGroupTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Expandable of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonGroupTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ExpandableChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ExpandableChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonGroupTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.Commands.NotifyExpandButtonClicked();
                };
                attach(<precompile>6.Clicked, <event-handler>);
            }
            {
                (self.ContainerComposition = container);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (self.Collapsed)
                    {
                        table.SetRowOption(1, {composeType : Absolute; absolute : 0;});
                    }
                    else
                    {
                        table.SetRowOption(1, {composeType : MinSize;});
                    }
                };
                attach(self.CollapsedChanged, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(54/142)================================
module <instance>darkskin::RibbonGroupTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonGroupTemplateConstructor))
    class RibbonGroupTemplate : ::presentation::templates::GuiRibbonGroupTemplate, RibbonGroupTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonGroupTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonGroupTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(55/142)================================
module <constructor>darkskin::RibbonIconLabelTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonIconLabelTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var self : ::darkskin::RibbonIconLabelTemplate* = null of (::darkskin::RibbonIconLabelTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        func <darkskin-RibbonIconLabelTemplate>Initialize(<this> : ::darkskin::RibbonIconLabelTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 4; top : 1; right : 4; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(1, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>3.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>3.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (container = new (::presentation::compositions::GuiCellComposition*)());
            <this>.SetNamedObject("container", container);
            {
                container.SetSite(0, 1, 1, 1);
            }
            {
                <precompile>0.AddChild(container);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonIconLabelTemplate* = null of (::darkskin::RibbonIconLabelTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonIconLabelTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonIconLabelTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonIconLabelTemplate* = null of (::darkskin::RibbonIconLabelTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonIconLabelTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonIconLabelTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonIconLabelTemplate* = null of (::darkskin::RibbonIconLabelTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.FrameIndex ?? 0) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonIconLabelTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonIconLabelTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(56/142)================================
module <instance>darkskin::RibbonIconLabelTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonIconLabelTemplateConstructor))
    class RibbonIconLabelTemplate : ::presentation::templates::GuiRibbonIconLabelTemplate, RibbonIconLabelTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonIconLabelTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonIconLabelTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(57/142)================================
module <constructor>darkskin::RibbonLargeButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonLargeButtonTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <darkskin-RibbonLargeButtonTemplate>Initialize(<this> : ::darkskin::RibbonLargeButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>2.SetRowsAndColumns(3, 1);
                <precompile>2.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(1, {composeType : Absolute; absolute : 1;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(0, 0, 1, 1);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 3; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>5 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>5.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (container.OwnedElement = <precompile>5);
            }
            {
                <precompile>4.AddChild(container);
            }
            {
                <precompile>2.AddChild(<precompile>4);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(2, 0, 1, 1);
            }
            (<precompile>7 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>7.AlignmentToParent = {left : 3; top : 3; right : 3; bottom : 12;} of (::presentation::Margin));
            }
            {
                (<precompile>7.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>8 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>8.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>8.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>7.OwnedElement = <precompile>8);
            }
            {
                <precompile>6.AddChild(<precompile>7);
            }
            {
                <precompile>2.AddChild(<precompile>6);
            }
            {
                self.AddChild(<precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.Selected) ? "#00000000" : "#007ACC")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonLargeButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonLargeButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#007ACC" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonLargeButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonLargeButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonLargeButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonLargeButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.LargeImage.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LargeImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LargeImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.LargeImage.FrameIndex ?? 0) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LargeImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LargeImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Active) ? "#F1F1F1" : (state == ButtonState::Pressed) ? "#FFFFFF" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonLargeButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonLargeButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeButtonTemplate* = null of (::darkskin::RibbonLargeButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(58/142)================================
module <instance>darkskin::RibbonLargeButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonLargeButtonTemplateConstructor))
    class RibbonLargeButtonTemplate : ::presentation::templates::GuiToolstripButtonTemplate, RibbonLargeButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonLargeButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonLargeButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(59/142)================================
module <constructor>darkskin::RibbonLargeDropdownButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonLargeDropdownButtonTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-RibbonLargeDropdownButtonTemplate>Initialize(<this> : ::darkskin::RibbonLargeDropdownButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>2.SetRowsAndColumns(3, 1);
                <precompile>2.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(1, {composeType : Absolute; absolute : 1;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(0, 0, 1, 1);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 3; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>5 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>5.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (container.OwnedElement = <precompile>5);
            }
            {
                <precompile>4.AddChild(container);
            }
            {
                <precompile>2.AddChild(<precompile>4);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(2, 0, 1, 1);
            }
            (<precompile>7 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>7.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>7.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>7.SetRowsAndColumns(3, 1);
                <precompile>7.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>7.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>7.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>7.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>8 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>8.SetSite(0, 0, 1, 1);
            }
            (<precompile>9 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>9.AlignmentToParent = {left : 3; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (<precompile>9.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>10 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>10.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>10.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>9.OwnedElement = <precompile>10);
            }
            {
                <precompile>8.AddChild(<precompile>9);
            }
            {
                <precompile>7.AddChild(<precompile>8);
            }
            (<precompile>11 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>11.PreferredMinSize = {x : 11; y : 9;} of (::presentation::Size));
            }
            {
                <precompile>11.SetSite(1, 0, 1, 1);
            }
            (<precompile>12 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>12.Points = {{x : 0; y : 0;} of (::presentation::Point); {x : 2; y : 2;} of (::presentation::Point); {x : 4; y : 0;} of (::presentation::Point);});
            }
            {
                (<precompile>12.Size = {x : 5; y : 3;} of (::presentation::Size));
            }
            {
                (<precompile>11.OwnedElement = <precompile>12);
            }
            {
                <precompile>7.AddChild(<precompile>11);
            }
            {
                <precompile>6.AddChild(<precompile>7);
            }
            {
                <precompile>2.AddChild(<precompile>6);
            }
            {
                self.AddChild(<precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.Selected) ? "#00000000" : "#007ACC")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#007ACC" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.LargeImage.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LargeImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LargeImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.LargeImage.FrameIndex ?? 0) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LargeImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LargeImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>10.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>10.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Active) ? "#F1F1F1" : (state == ButtonState::Pressed) ? "#FFFFFF" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>10.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>10.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>10.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>10.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>12.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>12.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonLargeDropdownButtonTemplate* = null of (::darkskin::RibbonLargeDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonLargeDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonLargeDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>12.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>12.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(60/142)================================
module <instance>darkskin::RibbonLargeDropdownButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonLargeDropdownButtonTemplateConstructor))
    class RibbonLargeDropdownButtonTemplate : ::presentation::templates::GuiToolstripButtonTemplate, RibbonLargeDropdownButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonLargeDropdownButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonLargeDropdownButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(61/142)================================
module <constructor>darkskin::RibbonLargeSplitButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonLargeSplitButtonTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

        @cpp:Protected
        var buttonArrow : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <darkskin-RibbonLargeSplitButtonTemplate>Initialize(<this> : ::darkskin::RibbonLargeSplitButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>2.SetRowsAndColumns(3, 1);
                <precompile>2.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(1, {composeType : Absolute; absolute : 1;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 0, 1, 1);
            }
            (<precompile>4 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 3; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>5 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>5.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (container.OwnedElement = <precompile>5);
            }
            {
                <precompile>3.AddChild(container);
            }
            {
                <precompile>2.AddChild(<precompile>3);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(2, 0, 1, 1);
            }
            (<precompile>7 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>7.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>7.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>8 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>7.OwnedElement = <precompile>8);
            }
            {
                <precompile>6.AddChild(<precompile>7);
            }
            {
                (buttonArrow = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("buttonArrow", buttonArrow);
            }
            (<precompile>9 = buttonArrow.BoundsComposition);
            {
                (<precompile>9.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (buttonArrow.AutoFocus = false);
            }
            {
                (buttonArrow.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::RibbonSplitArrowTemplate*)();
                    }
                });
            }
            {
                <precompile>6.AddChild(buttonArrow.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>6);
            }
            {
                self.AddChild(<precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.Selected) ? "#00000000" : "#007ACC")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeSplitButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonLargeSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeSplitButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonLargeSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#007ACC" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeSplitButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonLargeSplitButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonLargeSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeSplitButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonLargeSplitButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonLargeSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.LargeImage.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LargeImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LargeImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.LargeImage.FrameIndex ?? 0) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LargeImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LargeImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : (state == ButtonState::Pressed) ? "#54545C" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeSplitButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonLargeSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeSplitButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonLargeSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = buttonArrow.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (buttonArrow.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonLargeSplitButtonTemplate* = null of (::darkskin::RibbonLargeSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.SubMenuOpening of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonLargeSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SubMenuOpeningChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SubMenuOpeningChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonLargeSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = buttonArrow.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (buttonArrow.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
            {
                (self.SubMenuHost = buttonArrow);
            }
        }

        new ()
        {
        }
    }
}

================================(62/142)================================
module <instance>darkskin::RibbonLargeSplitButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonLargeSplitButtonTemplateConstructor))
    class RibbonLargeSplitButtonTemplate : ::presentation::templates::GuiToolstripButtonTemplate, RibbonLargeSplitButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonLargeSplitButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonLargeSplitButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(63/142)================================
module <constructor>darkskin::RibbonSmallButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonSmallButtonTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var self : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <darkskin-RibbonSmallButtonTemplate>Initialize(<this> : ::darkskin::RibbonSmallButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (container = new (::presentation::compositions::GuiTableComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.CellPadding = 3 of (::system::Int64));
            }
            {
                (container.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                container.SetRowsAndColumns(1, 2);
                container.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                container.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                container.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(0, 0, 1, 1);
            }
            (<precompile>5 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>4.OwnedElement = <precompile>5);
            }
            {
                container.AddChild(<precompile>4);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(0, 1, 1, 1);
            }
            (<precompile>7 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>7.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>7.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>6.OwnedElement = <precompile>7);
            }
            {
                container.AddChild(<precompile>6);
            }
            {
                <precompile>2.AddChild(container);
            }
            {
                self.AddChild(<precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.Selected) ? "#00000000" : "#007ACC")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSmallButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSmallButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#007ACC" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSmallButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonSmallButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSmallButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonSmallButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.FrameIndex ?? 0) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Active) ? "#F1F1F1" : (state == ButtonState::Pressed) ? "#FFFFFF" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSmallButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSmallButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallButtonTemplate* = null of (::darkskin::RibbonSmallButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(64/142)================================
module <instance>darkskin::RibbonSmallButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonSmallButtonTemplateConstructor))
    class RibbonSmallButtonTemplate : ::presentation::templates::GuiToolstripButtonTemplate, RibbonSmallButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonSmallButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonSmallButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(65/142)================================
module <constructor>darkskin::RibbonSmallDropdownButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonSmallDropdownButtonTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var self : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-RibbonSmallDropdownButtonTemplate>Initialize(<this> : ::darkskin::RibbonSmallDropdownButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (<precompile>4 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 10; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>4.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (container = new (::presentation::compositions::GuiTableComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.CellPadding = 3 of (::system::Int64));
            }
            {
                (container.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                container.SetRowsAndColumns(1, 2);
                container.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                container.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                container.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(0, 0, 1, 1);
            }
            (<precompile>6 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>5.OwnedElement = <precompile>6);
            }
            {
                container.AddChild(<precompile>5);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(0, 1, 1, 1);
            }
            (<precompile>8 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>8.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>8.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>7.OwnedElement = <precompile>8);
            }
            {
                container.AddChild(<precompile>7);
            }
            {
                <precompile>4.AddChild(container);
            }
            {
                <precompile>2.AddChild(<precompile>4);
            }
            (<precompile>9 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>9.PreferredMinSize = {x : 9; y : 0;} of (::presentation::Size));
            }
            {
                (<precompile>9.AlignmentToParent = {left : (-1); top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>9.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>9.SetRowsAndColumns(3, 3);
                <precompile>9.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetRowOption(1, {composeType : Absolute; absolute : 3;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetColumnOption(1, {composeType : Absolute; absolute : 5;} of (::presentation::compositions::GuiCellOption));
                <precompile>9.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>10 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>10.SetSite(1, 1, 1, 1);
            }
            (<precompile>11 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>11.Points = {{x : 0; y : 0;} of (::presentation::Point); {x : 2; y : 2;} of (::presentation::Point); {x : 4; y : 0;} of (::presentation::Point);});
            }
            {
                (<precompile>11.Size = {x : 5; y : 3;} of (::presentation::Size));
            }
            {
                (<precompile>10.OwnedElement = <precompile>11);
            }
            {
                <precompile>9.AddChild(<precompile>10);
            }
            {
                <precompile>2.AddChild(<precompile>9);
            }
            {
                self.AddChild(<precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.Selected) ? "#00000000" : "#007ACC")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#007ACC" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.FrameIndex ?? 0) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Active) ? "#F1F1F1" : (state == ButtonState::Pressed) ? "#FFFFFF" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>11.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>11.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonSmallDropdownButtonTemplate* = null of (::darkskin::RibbonSmallDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonSmallDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonSmallDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>11.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>11.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(66/142)================================
module <instance>darkskin::RibbonSmallDropdownButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonSmallDropdownButtonTemplateConstructor))
    class RibbonSmallDropdownButtonTemplate : ::presentation::templates::GuiToolstripButtonTemplate, RibbonSmallDropdownButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonSmallDropdownButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonSmallDropdownButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(67/142)================================
module <constructor>darkskin::RibbonSmallIconLabelTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonSmallIconLabelTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var self : ::darkskin::RibbonSmallIconLabelTemplate* = null of (::darkskin::RibbonSmallIconLabelTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiSharedSizeItemComposition* = null of (::presentation::compositions::GuiSharedSizeItemComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <darkskin-RibbonSmallIconLabelTemplate>Initialize(<this> : ::darkskin::RibbonSmallIconLabelTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 4; top : 1; right : 4; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(1, 3);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>3.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>3.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(0, 1, 1, 1);
            }
            (<precompile>5 = new (::presentation::compositions::GuiSharedSizeItemComposition*)());
            {
                (<precompile>5.SharedWidth = true);
            }
            {
                (<precompile>5.Group = "MenuItem-Text");
            }
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            (<precompile>6 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>6.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>5.OwnedElement = <precompile>6);
            }
            {
                <precompile>4.AddChild(<precompile>5);
            }
            {
                <precompile>0.AddChild(<precompile>4);
            }
            (container = new (::presentation::compositions::GuiCellComposition*)());
            <this>.SetNamedObject("container", container);
            {
                container.SetSite(0, 2, 1, 1);
            }
            {
                <precompile>0.AddChild(container);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallIconLabelTemplate* = null of (::darkskin::RibbonSmallIconLabelTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallIconLabelTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallIconLabelTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallIconLabelTemplate* = null of (::darkskin::RibbonSmallIconLabelTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallIconLabelTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallIconLabelTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallIconLabelTemplate* = null of (::darkskin::RibbonSmallIconLabelTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.FrameIndex ?? 0) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallIconLabelTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallIconLabelTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallIconLabelTemplate* = null of (::darkskin::RibbonSmallIconLabelTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallIconLabelTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallIconLabelTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallIconLabelTemplate* = null of (::darkskin::RibbonSmallIconLabelTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallIconLabelTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallIconLabelTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallIconLabelTemplate* = null of (::darkskin::RibbonSmallIconLabelTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallIconLabelTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallIconLabelTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(68/142)================================
module <instance>darkskin::RibbonSmallIconLabelTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonSmallIconLabelTemplateConstructor))
    class RibbonSmallIconLabelTemplate : ::presentation::templates::GuiRibbonIconLabelTemplate, RibbonSmallIconLabelTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonSmallIconLabelTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonSmallIconLabelTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(69/142)================================
module <constructor>darkskin::RibbonSmallSplitButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonSmallSplitButtonTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var self : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

        @cpp:Protected
        var buttonArrow : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <darkskin-RibbonSmallSplitButtonTemplate>Initialize(<this> : ::darkskin::RibbonSmallSplitButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 1; top : 1; right : 11; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (container = new (::presentation::compositions::GuiTableComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.CellPadding = 3 of (::system::Int64));
            }
            {
                (container.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                container.SetRowsAndColumns(1, 2);
                container.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                container.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                container.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(0, 0, 1, 1);
            }
            (<precompile>5 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>4.OwnedElement = <precompile>5);
            }
            {
                container.AddChild(<precompile>4);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(0, 1, 1, 1);
            }
            (<precompile>7 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>7.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>7.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>6.OwnedElement = <precompile>7);
            }
            {
                container.AddChild(<precompile>6);
            }
            {
                <precompile>2.AddChild(container);
            }
            {
                self.AddChild(<precompile>2);
            }
            (<precompile>8 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>8.AlignmentToParent = {left : (-1); top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>8.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>9 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>9.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>9.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>10 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>9.OwnedElement = <precompile>10);
            }
            {
                <precompile>8.AddChild(<precompile>9);
            }
            {
                (buttonArrow = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("buttonArrow", buttonArrow);
            }
            (<precompile>11 = buttonArrow.BoundsComposition);
            {
                (<precompile>11.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (buttonArrow.AutoFocus = false);
            }
            {
                (buttonArrow.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripSplitArrowTemplate*)();
                    }
                });
            }
            {
                <precompile>8.AddChild(buttonArrow.BoundsComposition);
            }
            {
                self.AddChild(<precompile>8);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.Selected) ? "#00000000" : "#007ACC")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#007ACC" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.FrameIndex ?? 0) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Active) ? "#F1F1F1" : (state == ButtonState::Pressed) ? "#FFFFFF" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : (state == ButtonState::Pressed) ? "#54545C" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>10.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>10.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonSmallSplitButtonTemplate* = null of (::darkskin::RibbonSmallSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.SubMenuOpening of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonSmallSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SubMenuOpeningChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SubMenuOpeningChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonSmallSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = buttonArrow.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (buttonArrow.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
            {
                (self.SubMenuHost = buttonArrow);
            }
        }

        new ()
        {
        }
    }
}

================================(70/142)================================
module <instance>darkskin::RibbonSmallSplitButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonSmallSplitButtonTemplateConstructor))
    class RibbonSmallSplitButtonTemplate : ::presentation::templates::GuiToolstripButtonTemplate, RibbonSmallSplitButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonSmallSplitButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonSmallSplitButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(71/142)================================
module <constructor>darkskin::RibbonToolstripHeaderTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonToolstripHeaderTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::RibbonToolstripHeaderTemplate* = null of (::darkskin::RibbonToolstripHeaderTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <darkskin-RibbonToolstripHeaderTemplate>Initialize(<this> : ::darkskin::RibbonToolstripHeaderTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>1.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>1.HorizontalAlignment = Left of (::presentation::Alignment));
            }
            {
                (<precompile>1.Color = (cast (::presentation::Color) "#6D6D6D"));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonToolstripHeaderTemplate* = null of (::darkskin::RibbonToolstripHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonToolstripHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonToolstripHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RibbonToolstripHeaderTemplate* = null of (::darkskin::RibbonToolstripHeaderTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RibbonToolstripHeaderTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RibbonToolstripHeaderTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(72/142)================================
module <instance>darkskin::RibbonToolstripHeaderTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonToolstripHeaderTemplateConstructor))
    class RibbonToolstripHeaderTemplate : ::presentation::templates::GuiControlTemplate, RibbonToolstripHeaderTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonToolstripHeaderTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonToolstripHeaderTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(73/142)================================
module <constructor>darkskin::RibbonToolstripMenuTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonToolstripMenuTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var content : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>0 : ::darkskin::RibbonToolstripMenuTemplate* = null of (::darkskin::RibbonToolstripMenuTemplate*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-RibbonToolstripMenuTemplate>Initialize(<this> : ::darkskin::RibbonToolstripMenuTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.SizeBoxOption = AlwaysTrue of (::presentation::BoolOption));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>1.Color = (cast (::presentation::Color) "#1B1B1C"));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>3.Color = (cast (::presentation::Color) "#333337"));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (<precompile>4 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>4.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>4.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>4.SetRowsAndColumns(4, 2);
                <precompile>4.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>4.SetRowOption(1, {composeType : Absolute; absolute : 3;} of (::presentation::compositions::GuiCellOption));
                <precompile>4.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>4.SetRowOption(3, {composeType : Absolute; absolute : 4;} of (::presentation::compositions::GuiCellOption));
                <precompile>4.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>4.SetColumnOption(1, {composeType : Absolute; absolute : 4;} of (::presentation::compositions::GuiCellOption));
            }
            (content = new (::presentation::compositions::GuiCellComposition*)());
            <this>.SetNamedObject("content", content);
            {
                content.SetSite(0, 0, 1, 2);
            }
            {
                <precompile>4.AddChild(content);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(1, 0, 1, 2);
            }
            (<precompile>6 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>6.AlignmentToParent = {left : 3; top : 1; right : 3; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>6.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>7 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>7.Color = (cast (::presentation::Color) "#333337"));
            }
            {
                (<precompile>6.OwnedElement = <precompile>7);
            }
            {
                <precompile>5.AddChild(<precompile>6);
            }
            {
                <precompile>4.AddChild(<precompile>5);
            }
            (<precompile>8 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>8.SetSite(2, 0, 1, 2);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 3; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>8.AddChild(container);
            }
            {
                <precompile>4.AddChild(<precompile>8);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>9.AssociatedHitTestResult = BorderBottom of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>9.SetSite(3, 0, 1, 1);
            }
            (<precompile>10 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>10.Color = (cast (::presentation::Color) "#007ACC"));
            }
            {
                (<precompile>9.OwnedElement = <precompile>10);
            }
            {
                <precompile>4.AddChild(<precompile>9);
            }
            (<precompile>11 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>11.AssociatedHitTestResult = BorderRightBottom of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>11.SetSite(3, 1, 1, 1);
            }
            (<precompile>12 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>12.Color = (cast (::presentation::Color) "#007ACC"));
            }
            {
                (<precompile>11.OwnedElement = <precompile>12);
            }
            {
                <precompile>4.AddChild(<precompile>11);
            }
            {
                <precompile>2.AddChild(<precompile>4);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            {
                (<precompile>0.ContainerComposition = container);
            }
            {
                (<precompile>0.ContentComposition = content);
            }
        }

        new ()
        {
        }
    }
}

================================(74/142)================================
module <instance>darkskin::RibbonToolstripMenuTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonToolstripMenuTemplateConstructor))
    class RibbonToolstripMenuTemplate : ::presentation::templates::GuiRibbonToolstripMenuTemplate, RibbonToolstripMenuTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonToolstripMenuTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonToolstripMenuTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(75/142)================================
module <constructor>darkskin::RibbonToolstripsTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RibbonToolstripsTemplateConstructor
    {
        @cpp:Protected
        var <precompile>0 : ::darkskin::RibbonToolstripsTemplate* = null of (::darkskin::RibbonToolstripsTemplate*);

        @cpp:Protected
        func <darkskin-RibbonToolstripsTemplate>Initialize(<this> : ::darkskin::RibbonToolstripsTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
        }

        new ()
        {
        }
    }
}

================================(76/142)================================
module <instance>darkskin::RibbonToolstripsTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RibbonToolstripsTemplateConstructor))
    class RibbonToolstripsTemplate : ::presentation::templates::GuiRibbonToolstripsTemplate, RibbonToolstripsTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RibbonToolstripsTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RibbonToolstripsTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(77/142)================================
module <constructor>darkskin::BottomScrollButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class BottomScrollButtonTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::BottomScrollButtonTemplate* = null of (::darkskin::BottomScrollButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-BottomScrollButtonTemplate>Initialize(<this> : ::darkskin::BottomScrollButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Absolute; absolute : 9;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(1, 1, 1, 1);
            }
            (<precompile>2 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>2.Points = {{x : 0; y : 0;} of (::presentation::Point); {x : 4; y : 4;} of (::presentation::Point); {x : 8; y : 0;} of (::presentation::Point);});
            }
            {
                (<precompile>2.Size = {x : 9; y : 5;} of (::presentation::Size));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::BottomScrollButtonTemplate* = null of (::darkskin::BottomScrollButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::BottomScrollButtonTemplate* = null of (::darkskin::BottomScrollButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : (state == ButtonState::Active) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::BottomScrollButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::BottomScrollButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::BottomScrollButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::BottomScrollButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::BottomScrollButtonTemplate* = null of (::darkskin::BottomScrollButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::BottomScrollButtonTemplate* = null of (::darkskin::BottomScrollButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : (state == ButtonState::Active) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::BottomScrollButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::BottomScrollButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::BottomScrollButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::BottomScrollButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(78/142)================================
module <instance>darkskin::BottomScrollButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(BottomScrollButtonTemplateConstructor))
    class BottomScrollButtonTemplate : ::presentation::templates::GuiButtonTemplate, BottomScrollButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::BottomScrollButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-BottomScrollButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(79/142)================================
module <constructor>darkskin::HScrollHandleTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class HScrollHandleTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::HScrollHandleTemplate* = null of (::darkskin::HScrollHandleTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-HScrollHandleTemplate>Initialize(<this> : ::darkskin::HScrollHandleTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 4; right : 0; bottom : 4;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::HScrollHandleTemplate* = null of (::darkskin::HScrollHandleTemplate*);

                    var <bind-cache>1 : ::darkskin::HScrollHandleTemplate* = null of (::darkskin::HScrollHandleTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : (state == ButtonState::Active) ? "#9E9E9E" : (state == ButtonState::Pressed) ? "#EFEBEF" : "#686868")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::HScrollHandleTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::HScrollHandleTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::HScrollHandleTemplate*));
                            (<bind-cache>1 = null of (::darkskin::HScrollHandleTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(80/142)================================
module <instance>darkskin::HScrollHandleTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(HScrollHandleTemplateConstructor))
    class HScrollHandleTemplate : ::presentation::templates::GuiButtonTemplate, HScrollHandleTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::HScrollHandleTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-HScrollHandleTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(81/142)================================
module <constructor>darkskin::HScrollTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class HScrollTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::HScrollTemplate* = null of (::darkskin::HScrollTemplate*);

        @cpp:Protected
        var behavior : ::presentation::templates::GuiCommonScrollBehavior* = null of (::presentation::templates::GuiCommonScrollBehavior*);

        @cpp:Protected
        var buttonDecrease : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var buttonIncrease : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var handleContainer : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var handle : ::presentation::compositions::GuiPartialViewComposition* = null of (::presentation::compositions::GuiPartialViewComposition*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiSideAlignedComposition* = null of (::presentation::compositions::GuiSideAlignedComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiSideAlignedComposition* = null of (::presentation::compositions::GuiSideAlignedComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <darkskin-HScrollTemplate>Initialize(<this> : ::darkskin::HScrollTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (behavior = new (::presentation::templates::GuiCommonScrollBehavior*)());
            <this>.SetNamedObject("behavior", behavior);
            {
                self.AddComponent(behavior);
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#3D3D42"));
            }
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                self.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiSideAlignedComposition*)());
            {
                (<precompile>3.MaxRatio = 0.5 of (::system::Double));
            }
            {
                (<precompile>3.MaxLength = 20 of (::system::Int64));
            }
            {
                (<precompile>3.Direction = Left of (::presentation::compositions::GuiSideAlignedComposition::Direction));
            }
            {
                (buttonDecrease = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
                <this>.SetNamedObject("buttonDecrease", buttonDecrease);
            }
            (<precompile>4 = buttonDecrease.BoundsComposition);
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (buttonDecrease.AutoFocus = false);
            }
            {
                (buttonDecrease.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::LeftScrollButtonTemplate*)();
                    }
                });
            }
            {
                <precompile>3.AddChild(buttonDecrease.BoundsComposition);
            }
            {
                self.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiSideAlignedComposition*)());
            {
                (<precompile>5.MaxRatio = 0.5 of (::system::Double));
            }
            {
                (<precompile>5.MaxLength = 20 of (::system::Int64));
            }
            {
                (<precompile>5.Direction = Right of (::presentation::compositions::GuiSideAlignedComposition::Direction));
            }
            {
                (buttonIncrease = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
                <this>.SetNamedObject("buttonIncrease", buttonIncrease);
            }
            (<precompile>6 = buttonIncrease.BoundsComposition);
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (buttonIncrease.AutoFocus = false);
            }
            {
                (buttonIncrease.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::RightScrollButtonTemplate*)();
                    }
                });
            }
            {
                <precompile>5.AddChild(buttonIncrease.BoundsComposition);
            }
            {
                self.AddChild(<precompile>5);
            }
            (handleContainer = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("handleContainer", handleContainer);
            {
                (handleContainer.AlignmentToParent = {left : 20; top : 0; right : 20; bottom : 0;} of (::presentation::Margin));
            }
            {
                (handleContainer.MinSizeLimitation = NoLimit of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (handle = new (::presentation::compositions::GuiPartialViewComposition*)());
            <this>.SetNamedObject("handle", handle);
            {
                (handle.PreferredMinSize = {x : 10;} of (::presentation::Size));
            }
            {
                (<precompile>7 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>8 = <precompile>7.BoundsComposition);
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>7.AutoFocus = false);
            }
            {
                (<precompile>7.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::HScrollHandleTemplate*)();
                    }
                });
            }
            {
                handle.AddChild(<precompile>7.BoundsComposition);
            }
            {
                handleContainer.AddChild(handle);
            }
            {
                self.AddChild(handleContainer);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::HScrollTemplate* = null of (::darkskin::HScrollTemplate*);

                    var <bind-cache>1 : ::darkskin::HScrollTemplate* = null of (::darkskin::HScrollTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::HScrollTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::HScrollTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::HScrollTemplate*));
                            (<bind-cache>1 = null of (::darkskin::HScrollTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::HScrollTemplate* = null of (::darkskin::HScrollTemplate*);

                    var <bind-cache>1 : ::darkskin::HScrollTemplate* = null of (::darkskin::HScrollTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((cast (double) <bind-cache>0.PageSize) / <bind-cache>1.TotalSize) of (::system::Double);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::HScrollTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::HScrollTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.PageSizeChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.TotalSizeChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.PageSizeChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.TotalSizeChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::HScrollTemplate*));
                            (<bind-cache>1 = null of (::darkskin::HScrollTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = handle.WidthPageSize;
                    var <new> = (cast (::system::Double) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (handle.WidthPageSize = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::HScrollTemplate* = null of (::darkskin::HScrollTemplate*);

                    var <bind-cache>1 : ::darkskin::HScrollTemplate* = null of (::darkskin::HScrollTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((cast (double) <bind-cache>0.Position) / <bind-cache>1.TotalSize) of (::system::Double);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::HScrollTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::HScrollTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.PositionChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.TotalSizeChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.PositionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.TotalSizeChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::HScrollTemplate*));
                            (<bind-cache>1 = null of (::darkskin::HScrollTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = handle.WidthRatio;
                    var <new> = (cast (::system::Double) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (handle.WidthRatio = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(82/142)================================
module <instance>darkskin::HScrollTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(HScrollTemplateConstructor))
    class HScrollTemplate : ::presentation::templates::GuiScrollTemplate, HScrollTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::HScrollTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-HScrollTemplate>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            behavior.AttachScrollTemplate(self);
            behavior.AttachDecreaseButton(buttonDecrease);
            behavior.AttachIncreaseButton(buttonIncrease);
            behavior.AttachHorizontalScrollHandle(handle);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(83/142)================================
module <constructor>darkskin::HTrackerTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class HTrackerTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::HTrackerTemplate* = null of (::darkskin::HTrackerTemplate*);

        @cpp:Protected
        var behavior : ::presentation::templates::GuiCommonScrollBehavior* = null of (::presentation::templates::GuiCommonScrollBehavior*);

        @cpp:Protected
        var handle : ::presentation::compositions::GuiPartialViewComposition* = null of (::presentation::compositions::GuiPartialViewComposition*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <darkskin-HTrackerTemplate>Initialize(<this> : ::darkskin::HTrackerTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (behavior = new (::presentation::templates::GuiCommonScrollBehavior*)());
            <this>.SetNamedObject("behavior", behavior);
            {
                self.AddComponent(behavior);
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#3F3F47"));
            }
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            (<precompile>3 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>3.AlignmentToParent = {left : 6; top : 0; right : 6; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>3.SetRowsAndColumns(3, 1);
                <precompile>3.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetRowOption(1, {composeType : Absolute; absolute : 4;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(1, 0, 1, 1);
            }
            (<precompile>5 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>5.Color = (cast (::presentation::Color) "#55545A"));
            }
            {
                (<precompile>4.OwnedElement = <precompile>5);
            }
            {
                <precompile>3.AddChild(<precompile>4);
            }
            {
                <precompile>1.AddChild(<precompile>3);
            }
            (handle = new (::presentation::compositions::GuiPartialViewComposition*)());
            <this>.SetNamedObject("handle", handle);
            {
                (handle.WidthPageSize = 0 of (::system::Double));
            }
            {
                (handle.PreferredMinSize = {x : 12; y : 0;} of (::presentation::Size));
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>6.Font = {size : 1;} of (::presentation::FontProperties));
            }
            (<precompile>7 = <precompile>6.BoundsComposition);
            {
                (<precompile>7.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>6.AutoFocus = false);
            }
            {
                (<precompile>6.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ButtonTemplate*)();
                    }
                });
            }
            {
                handle.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>1.AddChild(handle);
            }
            {
                self.AddChild(<precompile>1);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::HTrackerTemplate* = null of (::darkskin::HTrackerTemplate*);

                    var <bind-cache>1 : ::darkskin::HTrackerTemplate* = null of (::darkskin::HTrackerTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::HTrackerTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::HTrackerTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::HTrackerTemplate*));
                            (<bind-cache>1 = null of (::darkskin::HTrackerTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::HTrackerTemplate* = null of (::darkskin::HTrackerTemplate*);

                    var <bind-cache>1 : ::darkskin::HTrackerTemplate* = null of (::darkskin::HTrackerTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((cast (double) <bind-cache>0.Position) / <bind-cache>1.TotalSize) of (::system::Double);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::HTrackerTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::HTrackerTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.PositionChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.TotalSizeChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.PositionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.TotalSizeChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::HTrackerTemplate*));
                            (<bind-cache>1 = null of (::darkskin::HTrackerTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = handle.WidthRatio;
                    var <new> = (cast (::system::Double) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (handle.WidthRatio = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(84/142)================================
module <instance>darkskin::HTrackerTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(HTrackerTemplateConstructor))
    class HTrackerTemplate : ::presentation::templates::GuiScrollTemplate, HTrackerTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::HTrackerTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-HTrackerTemplate>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            behavior.AttachScrollTemplate(self);
            behavior.AttachHorizontalTrackerHandle(handle);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(85/142)================================
module <constructor>darkskin::LeftScrollButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class LeftScrollButtonTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::LeftScrollButtonTemplate* = null of (::darkskin::LeftScrollButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-LeftScrollButtonTemplate>Initialize(<this> : ::darkskin::LeftScrollButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 9;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Absolute; absolute : 5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(1, 1, 1, 1);
            }
            (<precompile>2 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>2.Points = {{x : 4; y : 0;} of (::presentation::Point); {x : 0; y : 4;} of (::presentation::Point); {x : 4; y : 8;} of (::presentation::Point);});
            }
            {
                (<precompile>2.Size = {x : 5; y : 9;} of (::presentation::Size));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::LeftScrollButtonTemplate* = null of (::darkskin::LeftScrollButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::LeftScrollButtonTemplate* = null of (::darkskin::LeftScrollButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : (state == ButtonState::Active) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::LeftScrollButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::LeftScrollButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::LeftScrollButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::LeftScrollButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::LeftScrollButtonTemplate* = null of (::darkskin::LeftScrollButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::LeftScrollButtonTemplate* = null of (::darkskin::LeftScrollButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : (state == ButtonState::Active) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::LeftScrollButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::LeftScrollButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::LeftScrollButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::LeftScrollButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(86/142)================================
module <instance>darkskin::LeftScrollButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(LeftScrollButtonTemplateConstructor))
    class LeftScrollButtonTemplate : ::presentation::templates::GuiButtonTemplate, LeftScrollButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::LeftScrollButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-LeftScrollButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(87/142)================================
module <constructor>darkskin::ProgressBarTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ProgressBarTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::ProgressBarTemplate* = null of (::darkskin::ProgressBarTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiPartialViewComposition* = null of (::presentation::compositions::GuiPartialViewComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-ProgressBarTemplate>Initialize(<this> : ::darkskin::ProgressBarTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#3F3F47"));
            }
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#55545A"));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::compositions::GuiPartialViewComposition*)());
            (<precompile>4 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>4.Color = (cast (::presentation::Color) "#07B023"));
            }
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                container.AddChild(<precompile>3);
            }
            {
                <precompile>1.AddChild(container);
            }
            {
                self.AddChild(<precompile>1);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ProgressBarTemplate* = null of (::darkskin::ProgressBarTemplate*);

                    var <bind-cache>1 : ::darkskin::ProgressBarTemplate* = null of (::darkskin::ProgressBarTemplate*);

                    var <bind-cache>2 : ::darkskin::ProgressBarTemplate* = null of (::darkskin::ProgressBarTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = let a = <bind-cache>0.Position, b = (<bind-cache>1.TotalSize - <bind-cache>2.PageSize) in (((cast (double) a) / (a > b) ? a : b)) of (::system::Double);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ProgressBarTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ProgressBarTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ProgressBarTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.PositionChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.TotalSizeChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.PageSizeChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.PositionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.TotalSizeChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.PageSizeChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ProgressBarTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ProgressBarTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ProgressBarTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.WidthPageSize;
                    var <new> = (cast (::system::Double) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.WidthPageSize = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(88/142)================================
module <instance>darkskin::ProgressBarTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ProgressBarTemplateConstructor))
    class ProgressBarTemplate : ::presentation::templates::GuiScrollTemplate, ProgressBarTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ProgressBarTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ProgressBarTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(89/142)================================
module <constructor>darkskin::RightScrollButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class RightScrollButtonTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::RightScrollButtonTemplate* = null of (::darkskin::RightScrollButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-RightScrollButtonTemplate>Initialize(<this> : ::darkskin::RightScrollButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 9;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Absolute; absolute : 5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(1, 1, 1, 1);
            }
            (<precompile>2 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>2.Points = {{x : 0; y : 0;} of (::presentation::Point); {x : 4; y : 4;} of (::presentation::Point); {x : 0; y : 8;} of (::presentation::Point);});
            }
            {
                (<precompile>2.Size = {x : 5; y : 9;} of (::presentation::Size));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RightScrollButtonTemplate* = null of (::darkskin::RightScrollButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RightScrollButtonTemplate* = null of (::darkskin::RightScrollButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : (state == ButtonState::Active) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RightScrollButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RightScrollButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RightScrollButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RightScrollButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::RightScrollButtonTemplate* = null of (::darkskin::RightScrollButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::RightScrollButtonTemplate* = null of (::darkskin::RightScrollButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : (state == ButtonState::Active) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::RightScrollButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::RightScrollButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::RightScrollButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::RightScrollButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(90/142)================================
module <instance>darkskin::RightScrollButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(RightScrollButtonTemplateConstructor))
    class RightScrollButtonTemplate : ::presentation::templates::GuiButtonTemplate, RightScrollButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::RightScrollButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-RightScrollButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(91/142)================================
module <constructor>darkskin::ScrollViewTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ScrollViewTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::ScrollViewTemplate* = null of (::darkskin::ScrollViewTemplate*);

        @cpp:Protected
        var look : ::presentation::templates::GuiCommonScrollViewLook* = null of (::presentation::templates::GuiCommonScrollViewLook*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        func <darkskin-ScrollViewTemplate>Initialize(<this> : ::darkskin::ScrollViewTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#252526"));
            }
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#3F3F46"));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            (look = new (::presentation::templates::GuiCommonScrollViewLook*)(20 of (::system::Int64)));
            <this>.SetNamedObject("look", look);
            {
                (look.VScrollTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::VScrollTemplate*)();
                    }
                });
            }
            {
                (look.HScrollTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::HScrollTemplate*)();
                    }
                });
            }
            {
                (look.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                <precompile>1.AddChild(look);
            }
            {
                self.AddChild(<precompile>1);
            }
            {
                (self.ContainerComposition = look.ContainerComposition);
            }
            {
                (self.HorizontalScroll = look.HScroll);
            }
            {
                (self.VerticalScroll = look.VScroll);
            }
        }

        new ()
        {
        }
    }
}

================================(92/142)================================
module <instance>darkskin::ScrollViewTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ScrollViewTemplateConstructor))
    class ScrollViewTemplate : ::presentation::templates::GuiScrollViewTemplate, ScrollViewTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ScrollViewTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ScrollViewTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(93/142)================================
module <constructor>darkskin::TopScrollButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class TopScrollButtonTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::TopScrollButtonTemplate* = null of (::darkskin::TopScrollButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-TopScrollButtonTemplate>Initialize(<this> : ::darkskin::TopScrollButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Absolute; absolute : 9;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(1, 1, 1, 1);
            }
            (<precompile>2 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>2.Points = {{x : 0; y : 4;} of (::presentation::Point); {x : 4; y : 0;} of (::presentation::Point); {x : 8; y : 4;} of (::presentation::Point);});
            }
            {
                (<precompile>2.Size = {x : 9; y : 5;} of (::presentation::Size));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TopScrollButtonTemplate* = null of (::darkskin::TopScrollButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::TopScrollButtonTemplate* = null of (::darkskin::TopScrollButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : (state == ButtonState::Active) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TopScrollButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::TopScrollButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TopScrollButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::TopScrollButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TopScrollButtonTemplate* = null of (::darkskin::TopScrollButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::TopScrollButtonTemplate* = null of (::darkskin::TopScrollButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : (state == ButtonState::Active) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TopScrollButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::TopScrollButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TopScrollButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::TopScrollButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(94/142)================================
module <instance>darkskin::TopScrollButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(TopScrollButtonTemplateConstructor))
    class TopScrollButtonTemplate : ::presentation::templates::GuiButtonTemplate, TopScrollButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::TopScrollButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-TopScrollButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(95/142)================================
module <constructor>darkskin::VScrollHandleTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class VScrollHandleTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::VScrollHandleTemplate* = null of (::darkskin::VScrollHandleTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-VScrollHandleTemplate>Initialize(<this> : ::darkskin::VScrollHandleTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 4; top : 0; right : 4; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::VScrollHandleTemplate* = null of (::darkskin::VScrollHandleTemplate*);

                    var <bind-cache>1 : ::darkskin::VScrollHandleTemplate* = null of (::darkskin::VScrollHandleTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : (state == ButtonState::Active) ? "#9E9E9E" : (state == ButtonState::Pressed) ? "#EFEBEF" : "#686868")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::VScrollHandleTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::VScrollHandleTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::VScrollHandleTemplate*));
                            (<bind-cache>1 = null of (::darkskin::VScrollHandleTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(96/142)================================
module <instance>darkskin::VScrollHandleTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(VScrollHandleTemplateConstructor))
    class VScrollHandleTemplate : ::presentation::templates::GuiButtonTemplate, VScrollHandleTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::VScrollHandleTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-VScrollHandleTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(97/142)================================
module <constructor>darkskin::VScrollTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class VScrollTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::VScrollTemplate* = null of (::darkskin::VScrollTemplate*);

        @cpp:Protected
        var behavior : ::presentation::templates::GuiCommonScrollBehavior* = null of (::presentation::templates::GuiCommonScrollBehavior*);

        @cpp:Protected
        var buttonDecrease : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var buttonIncrease : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var handleContainer : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var handle : ::presentation::compositions::GuiPartialViewComposition* = null of (::presentation::compositions::GuiPartialViewComposition*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiSideAlignedComposition* = null of (::presentation::compositions::GuiSideAlignedComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiSideAlignedComposition* = null of (::presentation::compositions::GuiSideAlignedComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <darkskin-VScrollTemplate>Initialize(<this> : ::darkskin::VScrollTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (behavior = new (::presentation::templates::GuiCommonScrollBehavior*)());
            <this>.SetNamedObject("behavior", behavior);
            {
                self.AddComponent(behavior);
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#3D3D42"));
            }
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                self.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiSideAlignedComposition*)());
            {
                (<precompile>3.MaxRatio = 0.5 of (::system::Double));
            }
            {
                (<precompile>3.MaxLength = 20 of (::system::Int64));
            }
            {
                (<precompile>3.Direction = Top of (::presentation::compositions::GuiSideAlignedComposition::Direction));
            }
            {
                (buttonDecrease = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
                <this>.SetNamedObject("buttonDecrease", buttonDecrease);
            }
            (<precompile>4 = buttonDecrease.BoundsComposition);
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (buttonDecrease.AutoFocus = false);
            }
            {
                (buttonDecrease.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::TopScrollButtonTemplate*)();
                    }
                });
            }
            {
                <precompile>3.AddChild(buttonDecrease.BoundsComposition);
            }
            {
                self.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiSideAlignedComposition*)());
            {
                (<precompile>5.MaxRatio = 0.5 of (::system::Double));
            }
            {
                (<precompile>5.MaxLength = 20 of (::system::Int64));
            }
            {
                (<precompile>5.Direction = Bottom of (::presentation::compositions::GuiSideAlignedComposition::Direction));
            }
            {
                (buttonIncrease = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
                <this>.SetNamedObject("buttonIncrease", buttonIncrease);
            }
            (<precompile>6 = buttonIncrease.BoundsComposition);
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (buttonIncrease.AutoFocus = false);
            }
            {
                (buttonIncrease.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::BottomScrollButtonTemplate*)();
                    }
                });
            }
            {
                <precompile>5.AddChild(buttonIncrease.BoundsComposition);
            }
            {
                self.AddChild(<precompile>5);
            }
            (handleContainer = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("handleContainer", handleContainer);
            {
                (handleContainer.AlignmentToParent = {left : 0; top : 20; right : 0; bottom : 20;} of (::presentation::Margin));
            }
            {
                (handleContainer.MinSizeLimitation = NoLimit of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (handle = new (::presentation::compositions::GuiPartialViewComposition*)());
            <this>.SetNamedObject("handle", handle);
            {
                (handle.PreferredMinSize = {y : 10;} of (::presentation::Size));
            }
            {
                (<precompile>7 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>8 = <precompile>7.BoundsComposition);
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>7.AutoFocus = false);
            }
            {
                (<precompile>7.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::VScrollHandleTemplate*)();
                    }
                });
            }
            {
                handle.AddChild(<precompile>7.BoundsComposition);
            }
            {
                handleContainer.AddChild(handle);
            }
            {
                self.AddChild(handleContainer);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::VScrollTemplate* = null of (::darkskin::VScrollTemplate*);

                    var <bind-cache>1 : ::darkskin::VScrollTemplate* = null of (::darkskin::VScrollTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::VScrollTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::VScrollTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::VScrollTemplate*));
                            (<bind-cache>1 = null of (::darkskin::VScrollTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::VScrollTemplate* = null of (::darkskin::VScrollTemplate*);

                    var <bind-cache>1 : ::darkskin::VScrollTemplate* = null of (::darkskin::VScrollTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((cast (double) <bind-cache>0.PageSize) / <bind-cache>1.TotalSize) of (::system::Double);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::VScrollTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::VScrollTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.PageSizeChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.TotalSizeChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.PageSizeChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.TotalSizeChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::VScrollTemplate*));
                            (<bind-cache>1 = null of (::darkskin::VScrollTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = handle.HeightPageSize;
                    var <new> = (cast (::system::Double) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (handle.HeightPageSize = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::VScrollTemplate* = null of (::darkskin::VScrollTemplate*);

                    var <bind-cache>1 : ::darkskin::VScrollTemplate* = null of (::darkskin::VScrollTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((cast (double) <bind-cache>0.Position) / <bind-cache>1.TotalSize) of (::system::Double);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::VScrollTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::VScrollTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.PositionChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.TotalSizeChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.PositionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.TotalSizeChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::VScrollTemplate*));
                            (<bind-cache>1 = null of (::darkskin::VScrollTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = handle.HeightRatio;
                    var <new> = (cast (::system::Double) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (handle.HeightRatio = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(98/142)================================
module <instance>darkskin::VScrollTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(VScrollTemplateConstructor))
    class VScrollTemplate : ::presentation::templates::GuiScrollTemplate, VScrollTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::VScrollTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-VScrollTemplate>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            behavior.AttachScrollTemplate(self);
            behavior.AttachDecreaseButton(buttonDecrease);
            behavior.AttachIncreaseButton(buttonIncrease);
            behavior.AttachVerticalScrollHandle(handle);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(99/142)================================
module <constructor>darkskin::VTrackerTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class VTrackerTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::VTrackerTemplate* = null of (::darkskin::VTrackerTemplate*);

        @cpp:Protected
        var behavior : ::presentation::templates::GuiCommonScrollBehavior* = null of (::presentation::templates::GuiCommonScrollBehavior*);

        @cpp:Protected
        var handle : ::presentation::compositions::GuiPartialViewComposition* = null of (::presentation::compositions::GuiPartialViewComposition*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <darkskin-VTrackerTemplate>Initialize(<this> : ::darkskin::VTrackerTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (behavior = new (::presentation::templates::GuiCommonScrollBehavior*)());
            <this>.SetNamedObject("behavior", behavior);
            {
                self.AddComponent(behavior);
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#3F3F47"));
            }
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            (<precompile>3 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 6; right : 0; bottom : 6;} of (::presentation::Margin));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>3.SetRowsAndColumns(1, 3);
                <precompile>3.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetColumnOption(1, {composeType : Absolute; absolute : 4;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(0, 1, 1, 1);
            }
            (<precompile>5 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>5.Color = (cast (::presentation::Color) "#55545A"));
            }
            {
                (<precompile>4.OwnedElement = <precompile>5);
            }
            {
                <precompile>3.AddChild(<precompile>4);
            }
            {
                <precompile>1.AddChild(<precompile>3);
            }
            (handle = new (::presentation::compositions::GuiPartialViewComposition*)());
            <this>.SetNamedObject("handle", handle);
            {
                (handle.HeightPageSize = 0 of (::system::Double));
            }
            {
                (handle.PreferredMinSize = {x : 0; y : 12;} of (::presentation::Size));
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>6.Font = {size : 1;} of (::presentation::FontProperties));
            }
            (<precompile>7 = <precompile>6.BoundsComposition);
            {
                (<precompile>7.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>6.AutoFocus = false);
            }
            {
                (<precompile>6.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ButtonTemplate*)();
                    }
                });
            }
            {
                handle.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>1.AddChild(handle);
            }
            {
                self.AddChild(<precompile>1);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::VTrackerTemplate* = null of (::darkskin::VTrackerTemplate*);

                    var <bind-cache>1 : ::darkskin::VTrackerTemplate* = null of (::darkskin::VTrackerTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::VTrackerTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::VTrackerTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::VTrackerTemplate*));
                            (<bind-cache>1 = null of (::darkskin::VTrackerTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::VTrackerTemplate* = null of (::darkskin::VTrackerTemplate*);

                    var <bind-cache>1 : ::darkskin::VTrackerTemplate* = null of (::darkskin::VTrackerTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((cast (double) <bind-cache>0.Position) / <bind-cache>1.TotalSize) of (::system::Double);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::VTrackerTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::VTrackerTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.PositionChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.TotalSizeChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.PositionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.TotalSizeChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::VTrackerTemplate*));
                            (<bind-cache>1 = null of (::darkskin::VTrackerTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = handle.HeightRatio;
                    var <new> = (cast (::system::Double) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (handle.HeightRatio = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(100/142)================================
module <instance>darkskin::VTrackerTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(VTrackerTemplateConstructor))
    class VTrackerTemplate : ::presentation::templates::GuiScrollTemplate, VTrackerTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::VTrackerTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-VTrackerTemplate>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            behavior.AttachScrollTemplate(self);
            behavior.AttachVerticalTrackerHandle(handle);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(101/142)================================
module <constructor>darkskin::TabHeaderButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class TabHeaderButtonTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiFocusRectangleElement^ = null of (::presentation::elements::GuiFocusRectangleElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <darkskin-TabHeaderButtonTemplate>Initialize(<this> : ::darkskin::TabHeaderButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiFocusRectangleElement^)());
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                self.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>3.AlignmentToParent = {left : 6; top : 3; right : 6; bottom : 3;} of (::presentation::Margin));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>4 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>4.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>4.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                self.AddChild(<precompile>3);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

                    var <bind-cache>3 : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>3_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in (<bind-cache>1.Highlighted ? <bind-cache>2.Selected ? "#CC7ACC" : (state == ButtonState::Active) ? "#EA97EA" : (state == ButtonState::Pressed) ? "#EA97EA" : "#604360" : <bind-cache>3.Selected ? "#007ACC" : (state == ButtonState::Active) ? "#1C97EA" : (state == ButtonState::Pressed) ? "#1C97EA" : "#434346")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>3_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TabHeaderButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::TabHeaderButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::TabHeaderButtonTemplate*)));
                            (<bind-cache>3 = (self ?? null of (::darkskin::TabHeaderButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.HighlightedChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            (<bind-handler>3_0 = (attach(<bind-cache>3.SelectedChanged, <bind-callback>3_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.HighlightedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            if (<bind-handler>3_0 is not null)
                            {
                                detach(<bind-cache>3.SelectedChanged, <bind-handler>3_0);
                                (<bind-handler>3_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TabHeaderButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::TabHeaderButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::TabHeaderButtonTemplate*));
                            (<bind-cache>3 = null of (::darkskin::TabHeaderButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>3_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Selected and <bind-cache>1.TabFocused) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TabHeaderButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::TabHeaderButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.TabFocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.TabFocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TabHeaderButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::TabHeaderButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TabHeaderButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TabHeaderButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#6D6D6D" : (state == ButtonState::Active) ? "#F1F1F1" : (state == ButtonState::Pressed) ? "#FFFFFF" : "#F1F1F1")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TabHeaderButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::TabHeaderButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TabHeaderButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::TabHeaderButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TabHeaderButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TabHeaderButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

                    var <bind-cache>1 : ::presentation::controls::GuiRibbonTabPage* = null of (::presentation::controls::GuiRibbonTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>1.Highlighted ?? false) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        if (<bind-handler>1_0 is not null)
                        {
                            detach(<bind-cache>1.HighlightedChanged, <bind-handler>1_0);
                            (<bind-handler>1_0 = null);
                        }
                        (<bind-cache>1 = ((cast (RibbonTabPage*) <bind-cache>0.Context) ?? null of (::presentation::controls::GuiRibbonTabPage*)));
                        (<bind-handler>1_0 = (attach(<bind-cache>1.HighlightedChanged, <bind-callback>1_0) ?? null));
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TabHeaderButtonTemplate*)));
                            (<bind-cache>1 = ((cast (RibbonTabPage*) <bind-cache>0.Context) ?? null of (::presentation::controls::GuiRibbonTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ContextChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.HighlightedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ContextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.HighlightedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TabHeaderButtonTemplate*));
                            (<bind-cache>1 = null of (::presentation::controls::GuiRibbonTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Highlighted;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Highlighted = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TabHeaderButtonTemplate* = null of (::darkskin::TabHeaderButtonTemplate*);

                    var <bind-cache>1 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>1.Focused ?? false) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        if (<bind-handler>1_0 is not null)
                        {
                            detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                            (<bind-handler>1_0 = null);
                        }
                        (<bind-cache>1 = ((cast (TabPage*) <bind-cache>0.Context).OwnerTab ?? null of (::presentation::controls::GuiTab*)));
                        (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TabHeaderButtonTemplate*)));
                            (<bind-cache>1 = ((cast (TabPage*) <bind-cache>0.Context).OwnerTab ?? null of (::presentation::controls::GuiTab*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ContextChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ContextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TabHeaderButtonTemplate*));
                            (<bind-cache>1 = null of (::presentation::controls::GuiTab*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.TabFocused;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.TabFocused = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(102/142)================================
module <instance>darkskin::TabHeaderButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(TabHeaderButtonTemplateConstructor))
    class TabHeaderButtonTemplate : ::presentation::templates::GuiSelectableButtonTemplate, TabHeaderButtonTemplateConstructor
    {
        @cpp:Private
        var <prop>Highlighted : bool = false;

        func GetHighlighted() : (bool)
        {
            return <prop>Highlighted;
        }

        func SetHighlighted(<value> : bool) : (void)
        {
            if ((<prop>Highlighted != <value>))
            {
                (<prop>Highlighted = <value>);
                HighlightedChanged();
            }
        }

        event HighlightedChanged();

        prop Highlighted : bool{GetHighlighted, SetHighlighted : HighlightedChanged}

        @cpp:Private
        var <prop>TabFocused : bool = false;

        func GetTabFocused() : (bool)
        {
            return <prop>TabFocused;
        }

        func SetTabFocused(<value> : bool) : (void)
        {
            if ((<prop>TabFocused != <value>))
            {
                (<prop>TabFocused = <value>);
                TabFocusedChanged();
            }
        }

        event TabFocusedChanged();

        prop TabFocused : bool{GetTabFocused, SetTabFocused : TabFocusedChanged}

        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::TabHeaderButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-TabHeaderButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(103/142)================================
module <constructor>darkskin::TabHeaderTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class TabHeaderTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::TabHeaderTemplate* = null of (::darkskin::TabHeaderTemplate*);

        @cpp:Protected
        var CurrentTabPage : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <darkskin-TabHeaderTemplate>Initialize(<this> : ::darkskin::TabHeaderTemplate*) : (::system::Void)
        {
            (self = <this>);
            (CurrentTabPage = <this>.CurrentTabPage);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (<precompile>0 = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
            }
            {
                (<precompile>0.AutoSelection = false);
            }
            (<precompile>1 = <precompile>0.BoundsComposition);
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.AutoFocus = false);
            }
            {
                (<precompile>0.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::TabHeaderButtonTemplate*)();
                    }
                });
            }
            {
                self.AddChild(<precompile>0.BoundsComposition);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (CurrentTabPage ?? null of (::presentation::controls::GuiTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>0.Context = CurrentTabPage);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Alt of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (CurrentTabPage ?? null of (::presentation::controls::GuiTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.AltChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.AltChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Alt;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Alt = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.SelectedPage == CurrentTabPage) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (CurrentTabPage.OwnerTab ?? null of (::presentation::controls::GuiTab*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedPageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedPageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiTab*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.Commands.ShowTab(CurrentTabPage.OwnerTab.Pages.IndexOf(CurrentTabPage), true);
                };
                attach(<precompile>0.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(104/142)================================
module <instance>darkskin::TabHeaderTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(TabHeaderTemplateConstructor))
    class TabHeaderTemplate : ::presentation::templates::GuiControlTemplate, TabHeaderTemplateConstructor
    {
        @cpp:Private
        var <prop>Commands : ITabCommandExecutor* = null;

        func GetCommands() : (ITabCommandExecutor*)
        {
            return <prop>Commands;
        }

        func SetCommands(<value> : ITabCommandExecutor*) : (void)
        {
            if ((<prop>Commands != <value>))
            {
                (<prop>Commands = <value>);
                CommandsChanged();
            }
        }

        event CommandsChanged();

        prop Commands : ITabCommandExecutor*{GetCommands, SetCommands : CommandsChanged}

        @cpp:Private
        var <parameter>CurrentTabPage : presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

        func GetCurrentTabPage() : (presentation::controls::GuiTabPage*)
        {
            return <parameter>CurrentTabPage;
        }

        prop CurrentTabPage : presentation::controls::GuiTabPage*{GetCurrentTabPage}

        new* (<ctor-parameter>CurrentTabPage : presentation::controls::GuiTabPage*)
        {
            (<parameter>CurrentTabPage = <ctor-parameter>CurrentTabPage);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::TabHeaderTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-TabHeaderTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(105/142)================================
module <constructor>darkskin::TabTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class TabTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::TabTemplate* = null of (::darkskin::TabTemplate*);

        @cpp:Protected
        var beforeHeadersContainer : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var afterHeadersContainer : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var header : ::presentation::compositions::GuiRepeatFlowComposition* = null of (::presentation::compositions::GuiRepeatFlowComposition*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        func <darkskin-TabTemplate>Initialize(<this> : ::darkskin::TabTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.TabOrder = LeftToRight of (::presentation::controls::TabPageOrder));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 3);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 2;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>1.Color = (cast (::presentation::Color) "#2D2D30"));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (beforeHeadersContainer = new (::presentation::compositions::GuiCellComposition*)());
            <this>.SetNamedObject("beforeHeadersContainer", beforeHeadersContainer);
            {
                beforeHeadersContainer.SetSite(0, 0, 1, 1);
            }
            {
                <precompile>0.AddChild(beforeHeadersContainer);
            }
            (afterHeadersContainer = new (::presentation::compositions::GuiCellComposition*)());
            <this>.SetNamedObject("afterHeadersContainer", afterHeadersContainer);
            {
                afterHeadersContainer.SetSite(0, 2, 1, 1);
            }
            {
                <precompile>0.AddChild(afterHeadersContainer);
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(0, 1, 1, 1);
            }
            (header = new (::presentation::compositions::GuiRepeatFlowComposition*)());
            <this>.SetNamedObject("header", header);
            {
                (header.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTemplate*)
                {
                    {
                        if (<viewModel> is (::presentation::controls::GuiTabPage*))
                        {
                            return new (::darkskin::TabHeaderTemplate*)((cast (::presentation::controls::GuiTabPage*) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            {
                (header.ExtraMargin = {left : 2; top : 2; right : 2; bottom : 0;} of (::presentation::Margin));
            }
            {
                (header.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (header.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>2.AddChild(header);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(1, 0, 1, 3);
            }
            (<precompile>4 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(2, 0, 1, 3);
            }
            (<precompile>6 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>6.Color = (cast (::presentation::Color) "#434346"));
            }
            {
                (<precompile>5.OwnedElement = <precompile>6);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>5.AddChild(container);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TabTemplate* = null of (::darkskin::TabTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.TabPages of (::system::Enumerable^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TabTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TabPagesChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TabPagesChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TabTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = header.ItemSource;
                    var <new> = (cast (::system::Enumerable^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (header.ItemSource = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiItemEventArgs*) : (::system::Void)
                {
                    var flowItem = header.FlowItems[arguments.itemIndex];
                    var item = (cast (TabHeaderTemplate*) flowItem.Children[0]);
                    (item.Commands = self.Commands);
                    self.UpdateTabHeader();
                };
                attach(header.ItemInserted, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiItemEventArgs*) : (::system::Void)
                {
                    self.UpdateTabHeader();
                };
                attach(header.ItemRemoved, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TabTemplate* = null of (::darkskin::TabTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) <bind-cache>0.Highlighted ? "#CC7ACC" : "#007ACC") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TabTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.HighlightedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.HighlightedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TabTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::TabTemplate* = null of (::darkskin::TabTemplate*);

                    var <bind-cache>1 : ::presentation::controls::GuiRibbonTabPage* = null of (::presentation::controls::GuiRibbonTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>1.Highlighted ?? false) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        if (<bind-handler>1_0 is not null)
                        {
                            detach(<bind-cache>1.HighlightedChanged, <bind-handler>1_0);
                            (<bind-handler>1_0 = null);
                        }
                        (<bind-cache>1 = ((cast (RibbonTabPage*) <bind-cache>0.SelectedTabPage) ?? null of (::presentation::controls::GuiRibbonTabPage*)));
                        (<bind-handler>1_0 = (attach(<bind-cache>1.HighlightedChanged, <bind-callback>1_0) ?? null));
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::TabTemplate*)));
                            (<bind-cache>1 = ((cast (RibbonTabPage*) <bind-cache>0.SelectedTabPage) ?? null of (::presentation::controls::GuiRibbonTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedTabPageChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.HighlightedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedTabPageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.HighlightedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::TabTemplate*));
                            (<bind-cache>1 = null of (::presentation::controls::GuiRibbonTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Highlighted;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Highlighted = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.BeforeHeadersContainer = beforeHeadersContainer);
            }
            {
                (self.AfterHeadersContainer = afterHeadersContainer);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.UpdateTabHeader();
                };
                attach(self.SelectedTabPageChanged, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(106/142)================================
module <instance>darkskin::TabTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(TabTemplateConstructor))
    class TabTemplate : ::presentation::templates::GuiRibbonTabTemplate, TabTemplateConstructor
    {
        @cpp:Private
        var <prop>Highlighted : bool = false;

        func GetHighlighted() : (bool)
        {
            return <prop>Highlighted;
        }

        func SetHighlighted(<value> : bool) : (void)
        {
            if ((<prop>Highlighted != <value>))
            {
                (<prop>Highlighted = <value>);
                HighlightedChanged();
            }
        }

        event HighlightedChanged();

        prop Highlighted : bool{GetHighlighted, SetHighlighted : HighlightedChanged}

        func UpdateTabHeader() : (void)
        {
            {
                var <for-enumerable>flowItem = header.FlowItems of (::system::Enumerable^);
                var <for-enumerator>flowItem = <for-enumerable>flowItem.CreateEnumerator();
                while (<for-enumerator>flowItem.Next())
                {
                    var flowItem = (cast (::presentation::compositions::GuiFlowItemComposition*) <for-enumerator>flowItem.GetCurrent());
                    {
                        var item = (cast (TabHeaderTemplate*) flowItem.Children[0]);
                        if ((item.CurrentTabPage == self.SelectedTabPage))
                        {
                            (flowItem.ExtraMargin = {left : 2; top : 2; right : 2; bottom : 0;});
                            header.MoveChild(flowItem, (header.Children.Count - 1));
                        }
                        else
                        {
                            (flowItem.ExtraMargin = {left : 0; top : 0; right : 0; bottom : 0;});
                        }
                    }
                }
            }
        }

        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::TabTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-TabTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(107/142)================================
module <constructor>darkskin::MultilineTextBoxTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class MultilineTextBoxTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::MultilineTextBoxTemplate* = null of (::darkskin::MultilineTextBoxTemplate*);

        @cpp:Protected
        var look : ::presentation::templates::GuiCommonScrollViewLook* = null of (::presentation::templates::GuiCommonScrollViewLook*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-MultilineTextBoxTemplate>Initialize(<this> : ::darkskin::MultilineTextBoxTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.CaretColor = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (self.TextColor = {normal : {text : (cast (Color) "#FFFFFF"); background : (cast (Color) "#00000000");}; selectedFocused : {text : (cast (Color) "#FFFFFF"); background : (cast (Color) "#007ACC");}; selectedUnfocused : {text : (cast (Color) "#FFFFFF"); background : (cast (Color) "#007ACC");};} of (::presentation::elements::text::ColorEntry));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (look = new (::presentation::templates::GuiCommonScrollViewLook*)(20 of (::system::Int64)));
            <this>.SetNamedObject("look", look);
            {
                (look.VScrollTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::VScrollTemplate*)();
                    }
                });
            }
            {
                (look.HScrollTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiScrollTemplate*)
                {
                    {
                        return new (::darkskin::HScrollTemplate*)();
                    }
                });
            }
            {
                (look.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                <precompile>0.AddChild(look);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#252526"));
            }
            {
                (self.OwnedElement = <precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MultilineTextBoxTemplate* = null of (::darkskin::MultilineTextBoxTemplate*);

                    var <bind-cache>1 : ::darkskin::MultilineTextBoxTemplate* = null of (::darkskin::MultilineTextBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MultilineTextBoxTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::MultilineTextBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MultilineTextBoxTemplate*));
                            (<bind-cache>1 = null of (::darkskin::MultilineTextBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = look.ContainerComposition);
            }
            {
                (self.HorizontalScroll = look.HScroll);
            }
            {
                (self.VerticalScroll = look.VScroll);
            }
        }

        new ()
        {
        }
    }
}

================================(108/142)================================
module <instance>darkskin::MultilineTextBoxTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(MultilineTextBoxTemplateConstructor))
    class MultilineTextBoxTemplate : ::presentation::templates::GuiMultilineTextBoxTemplate, MultilineTextBoxTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::MultilineTextBoxTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-MultilineTextBoxTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(109/142)================================
module <constructor>darkskin::SinglelineTextBoxTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class SinglelineTextBoxTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::SinglelineTextBoxTemplate* = null of (::darkskin::SinglelineTextBoxTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-SinglelineTextBoxTemplate>Initialize(<this> : ::darkskin::SinglelineTextBoxTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.CaretColor = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (self.TextColor = {normal : {text : (cast (Color) "#FFFFFF"); background : (cast (Color) "#00000000");}; selectedFocused : {text : (cast (Color) "#FFFFFF"); background : (cast (Color) "#007ACC");}; selectedUnfocused : {text : (cast (Color) "#FFFFFF"); background : (cast (Color) "#007ACC");};} of (::presentation::elements::text::ColorEntry));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.AddChild(container);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#252526"));
            }
            {
                (self.OwnedElement = <precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::SinglelineTextBoxTemplate* = null of (::darkskin::SinglelineTextBoxTemplate*);

                    var <bind-cache>1 : ::darkskin::SinglelineTextBoxTemplate* = null of (::darkskin::SinglelineTextBoxTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#434346" : <bind-cache>1.Focused ? "#1C97EA" : "#54545C") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::SinglelineTextBoxTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::SinglelineTextBoxTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.FocusedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.FocusedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::SinglelineTextBoxTemplate*));
                            (<bind-cache>1 = null of (::darkskin::SinglelineTextBoxTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(110/142)================================
module <instance>darkskin::SinglelineTextBoxTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(SinglelineTextBoxTemplateConstructor))
    class SinglelineTextBoxTemplate : ::presentation::templates::GuiSinglelineTextBoxTemplate, SinglelineTextBoxTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::SinglelineTextBoxTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-SinglelineTextBoxTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(111/142)================================
module <constructor>darkskin::MenuBarButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class MenuBarButtonTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::MenuBarButtonTemplate* = null of (::darkskin::MenuBarButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <darkskin-MenuBarButtonTemplate>Initialize(<this> : ::darkskin::MenuBarButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 10; top : 3; right : 10; bottom : 3;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>2.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>2.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                self.AddChild(<precompile>1);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuBarButtonTemplate* = null of (::darkskin::MenuBarButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::MenuBarButtonTemplate* = null of (::darkskin::MenuBarButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::MenuBarButtonTemplate* = null of (::darkskin::MenuBarButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#1B1B1C" : (state == ButtonState::Active) ? "#3D3D40" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuBarButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::MenuBarButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::MenuBarButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuBarButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::MenuBarButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::MenuBarButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuBarButtonTemplate* = null of (::darkskin::MenuBarButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuBarButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuBarButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuBarButtonTemplate* = null of (::darkskin::MenuBarButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuBarButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuBarButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuBarButtonTemplate* = null of (::darkskin::MenuBarButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuBarButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuBarButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(112/142)================================
module <instance>darkskin::MenuBarButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(MenuBarButtonTemplateConstructor))
    class MenuBarButtonTemplate : ::presentation::templates::GuiToolstripButtonTemplate, MenuBarButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::MenuBarButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-MenuBarButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(113/142)================================
module <constructor>darkskin::MenuItemButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class MenuItemButtonTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiSharedSizeItemComposition* = null of (::presentation::compositions::GuiSharedSizeItemComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiSharedSizeItemComposition* = null of (::presentation::compositions::GuiSharedSizeItemComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-MenuItemButtonTemplate>Initialize(<this> : ::darkskin::MenuItemButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>1.SetRowsAndColumns(5, 10);
                <precompile>1.SetRowOption(0, {composeType : Absolute; absolute : 4;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetRowOption(1, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetRowOption(3, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetRowOption(4, {composeType : Absolute; absolute : 4;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(0, {composeType : Absolute; absolute : 2;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(1, {composeType : Absolute; absolute : 24;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(2, {composeType : Absolute; absolute : 8;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(4, {composeType : Absolute; absolute : 24;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(5, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(6, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(7, {composeType : Absolute; absolute : 4;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(8, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(9, {composeType : Absolute; absolute : 8;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(1, 1, 3, 1);
            }
            (<precompile>3 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(1, 3, 3, 1);
            }
            (<precompile>5 = new (::presentation::compositions::GuiSharedSizeItemComposition*)());
            {
                (<precompile>5.SharedWidth = true);
            }
            {
                (<precompile>5.Group = "MenuItem-Text");
            }
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>6 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>6.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>6.HorizontalAlignment = Left of (::presentation::Alignment));
            }
            {
                (<precompile>5.OwnedElement = <precompile>6);
            }
            {
                <precompile>4.AddChild(<precompile>5);
            }
            {
                <precompile>1.AddChild(<precompile>4);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(1, 6, 3, 1);
            }
            (<precompile>8 = new (::presentation::compositions::GuiSharedSizeItemComposition*)());
            {
                (<precompile>8.SharedWidth = true);
            }
            {
                (<precompile>8.Group = "MenuItem-Shortcut");
            }
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>9 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>9.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>9.HorizontalAlignment = Right of (::presentation::Alignment));
            }
            {
                (<precompile>8.OwnedElement = <precompile>9);
            }
            {
                <precompile>7.AddChild(<precompile>8);
            }
            {
                <precompile>1.AddChild(<precompile>7);
            }
            (<precompile>10 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>10.SetSite(2, 8, 1, 1);
            }
            (<precompile>11 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>11.Points = {{x : 0; y : 0;} of (::presentation::Point); {x : 3; y : 3;} of (::presentation::Point); {x : 0; y : 6;} of (::presentation::Point);});
            }
            {
                (<precompile>11.Size = {x : 4; y : 7;} of (::presentation::Size));
            }
            {
                (<precompile>10.OwnedElement = <precompile>11);
            }
            {
                <precompile>1.AddChild(<precompile>10);
            }
            {
                self.AddChild(<precompile>1);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : (state == ButtonState::Pressed) ? "#3D3D40" : ((state == ButtonState::Active) or <bind-cache>2.SubMenuOpening) ? "#3D3D40" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.FrameIndex ?? 0) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.ShortcutText of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ShortcutTextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ShortcutTextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>9.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>9.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>9.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>9.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>9.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>9.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Active) or <bind-cache>2.SubMenuOpening) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>11.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>11.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Active) or <bind-cache>2.SubMenuOpening) ? "#1997EA" : (state == ButtonState::Pressed) ? "#007ACC" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>11.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>11.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::MenuItemButtonTemplate* = null of (::darkskin::MenuItemButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.SubMenuExisting of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::MenuItemButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SubMenuExistingChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SubMenuExistingChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::MenuItemButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>10.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>10.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(114/142)================================
module <instance>darkskin::MenuItemButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(MenuItemButtonTemplateConstructor))
    class MenuItemButtonTemplate : ::presentation::templates::GuiToolstripButtonTemplate, MenuItemButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::MenuItemButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-MenuItemButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(115/142)================================
module <constructor>darkskin::MenuSplitterTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class MenuSplitterTemplateConstructor
    {
        @cpp:Protected
        var <precompile>0 : ::darkskin::MenuSplitterTemplate* = null of (::darkskin::MenuSplitterTemplate*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-MenuSplitterTemplate>Initialize(<this> : ::darkskin::MenuSplitterTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>1.Color = (cast (::presentation::Color) "#1B1B1C"));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.PreferredMinSize = {x : 0; y : 1;} of (::presentation::Size));
            }
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 1; right : 0; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>3.Color = (cast (::presentation::Color) "#333337"));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
        }

        new ()
        {
        }
    }
}

================================(116/142)================================
module <instance>darkskin::MenuSplitterTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(MenuSplitterTemplateConstructor))
    class MenuSplitterTemplate : ::presentation::templates::GuiControlTemplate, MenuSplitterTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::MenuSplitterTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-MenuSplitterTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(117/142)================================
module <constructor>darkskin::ToolstripSplitArrowTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ToolstripSplitArrowTemplateConstructor
    {
        @cpp:Protected
        var self : ::darkskin::ToolstripSplitArrowTemplate* = null of (::darkskin::ToolstripSplitArrowTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-ToolstripSplitArrowTemplate>Initialize(<this> : ::darkskin::ToolstripSplitArrowTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.PreferredMinSize = {x : 9; y : 7;} of (::presentation::Size));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 3;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Absolute; absolute : 5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(1, 1, 1, 1);
            }
            (<precompile>3 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>3.Points = {{x : 0; y : 0;} of (::presentation::Point); {x : 2; y : 2;} of (::presentation::Point); {x : 4; y : 0;} of (::presentation::Point);});
            }
            {
                (<precompile>3.Size = {x : 5; y : 3;} of (::presentation::Size));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripSplitArrowTemplate* = null of (::darkskin::ToolstripSplitArrowTemplate*);

                    var <bind-cache>1 : ::darkskin::ToolstripSplitArrowTemplate* = null of (::darkskin::ToolstripSplitArrowTemplate*);

                    var <bind-cache>2 : ::darkskin::ToolstripSplitArrowTemplate* = null of (::darkskin::ToolstripSplitArrowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.Selected) ? "#007ACC" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripSplitArrowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ToolstripSplitArrowTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ToolstripSplitArrowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripSplitArrowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ToolstripSplitArrowTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ToolstripSplitArrowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripSplitArrowTemplate* = null of (::darkskin::ToolstripSplitArrowTemplate*);

                    var <bind-cache>1 : ::darkskin::ToolstripSplitArrowTemplate* = null of (::darkskin::ToolstripSplitArrowTemplate*);

                    var <bind-cache>2 : ::darkskin::ToolstripSplitArrowTemplate* = null of (::darkskin::ToolstripSplitArrowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.Selected) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripSplitArrowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ToolstripSplitArrowTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ToolstripSplitArrowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripSplitArrowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ToolstripSplitArrowTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ToolstripSplitArrowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripSplitArrowTemplate* = null of (::darkskin::ToolstripSplitArrowTemplate*);

                    var <bind-cache>1 : ::darkskin::ToolstripSplitArrowTemplate* = null of (::darkskin::ToolstripSplitArrowTemplate*);

                    var <bind-cache>2 : ::darkskin::ToolstripSplitArrowTemplate* = null of (::darkskin::ToolstripSplitArrowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.Selected) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripSplitArrowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ToolstripSplitArrowTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ToolstripSplitArrowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SelectedChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SelectedChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripSplitArrowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ToolstripSplitArrowTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ToolstripSplitArrowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(118/142)================================
module <instance>darkskin::ToolstripSplitArrowTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ToolstripSplitArrowTemplateConstructor))
    class ToolstripSplitArrowTemplate : ::presentation::templates::GuiSelectableButtonTemplate, ToolstripSplitArrowTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ToolstripSplitArrowTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ToolstripSplitArrowTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(119/142)================================
module <constructor>darkskin::ToolstripButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ToolstripButtonTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::ToolstripButtonTemplate* = null of (::darkskin::ToolstripButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        func <darkskin-ToolstripButtonTemplate>Initialize(<this> : ::darkskin::ToolstripButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 3; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>4 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (container.OwnedElement = <precompile>4);
            }
            {
                <precompile>2.AddChild(container);
            }
            {
                self.AddChild(<precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripButtonTemplate* = null of (::darkskin::ToolstripButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::ToolstripButtonTemplate* = null of (::darkskin::ToolstripButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.Selected) ? "#00000000" : "#007ACC")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ToolstripButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ToolstripButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripButtonTemplate* = null of (::darkskin::ToolstripButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::ToolstripButtonTemplate* = null of (::darkskin::ToolstripButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::ToolstripButtonTemplate* = null of (::darkskin::ToolstripButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#007ACC" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ToolstripButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ToolstripButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ToolstripButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ToolstripButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripButtonTemplate* = null of (::darkskin::ToolstripButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripButtonTemplate* = null of (::darkskin::ToolstripButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripButtonTemplate* = null of (::darkskin::ToolstripButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.FrameIndex ?? 0) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(120/142)================================
module <instance>darkskin::ToolstripButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ToolstripButtonTemplateConstructor))
    class ToolstripButtonTemplate : ::presentation::templates::GuiToolstripButtonTemplate, ToolstripButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ToolstripButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ToolstripButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(121/142)================================
module <constructor>darkskin::ToolstripDropdownButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ToolstripDropdownButtonTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        func <darkskin-ToolstripDropdownButtonTemplate>Initialize(<this> : ::darkskin::ToolstripDropdownButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (<precompile>4 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 10; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>4.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 3; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>5 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (container.OwnedElement = <precompile>5);
            }
            {
                <precompile>4.AddChild(container);
            }
            {
                <precompile>2.AddChild(<precompile>4);
            }
            (<precompile>6 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>6.PreferredMinSize = {x : 9; y : 0;} of (::presentation::Size));
            }
            {
                (<precompile>6.AlignmentToParent = {left : (-1); top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>6.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>6.SetRowsAndColumns(3, 3);
                <precompile>6.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>6.SetRowOption(1, {composeType : Absolute; absolute : 3;} of (::presentation::compositions::GuiCellOption));
                <precompile>6.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>6.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>6.SetColumnOption(1, {composeType : Absolute; absolute : 5;} of (::presentation::compositions::GuiCellOption));
                <precompile>6.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(1, 1, 1, 1);
            }
            (<precompile>8 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>8.Points = {{x : 0; y : 0;} of (::presentation::Point); {x : 2; y : 2;} of (::presentation::Point); {x : 4; y : 0;} of (::presentation::Point);});
            }
            {
                (<precompile>8.Size = {x : 5; y : 3;} of (::presentation::Size));
            }
            {
                (<precompile>7.OwnedElement = <precompile>8);
            }
            {
                <precompile>6.AddChild(<precompile>7);
            }
            {
                <precompile>2.AddChild(<precompile>6);
            }
            {
                self.AddChild(<precompile>2);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.Selected) ? "#00000000" : "#007ACC")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#007ACC" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.FrameIndex ?? 0) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::ToolstripDropdownButtonTemplate* = null of (::darkskin::ToolstripDropdownButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#555558" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#FFFFFF" : (state == ButtonState::Active) ? "#1997EA" : "#999999")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ToolstripDropdownButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ToolstripDropdownButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(122/142)================================
module <instance>darkskin::ToolstripDropdownButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ToolstripDropdownButtonTemplateConstructor))
    class ToolstripDropdownButtonTemplate : ::presentation::templates::GuiToolstripButtonTemplate, ToolstripDropdownButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ToolstripDropdownButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ToolstripDropdownButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(123/142)================================
module <constructor>darkskin::ToolstripInMenuTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ToolstripInMenuTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>0 : ::darkskin::ToolstripInMenuTemplate* = null of (::darkskin::ToolstripInMenuTemplate*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-ToolstripInMenuTemplate>Initialize(<this> : ::darkskin::ToolstripInMenuTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>1.Color = (cast (::presentation::Color) "#1B1B1C"));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.AddChild(container);
            }
            {
                (<precompile>0.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(124/142)================================
module <instance>darkskin::ToolstripInMenuTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ToolstripInMenuTemplateConstructor))
    class ToolstripInMenuTemplate : ::presentation::templates::GuiControlTemplate, ToolstripInMenuTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ToolstripInMenuTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ToolstripInMenuTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(125/142)================================
module <constructor>darkskin::ToolstripMenuTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ToolstripMenuTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>0 : ::darkskin::ToolstripMenuTemplate* = null of (::darkskin::ToolstripMenuTemplate*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        func <darkskin-ToolstripMenuTemplate>Initialize(<this> : ::darkskin::ToolstripMenuTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>1.Color = (cast (::presentation::Color) "#1B1B1C"));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>3.Color = (cast (::presentation::Color) "#333337"));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 3; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>2.AddChild(container);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            {
                (<precompile>0.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(126/142)================================
module <instance>darkskin::ToolstripMenuTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ToolstripMenuTemplateConstructor))
    class ToolstripMenuTemplate : ::presentation::templates::GuiMenuTemplate, ToolstripMenuTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ToolstripMenuTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ToolstripMenuTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(127/142)================================
module <constructor>darkskin::ToolstripSplitButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ToolstripSplitButtonTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::ToolstripSplitButtonTemplate* = null of (::darkskin::ToolstripSplitButtonTemplate*);

        @cpp:Protected
        var buttonArrow : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <darkskin-ToolstripSplitButtonTemplate>Initialize(<this> : ::darkskin::ToolstripSplitButtonTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SubMenuTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiMenuTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripMenuTemplate*)();
                    }
                });
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 1; top : 1; right : 11; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 3; top : 3; right : 3; bottom : 3;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>4 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (container.OwnedElement = <precompile>4);
            }
            {
                <precompile>2.AddChild(container);
            }
            {
                self.AddChild(<precompile>2);
            }
            (<precompile>5 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>5.AlignmentToParent = {left : (-1); top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>5.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>6 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>6.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>6.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>7 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>6.OwnedElement = <precompile>7);
            }
            {
                <precompile>5.AddChild(<precompile>6);
            }
            {
                (buttonArrow = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("buttonArrow", buttonArrow);
            }
            (<precompile>8 = buttonArrow.BoundsComposition);
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (buttonArrow.AutoFocus = false);
            }
            {
                (buttonArrow.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ToolstripSplitArrowTemplate*)();
                    }
                });
            }
            {
                <precompile>5.AddChild(buttonArrow.BoundsComposition);
            }
            {
                self.AddChild(<precompile>5);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripSplitButtonTemplate* = null of (::darkskin::ToolstripSplitButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::ToolstripSplitButtonTemplate* = null of (::darkskin::ToolstripSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.Selected) ? "#00000000" : "#007ACC")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripSplitButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ToolstripSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.SelectedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.SelectedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripSplitButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ToolstripSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripSplitButtonTemplate* = null of (::darkskin::ToolstripSplitButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::ToolstripSplitButtonTemplate* = null of (::darkskin::ToolstripSplitButtonTemplate*);

                    var <bind-cache>2 : ::darkskin::ToolstripSplitButtonTemplate* = null of (::darkskin::ToolstripSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : ((state == ButtonState::Pressed) or <bind-cache>2.SubMenuOpening) ? "#007ACC" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripSplitButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ToolstripSplitButtonTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::ToolstripSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.SubMenuOpeningChanged, <bind-callback>2_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.SubMenuOpeningChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripSplitButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ToolstripSplitButtonTemplate*));
                            (<bind-cache>2 = null of (::darkskin::ToolstripSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripSplitButtonTemplate* = null of (::darkskin::ToolstripSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.Image ?? null) of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripSplitButtonTemplate* = null of (::darkskin::ToolstripSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.VisuallyEnabled of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripSplitButtonTemplate* = null of (::darkskin::ToolstripSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Image.FrameIndex ?? 0) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.ImageChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.ImageChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripSplitButtonTemplate* = null of (::darkskin::ToolstripSplitButtonTemplate*);

                    var <bind-cache>1 : ::darkskin::ToolstripSplitButtonTemplate* = null of (::darkskin::ToolstripSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let state = <bind-cache>0.State in ((!<bind-cache>1.VisuallyEnabled) ? "#00000000" : (state == ButtonState::Pressed) ? "#54545C" : (state == ButtonState::Active) ? "#54545C" : "#00000000")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripSplitButtonTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::ToolstripSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StateChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.VisuallyEnabledChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.VisuallyEnabledChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripSplitButtonTemplate*));
                            (<bind-cache>1 = null of (::darkskin::ToolstripSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::ToolstripSplitButtonTemplate* = null of (::darkskin::ToolstripSplitButtonTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.SubMenuOpening of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::ToolstripSplitButtonTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SubMenuOpeningChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SubMenuOpeningChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::ToolstripSplitButtonTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = buttonArrow.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (buttonArrow.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
            {
                (self.SubMenuHost = buttonArrow);
            }
        }

        new ()
        {
        }
    }
}

================================(128/142)================================
module <instance>darkskin::ToolstripSplitButtonTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ToolstripSplitButtonTemplateConstructor))
    class ToolstripSplitButtonTemplate : ::presentation::templates::GuiToolstripButtonTemplate, ToolstripSplitButtonTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ToolstripSplitButtonTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ToolstripSplitButtonTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(129/142)================================
module <constructor>darkskin::ToolstripSplitterInMenuTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ToolstripSplitterInMenuTemplateConstructor
    {
        @cpp:Protected
        var <precompile>0 : ::darkskin::ToolstripSplitterInMenuTemplate* = null of (::darkskin::ToolstripSplitterInMenuTemplate*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-ToolstripSplitterInMenuTemplate>Initialize(<this> : ::darkskin::ToolstripSplitterInMenuTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>1.Color = (cast (::presentation::Color) "#1B1B1C"));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.PreferredMinSize = {x : 1; y : 0;} of (::presentation::Size));
            }
            {
                (<precompile>2.AlignmentToParent = {left : 3; top : 1; right : 3; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>3.Color = (cast (::presentation::Color) "#333337"));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
        }

        new ()
        {
        }
    }
}

================================(130/142)================================
module <instance>darkskin::ToolstripSplitterInMenuTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ToolstripSplitterInMenuTemplateConstructor))
    class ToolstripSplitterInMenuTemplate : ::presentation::templates::GuiControlTemplate, ToolstripSplitterInMenuTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ToolstripSplitterInMenuTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ToolstripSplitterInMenuTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(131/142)================================
module <constructor>darkskin::ToolstripSplitterTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ToolstripSplitterTemplateConstructor
    {
        @cpp:Protected
        var <precompile>0 : ::darkskin::ToolstripSplitterTemplate* = null of (::darkskin::ToolstripSplitterTemplate*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::Gui3DSplitterElement^ = null of (::presentation::elements::Gui3DSplitterElement^);

        @cpp:Protected
        func <darkskin-ToolstripSplitterTemplate>Initialize(<this> : ::darkskin::ToolstripSplitterTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>1.Color = (cast (::presentation::Color) "#2D2D30"));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 3; top : 1; right : 3; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::Gui3DSplitterElement^)());
            {
                (<precompile>3.Direction = Vertical of (::presentation::elements::Gui3DSplitterElement::Direction));
            }
            {
                (<precompile>3.Color2 = (cast (::presentation::Color) "#464648"));
            }
            {
                (<precompile>3.Color1 = (cast (::presentation::Color) "#222224"));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
        }

        new ()
        {
        }
    }
}

================================(132/142)================================
module <instance>darkskin::ToolstripSplitterTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ToolstripSplitterTemplateConstructor))
    class ToolstripSplitterTemplate : ::presentation::templates::GuiControlTemplate, ToolstripSplitterTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ToolstripSplitterTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ToolstripSplitterTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(133/142)================================
module <constructor>darkskin::ToolstripTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class ToolstripTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>0 : ::darkskin::ToolstripTemplate* = null of (::darkskin::ToolstripTemplate*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-ToolstripTemplate>Initialize(<this> : ::darkskin::ToolstripTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>1.Color = (cast (::presentation::Color) "#2D2D30"));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.AddChild(container);
            }
            {
                (<precompile>0.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(134/142)================================
module <instance>darkskin::ToolstripTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(ToolstripTemplateConstructor))
    class ToolstripTemplate : ::presentation::templates::GuiControlTemplate, ToolstripTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::ToolstripTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-ToolstripTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(135/142)================================
module <constructor>darkskin::CustomControlTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class CustomControlTemplateConstructor
    {
        @cpp:Protected
        var <precompile>0 : ::darkskin::CustomControlTemplate* = null of (::darkskin::CustomControlTemplate*);

        @cpp:Protected
        func <darkskin-CustomControlTemplate>Initialize(<this> : ::darkskin::CustomControlTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
        }

        new ()
        {
        }
    }
}

================================(136/142)================================
module <instance>darkskin::CustomControlTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(CustomControlTemplateConstructor))
    class CustomControlTemplate : ::presentation::templates::GuiControlTemplate, CustomControlTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::CustomControlTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-CustomControlTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(137/142)================================
module <constructor>darkskin::CustomFrameWindowTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class CustomFrameWindowTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var self : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

        @cpp:Protected
        var frameTable : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var contentTable : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>0 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>19 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>20 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>21 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        var <precompile>22 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>23 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        var <precompile>24 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>25 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>26 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>27 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>28 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>29 : ::presentation::elements::GuiPolygonElement^ = null of (::presentation::elements::GuiPolygonElement^);

        @cpp:Protected
        var <precompile>30 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>31 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>32 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>33 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>34 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        var <precompile>35 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>36 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>37 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>38 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        func <darkskin-CustomFrameWindowTemplate>Initialize(<this> : ::darkskin::CustomFrameWindowTemplate*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.TooltipTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiWindowTemplate*)
                {
                    {
                        return new (::darkskin::TooltipTemplate*)();
                    }
                });
            }
            {
                (self.CustomFrameEnabled = true);
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>0.Color = (cast (::presentation::Color) "#2D2D30"));
            }
            {
                (self.OwnedElement = <precompile>0);
            }
            (<precompile>1 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            (frameTable = new (::presentation::compositions::GuiTableComposition*)());
            <this>.SetNamedObject("frameTable", frameTable);
            {
                (frameTable.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (frameTable.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                frameTable.SetRowsAndColumns(3, 3);
                frameTable.SetRowOption(0, {composeType : Absolute; absolute : 0;} of (::presentation::compositions::GuiCellOption));
                frameTable.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                frameTable.SetRowOption(2, {composeType : Absolute; absolute : 0;} of (::presentation::compositions::GuiCellOption));
                frameTable.SetColumnOption(0, {composeType : Absolute; absolute : 0;} of (::presentation::compositions::GuiCellOption));
                frameTable.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                frameTable.SetColumnOption(2, {composeType : Absolute; absolute : 0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>3.AssociatedHitTestResult = BorderLeftTop of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>3.SetSite(0, 0, 1, 1);
            }
            {
                frameTable.AddChild(<precompile>3);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>4.AssociatedHitTestResult = BorderRightTop of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>4.SetSite(0, 2, 1, 1);
            }
            {
                frameTable.AddChild(<precompile>4);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>5.AssociatedHitTestResult = BorderLeftBottom of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>5.SetSite(2, 0, 1, 1);
            }
            {
                frameTable.AddChild(<precompile>5);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>6.AssociatedHitTestResult = BorderRightBottom of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>6.SetSite(2, 2, 1, 1);
            }
            {
                frameTable.AddChild(<precompile>6);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>7.AssociatedHitTestResult = BorderLeft of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>7.SetSite(1, 0, 1, 1);
            }
            {
                frameTable.AddChild(<precompile>7);
            }
            (<precompile>8 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>8.AssociatedHitTestResult = BorderRight of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>8.SetSite(1, 2, 1, 1);
            }
            {
                frameTable.AddChild(<precompile>8);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>9.AssociatedHitTestResult = BorderTop of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>9.SetSite(0, 1, 1, 1);
            }
            {
                frameTable.AddChild(<precompile>9);
            }
            (<precompile>10 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>10.AssociatedHitTestResult = BorderBottom of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>10.SetSite(2, 1, 1, 1);
            }
            {
                frameTable.AddChild(<precompile>10);
            }
            {
                <precompile>1.AddChild(frameTable);
            }
            (contentTable = new (::presentation::compositions::GuiTableComposition*)());
            <this>.SetNamedObject("contentTable", contentTable);
            {
                (contentTable.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                contentTable.SetRowsAndColumns(2, 5);
                contentTable.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                contentTable.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                contentTable.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                contentTable.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                contentTable.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                contentTable.SetColumnOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                contentTable.SetColumnOption(4, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>11 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>11.SetSite(0, 2, 1, 1);
            }
            {
                (<precompile>12 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>16 = <precompile>12.BoundsComposition);
            {
                (<precompile>16.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>12.AutoFocus = false);
            }
            (<precompile>13 = <precompile>12.ContainerComposition);
            (<precompile>14 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>14.PreferredMinSize = {x : 24; y : 16;} of (::presentation::Size));
            }
            {
                (<precompile>14.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>14.MinSizeLimitation = LimitToElement of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>15 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>15.Points = {{x : 8; y : 12;} of (::presentation::Point); {x : 15; y : 12;} of (::presentation::Point); {x : 15; y : 13;} of (::presentation::Point); {x : 8; y : 13;} of (::presentation::Point);});
            }
            {
                (<precompile>15.Size = {x : 24; y : 16;} of (::presentation::Size));
            }
            {
                (<precompile>14.OwnedElement = <precompile>15);
            }
            {
                <precompile>13.AddChild(<precompile>14);
            }
            {
                (<precompile>12.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ButtonTemplate*)();
                    }
                });
            }
            {
                <precompile>11.AddChild(<precompile>12.BoundsComposition);
            }
            {
                contentTable.AddChild(<precompile>11);
            }
            (<precompile>17 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>17.SetSite(0, 3, 1, 1);
            }
            {
                (<precompile>18 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>24 = <precompile>18.BoundsComposition);
            {
                (<precompile>24.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>18.AutoFocus = false);
            }
            (<precompile>19 = <precompile>18.ContainerComposition);
            (<precompile>20 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>20.PreferredMinSize = {x : 24; y : 16;} of (::presentation::Size));
            }
            {
                (<precompile>20.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>20.MinSizeLimitation = LimitToElement of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>21 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>21.Points = {{x : 6; y : 2;} of (::presentation::Point); {x : 17; y : 2;} of (::presentation::Point); {x : 17; y : 13;} of (::presentation::Point); {x : 6; y : 13;} of (::presentation::Point); {x : 6; y : 2;} of (::presentation::Point); {x : 6; y : 2;} of (::presentation::Point); {x : 6; y : 13;} of (::presentation::Point); {x : 17; y : 13;} of (::presentation::Point); {x : 17; y : 4;} of (::presentation::Point); {x : 6; y : 4;} of (::presentation::Point);});
            }
            {
                (<precompile>21.Size = {x : 24; y : 16;} of (::presentation::Size));
            }
            {
                (<precompile>20.OwnedElement = <precompile>21);
            }
            {
                <precompile>19.AddChild(<precompile>20);
            }
            (<precompile>22 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>22.PreferredMinSize = {x : 24; y : 16;} of (::presentation::Size));
            }
            {
                (<precompile>22.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>22.MinSizeLimitation = LimitToElement of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>23 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>23.Points = {{x : 9; y : 6;} of (::presentation::Point); {x : 14; y : 6;} of (::presentation::Point); {x : 14; y : 13;} of (::presentation::Point); {x : 6; y : 13;} of (::presentation::Point); {x : 6; y : 6;} of (::presentation::Point); {x : 9; y : 6;} of (::presentation::Point); {x : 9; y : 7;} of (::presentation::Point); {x : 6; y : 7;} of (::presentation::Point); {x : 6; y : 13;} of (::presentation::Point); {x : 14; y : 13;} of (::presentation::Point); {x : 14; y : 7;} of (::presentation::Point); {x : 9; y : 7;} of (::presentation::Point); {x : 9; y : 2;} of (::presentation::Point); {x : 17; y : 2;} of (::presentation::Point); {x : 17; y : 9;} of (::presentation::Point); {x : 14; y : 9;} of (::presentation::Point); {x : 14; y : 9;} of (::presentation::Point); {x : 17; y : 9;} of (::presentation::Point); {x : 17; y : 3;} of (::presentation::Point); {x : 9; y : 3;} of (::presentation::Point);});
            }
            {
                (<precompile>23.Size = {x : 24; y : 16;} of (::presentation::Size));
            }
            {
                (<precompile>22.OwnedElement = <precompile>23);
            }
            {
                <precompile>19.AddChild(<precompile>22);
            }
            {
                (<precompile>18.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ButtonTemplate*)();
                    }
                });
            }
            {
                <precompile>17.AddChild(<precompile>18.BoundsComposition);
            }
            {
                contentTable.AddChild(<precompile>17);
            }
            (<precompile>25 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>25.AssociatedHitTestResult = ButtonClose of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>25.SetSite(0, 4, 1, 1);
            }
            {
                (<precompile>26 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>30 = <precompile>26.BoundsComposition);
            {
                (<precompile>30.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>26.AutoFocus = false);
            }
            (<precompile>27 = <precompile>26.ContainerComposition);
            (<precompile>28 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>28.PreferredMinSize = {x : 24; y : 16;} of (::presentation::Size));
            }
            {
                (<precompile>28.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>28.MinSizeLimitation = LimitToElement of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>29 = new (::presentation::elements::GuiPolygonElement^)());
            {
                (<precompile>29.Points = {{x : 7; y : 2;} of (::presentation::Point); {x : 11; y : 6;} of (::presentation::Point); {x : 12; y : 6;} of (::presentation::Point); {x : 16; y : 2;} of (::presentation::Point); {x : 17; y : 3;} of (::presentation::Point); {x : 13; y : 7;} of (::presentation::Point); {x : 13; y : 8;} of (::presentation::Point); {x : 17; y : 12;} of (::presentation::Point); {x : 16; y : 13;} of (::presentation::Point); {x : 12; y : 9;} of (::presentation::Point); {x : 11; y : 9;} of (::presentation::Point); {x : 7; y : 13;} of (::presentation::Point); {x : 6; y : 12;} of (::presentation::Point); {x : 10; y : 8;} of (::presentation::Point); {x : 10; y : 7;} of (::presentation::Point); {x : 6; y : 3;} of (::presentation::Point);});
            }
            {
                (<precompile>29.Size = {x : 24; y : 16;} of (::presentation::Size));
            }
            {
                (<precompile>28.OwnedElement = <precompile>29);
            }
            {
                <precompile>27.AddChild(<precompile>28);
            }
            {
                (<precompile>26.ControlTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiControlTemplate*)
                {
                    {
                        return new (::darkskin::ButtonTemplate*)();
                    }
                });
            }
            {
                <precompile>25.AddChild(<precompile>26.BoundsComposition);
            }
            {
                contentTable.AddChild(<precompile>25);
            }
            (<precompile>31 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>31.SetSite(0, 0, 1, 1);
            }
            (<precompile>32 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>32.AlignmentToParent = {left : 0; top : 0; right : 2; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>32.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>32.SetRowsAndColumns(3, 1);
                <precompile>32.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>32.SetRowOption(1, {composeType : Absolute; absolute : 16;} of (::presentation::compositions::GuiCellOption));
                <precompile>32.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>32.SetColumnOption(0, {composeType : Absolute; absolute : 16;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>33 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>33.AssociatedHitTestResult = Icon of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>33.SetSite(1, 0, 1, 1);
            }
            (<precompile>34 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>34.Stretch = true);
            }
            {
                (<precompile>33.OwnedElement = <precompile>34);
            }
            {
                <precompile>32.AddChild(<precompile>33);
            }
            {
                <precompile>31.AddChild(<precompile>32);
            }
            {
                contentTable.AddChild(<precompile>31);
            }
            (<precompile>35 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>35.AssociatedHitTestResult = Title of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>35.SetSite(0, 1, 1, 1);
            }
            (<precompile>36 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>36.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>36.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>37 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>37.Font = {fontFamily : "Segoe WP SemiLight"; size : 14; antialias : true;} of (::presentation::FontProperties));
            }
            {
                (<precompile>37.Ellipse = true);
            }
            {
                (<precompile>36.OwnedElement = <precompile>37);
            }
            {
                <precompile>35.AddChild(<precompile>36);
            }
            {
                contentTable.AddChild(<precompile>35);
            }
            (<precompile>38 = new (::presentation::compositions::GuiCellComposition*)());
            {
                (<precompile>38.AssociatedHitTestResult = Client of (::presentation::INativeWindowListener::HitTestResult));
            }
            {
                <precompile>38.SetSite(1, 0, 1, 5);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>38.AddChild(container);
            }
            {
                contentTable.AddChild(<precompile>38);
            }
            {
                <precompile>1.AddChild(contentTable);
            }
            {
                self.AddChild(<precompile>1);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-cache>1 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-cache>2 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-cache>3 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>2_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>3_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) let margin = <bind-cache>0.CustomFramePadding in (((!<bind-cache>1.Border) or ((((margin.left + margin.top) + margin.right) + margin.bottom) == 0)) ? "#00000000" : (<bind-cache>2.VisuallyEnabled and <bind-cache>3.Activated) ? "#017ACC" : "#434346")) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>2_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>3_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-cache>2 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-cache>3 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CustomFramePaddingChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.BorderChanged, <bind-callback>1_0) ?? null));
                            (<bind-handler>2_0 = (attach(<bind-cache>2.VisuallyEnabledChanged, <bind-callback>2_0) ?? null));
                            (<bind-handler>3_0 = (attach(<bind-cache>3.ActivatedChanged, <bind-callback>3_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CustomFramePaddingChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.BorderChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            if (<bind-handler>2_0 is not null)
                            {
                                detach(<bind-cache>2.VisuallyEnabledChanged, <bind-handler>2_0);
                                (<bind-handler>2_0 = null);
                            }
                            if (<bind-handler>3_0 is not null)
                            {
                                detach(<bind-cache>3.ActivatedChanged, <bind-handler>3_0);
                                (<bind-handler>3_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-cache>2 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-cache>3 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>2_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>3_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>15.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>15.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>15.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>15.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.MinimizedBox of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.MinimizedBoxChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.MinimizedBoxChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>12.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>12.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-cache>1 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.MinimizedBox or <bind-cache>1.MaximizedBox) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.MinimizedBoxChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.MaximizedBoxChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.MinimizedBoxChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.MaximizedBoxChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>12.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>12.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.MinimizedBox ? ButtonMinimum : NoDecision of (::presentation::INativeWindowListener::HitTestResult);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.MinimizedBoxChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.MinimizedBoxChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>11.AssociatedHitTestResult;
                    var <new> = (cast (::presentation::INativeWindowListener::HitTestResult) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>11.AssociatedHitTestResult = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>21.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>21.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>21.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>21.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (!<bind-cache>0.Maximized) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.MaximizedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.MaximizedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>20.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>20.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>23.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>23.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>23.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>23.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Maximized of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.MaximizedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.MaximizedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>22.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>22.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.MaximizedBox of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.MaximizedBoxChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.MaximizedBoxChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>18.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>18.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-cache>1 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.MinimizedBox or <bind-cache>1.MaximizedBox) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.MinimizedBoxChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.MaximizedBoxChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.MinimizedBoxChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.MaximizedBoxChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>18.Visible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>18.Visible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.MaximizedBox ? ButtonMaximum : NoDecision of (::presentation::INativeWindowListener::HitTestResult);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.MaximizedBoxChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.MaximizedBoxChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>17.AssociatedHitTestResult;
                    var <new> = (cast (::presentation::INativeWindowListener::HitTestResult) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>17.AssociatedHitTestResult = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>29.BackgroundColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>29.BackgroundColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (!<bind-cache>0.VisuallyEnabled) ? "#6D6D6D" : "#F1F1F1") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>29.BorderColor;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>29.BorderColor = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-cache>1 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Icon is not null ? <bind-cache>1.Icon.Image : null of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.IconChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.IconChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.IconChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.IconChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>34.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>34.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-cache>1 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Icon is not null ? <bind-cache>1.Icon.FrameIndex : (-1) of (::system::Int64);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.IconChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.IconChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.IconChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.IconChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>34.FrameIndex;
                    var <new> = (cast (::system::Int64) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>34.FrameIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-cache>1 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Icon is not null and <bind-cache>1.IconVisible) ? LimitToElementAndChildren : NoLimit of (GuiGraphicsComposition::MinSizeLimitation) of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.IconChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.IconVisibleChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.IconChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.IconVisibleChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>31.MinSizeLimitation;
                    var <new> = (cast (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>31.MinSizeLimitation = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>37.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>37.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-cache>1 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) (<bind-cache>0.VisuallyEnabled and <bind-cache>1.Activated) ? "#999999" : "#6D6D6D") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-cache>1 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.VisuallyEnabledChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.ActivatedChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.VisuallyEnabledChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.ActivatedChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-cache>1 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>37.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>37.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::darkskin::CustomFrameWindowTemplate* = null of (::darkskin::CustomFrameWindowTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.CustomFramePadding of (::presentation::Margin);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::darkskin::CustomFrameWindowTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CustomFramePaddingChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CustomFramePaddingChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::darkskin::CustomFrameWindowTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = contentTable.AlignmentToParent;
                    var <new> = (cast (::presentation::Margin) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (contentTable.AlignmentToParent = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.ContainerComposition = container);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (self.TitleBar)
                    {
                        contentTable.SetRowOption(0, {composeType : MinSize;});
                    }
                    else
                    {
                        contentTable.SetRowOption(0, {composeType : Absolute; absolute : 0;});
                    }
                };
                attach(self.TitleBarChanged, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var margin = self.CustomFramePadding;
                    frameTable.SetRowOption(0, {composeType : Absolute; absolute : margin.top;});
                    frameTable.SetRowOption(2, {composeType : Absolute; absolute : margin.bottom;});
                    frameTable.SetColumnOption(0, {composeType : Absolute; absolute : margin.left;});
                    frameTable.SetColumnOption(2, {composeType : Absolute; absolute : margin.right;});
                };
                attach(self.CustomFramePaddingChanged, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(138/142)================================
module <instance>darkskin::CustomFrameWindowTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(CustomFrameWindowTemplateConstructor))
    class CustomFrameWindowTemplate : ::presentation::templates::GuiWindowTemplate, CustomFrameWindowTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::CustomFrameWindowTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-CustomFrameWindowTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(139/142)================================
module <constructor>darkskin::SystemFrameWindowTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class SystemFrameWindowTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>0 : ::darkskin::SystemFrameWindowTemplate* = null of (::darkskin::SystemFrameWindowTemplate*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <darkskin-SystemFrameWindowTemplate>Initialize(<this> : ::darkskin::SystemFrameWindowTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.CustomFrameEnabled = false);
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>1.Color = (cast (::presentation::Color) "#2D2D30"));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.AddChild(container);
            }
            {
                (<precompile>0.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(140/142)================================
module <instance>darkskin::SystemFrameWindowTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(SystemFrameWindowTemplateConstructor))
    class SystemFrameWindowTemplate : ::presentation::templates::GuiWindowTemplate, SystemFrameWindowTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::SystemFrameWindowTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-SystemFrameWindowTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(141/142)================================
module <constructor>darkskin::TooltipTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    class TooltipTemplateConstructor
    {
        @cpp:Protected
        var container : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>0 : ::darkskin::TooltipTemplate* = null of (::darkskin::TooltipTemplate*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        func <darkskin-TooltipTemplate>Initialize(<this> : ::darkskin::TooltipTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>1.Color = (cast (::presentation::Color) "#2D2D30"));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>3.Color = (cast (::presentation::Color) "#017ACC"));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (container = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("container", container);
            {
                (container.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                (container.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>2.AddChild(container);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            {
                (<precompile>0.ContainerComposition = container);
            }
        }

        new ()
        {
        }
    }
}

================================(142/142)================================
module <instance>darkskin::TooltipTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace darkskin
{
    @cpp:Friend(typeof(TooltipTemplateConstructor))
    class TooltipTemplate : ::presentation::templates::GuiWindowTemplate, TooltipTemplateConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("darkskin::TooltipTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<darkskin-TooltipTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

