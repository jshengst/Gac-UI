================================(1/115)================================
module <constructor>demo::DataGridTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class DataGridTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::DataGridTabPage* = null of (::demo::DataGridTabPage*);

        @cpp:Protected
        var dataGrid : ::presentation::controls::GuiBindableDataGrid* = null of (::presentation::controls::GuiBindableDataGrid*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiTextList* = null of (::presentation::controls::GuiTextList*);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>16 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>17 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>19 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>20 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>21 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>22 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var comboView : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        var dateFilter : ::demo::DateFilter* = null of (::demo::DateFilter*);

        @cpp:Protected
        func <demo-DataGridTabPage>Initialize(<this> : ::demo::DataGridTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "BindableDataGrid");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 1);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiTextList*)(::presentation::theme::ThemeName::TextList));
            }
            (<precompile>3 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>3.Text = "BigIcon");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>3);
            }
            (<precompile>4 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>4.Text = "SmallIcon");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>4);
            }
            (<precompile>5 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>5.Text = "List");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>5);
            }
            (<precompile>6 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>6.Text = "Tile");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>6);
            }
            (<precompile>7 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>7.Text = "Information");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>7);
            }
            (<precompile>8 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>8.Text = "Detail");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>8);
            }
            (<precompile>9 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>9.Text = "DataGrid");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>9);
            }
            {
                (<precompile>2.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>2.VerticalAlwaysVisible = false);
            }
            {
                (comboView = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, <precompile>2));
                <this>.SetNamedObject("comboView", comboView);
            }
            {
                (comboView.SelectedIndex = 6 of (::system::Int32));
            }
            (<precompile>10 = comboView.BoundsComposition);
            {
                (<precompile>10.PreferredMinSize = {x : 120;} of (::presentation::Size));
            }
            {
                (comboView.Alt = "V");
            }
            {
                <precompile>1.AddChild(comboView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>11 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>11.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>12 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>13 = <precompile>12.BoundsComposition);
            {
                (<precompile>12.Alt = "X");
            }
            {
                (<precompile>12.Text = "Rotate Item Source");
            }
            {
                <precompile>11.AddChild(<precompile>12.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>11);
            }
            (<precompile>14 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>14.SetSite(2, 0, 1, 1);
            }
            {
                (dataGrid = new (::presentation::controls::GuiBindableDataGrid*)(::presentation::theme::ThemeName::ListView));
                <this>.SetNamedObject("dataGrid", dataGrid);
            }
            {
                (dataGrid.LargeImageProperty = func (<item> : ::system::Object) : (::presentation::GuiImageData^)
                {
                    var itemToBind = (cast (demo::MyDataItem^) <item>);
                    return itemToBind.LargeImage;
                });
            }
            {
                var <collection> = dataGrid.DataColumns;
                <collection>.Add(0 of (::system::Int32));
            }
            {
                (dataGrid.SmallImageProperty = func (<item> : ::system::Object) : (::presentation::GuiImageData^)
                {
                    var itemToBind = (cast (demo::MyDataItem^) <item>);
                    return itemToBind.SmallImage;
                });
            }
            {
                (dataGrid.HorizontalAlwaysVisible = false);
            }
            {
                (dataGrid.VerticalAlwaysVisible = false);
            }
            (<precompile>22 = dataGrid.BoundsComposition);
            {
                (<precompile>22.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (dataGrid.Alt = "L");
            }
            (<precompile>15 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>15.Sorter = new (::presentation::controls::list::IDataSorter^)
                {
                    override func SetCallback(value : ::presentation::controls::list::IDataProcessorCallback*) : (::system::Void)
                    {
                    }

                    override func Compare(<row1> : ::system::Object, <row2> : ::system::Object) : (::system::Int32)
                    {
                        return [Sys::Compare($1.Name, $2.Name)] of ((func (demo::MyDataItem^, demo::MyDataItem^) : (::system::Int32)))((cast (demo::MyDataItem^) <row1>), (cast (demo::MyDataItem^) <row2>));
                    }
                });
            }
            {
                (<precompile>15.EditorFactory = new (::presentation::controls::list::DataEditorFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridEditorTemplate*)
                {
                    {
                        return new (::demo::TextEditor*)();
                    }
                }));
            }
            {
                (<precompile>15.ValueProperty = func (<item> : ::system::Object, <value> : ::system::Object, <update> : ::system::Boolean) : (::system::Object)
                {
                    var itemToBind = (cast (demo::MyDataItem^) <item>);
                    if (<update>)
                    {
                        (itemToBind.Name = (cast (::system::String) <value>));
                        return null of (::system::Object);
                    }
                    else
                    {
                        return itemToBind.Name;
                    }
                });
            }
            {
                (<precompile>15.Size = 120 of (::system::Int32));
            }
            {
                (<precompile>15.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var itemToBind = (cast (demo::MyDataItem^) <item>);
                    return itemToBind.Name;
                });
            }
            {
                (<precompile>15.Text = "Name");
            }
            {
                var <collection> = dataGrid.Columns;
                <collection>.Add(<precompile>15);
            }
            (<precompile>16 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>16.VisualizerFactory = new (::presentation::controls::list::DataVisualizerFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridVisualizerTemplate*)
                {
                    {
                        return new (::presentation::controls::list::CellBorderVisualizerTemplate*)();
                    }
                }, new (::presentation::controls::list::DataVisualizerFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridVisualizerTemplate*)
                {
                    {
                        return new (::presentation::controls::list::FocusRectangleVisualizerTemplate*)();
                    }
                }, new (::presentation::controls::list::DataVisualizerFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridVisualizerTemplate*)
                {
                    {
                        return new (::demo::GenderVisualizer*)();
                    }
                }, null))));
            }
            {
                (<precompile>16.Sorter = new (::presentation::controls::list::IDataSorter^)
                {
                    override func SetCallback(value : ::presentation::controls::list::IDataProcessorCallback*) : (::system::Void)
                    {
                    }

                    override func Compare(<row1> : ::system::Object, <row2> : ::system::Object) : (::system::Int32)
                    {
                        return [Sys::Compare((cast (UInt64) $1.Gender), (cast (UInt64) $2.Gender))] of ((func (demo::MyDataItem^, demo::MyDataItem^) : (::system::Int32)))((cast (demo::MyDataItem^) <row1>), (cast (demo::MyDataItem^) <row2>));
                    }
                });
            }
            {
                (<precompile>16.EditorFactory = new (::presentation::controls::list::DataEditorFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridEditorTemplate*)
                {
                    {
                        return new (::demo::GenderEditor*)();
                    }
                }));
            }
            {
                (<precompile>16.ValueProperty = func (<item> : ::system::Object, <value> : ::system::Object, <update> : ::system::Boolean) : (::system::Object)
                {
                    var itemToBind = (cast (demo::MyDataItem^) <item>);
                    if (<update>)
                    {
                        (itemToBind.Gender = (cast (::demo::MyGender) <value>));
                        return null of (::system::Object);
                    }
                    else
                    {
                        return itemToBind.Gender;
                    }
                });
            }
            {
                (<precompile>16.Size = 80 of (::system::Int32));
            }
            {
                (<precompile>16.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var itemToBind = (cast (demo::MyDataItem^) <item>);
                    return demo::ToString(itemToBind.Gender);
                });
            }
            {
                (<precompile>16.Text = "Gender");
            }
            {
                var <collection> = dataGrid.Columns;
                <collection>.Add(<precompile>16);
            }
            (<precompile>17 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>17.VisualizerFactory = new (::presentation::controls::list::DataVisualizerFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridVisualizerTemplate*)
                {
                    {
                        return new (::presentation::controls::list::CellBorderVisualizerTemplate*)();
                    }
                }, new (::presentation::controls::list::DataVisualizerFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridVisualizerTemplate*)
                {
                    {
                        return new (::presentation::controls::list::FocusRectangleVisualizerTemplate*)();
                    }
                }, new (::presentation::controls::list::DataVisualizerFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridVisualizerTemplate*)
                {
                    {
                        return new (::demo::CategoryVisualizer*)();
                    }
                }, null))));
            }
            {
                (<precompile>17.Sorter = new (::presentation::controls::list::IDataSorter^)
                {
                    override func SetCallback(value : ::presentation::controls::list::IDataProcessorCallback*) : (::system::Void)
                    {
                    }

                    override func Compare(<row1> : ::system::Object, <row2> : ::system::Object) : (::system::Int32)
                    {
                        return [Sys::Compare((cast (UInt64) $1.Category), (cast (UInt64) $2.Category))] of ((func (demo::MyDataItem^, demo::MyDataItem^) : (::system::Int32)))((cast (demo::MyDataItem^) <row1>), (cast (demo::MyDataItem^) <row2>));
                    }
                });
            }
            {
                (<precompile>17.EditorFactory = new (::presentation::controls::list::DataEditorFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridEditorTemplate*)
                {
                    {
                        return new (::demo::CategoryEditor*)();
                    }
                }));
            }
            {
                (<precompile>17.ValueProperty = func (<item> : ::system::Object, <value> : ::system::Object, <update> : ::system::Boolean) : (::system::Object)
                {
                    var itemToBind = (cast (demo::MyDataItem^) <item>);
                    if (<update>)
                    {
                        (itemToBind.Category = (cast (::demo::MyCategory) <value>));
                        return null of (::system::Object);
                    }
                    else
                    {
                        return itemToBind.Category;
                    }
                });
            }
            {
                (<precompile>17.Size = 80 of (::system::Int32));
            }
            {
                (<precompile>17.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var itemToBind = (cast (demo::MyDataItem^) <item>);
                    return demo::ToString(itemToBind.Category);
                });
            }
            {
                (<precompile>17.Text = "Category");
            }
            {
                var <collection> = dataGrid.Columns;
                <collection>.Add(<precompile>17);
            }
            (<precompile>18 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>19 = new (::presentation::controls::GuiToolstripMenu*)(::presentation::theme::ThemeName::Menu, null));
            }
            (dateFilter = new (::demo::DateFilter*)());
            <this>.SetNamedObject("dateFilter", dateFilter);
            (<precompile>20 = dateFilter.BoundsComposition);
            {
                (<precompile>20.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>19.ToolstripItems.Add(dateFilter);
            }
            {
                (<precompile>18.Popup = <precompile>19);
            }
            {
                (<precompile>18.Sorter = new (::presentation::controls::list::IDataSorter^)
                {
                    override func SetCallback(value : ::presentation::controls::list::IDataProcessorCallback*) : (::system::Void)
                    {
                    }

                    override func Compare(<row1> : ::system::Object, <row2> : ::system::Object) : (::system::Int32)
                    {
                        return [Sys::Compare($1.Birthday, $2.Birthday)] of ((func (demo::MyDataItem^, demo::MyDataItem^) : (::system::Int32)))((cast (demo::MyDataItem^) <row1>), (cast (demo::MyDataItem^) <row2>));
                    }
                });
            }
            {
                (<precompile>18.EditorFactory = new (::presentation::controls::list::DataEditorFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridEditorTemplate*)
                {
                    {
                        return new (::demo::DateEditor*)();
                    }
                }));
            }
            {
                (<precompile>18.ValueProperty = func (<item> : ::system::Object, <value> : ::system::Object, <update> : ::system::Boolean) : (::system::Object)
                {
                    var itemToBind = (cast (demo::MyDataItem^) <item>);
                    if (<update>)
                    {
                        (itemToBind.Birthday = (cast (::system::DateTime) <value>));
                        return null of (::system::Object);
                    }
                    else
                    {
                        return itemToBind.Birthday;
                    }
                });
            }
            {
                (<precompile>18.Size = 80 of (::system::Int32));
            }
            {
                (<precompile>18.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var itemToBind = (cast (demo::MyDataItem^) <item>);
                    return demo::ToString(itemToBind.Birthday);
                });
            }
            {
                (<precompile>18.Text = "Birthday");
            }
            {
                var <collection> = dataGrid.Columns;
                <collection>.Add(<precompile>18);
            }
            (<precompile>21 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>21.VisualizerFactory = new (::presentation::controls::list::DataVisualizerFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridVisualizerTemplate*)
                {
                    {
                        return new (::presentation::controls::list::CellBorderVisualizerTemplate*)();
                    }
                }, new (::presentation::controls::list::DataVisualizerFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridVisualizerTemplate*)
                {
                    {
                        return new (::presentation::controls::list::FocusRectangleVisualizerTemplate*)();
                    }
                }, new (::presentation::controls::list::DataVisualizerFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridVisualizerTemplate*)
                {
                    {
                        return new (::presentation::controls::list::HyperlinkVisualizerTemplate*)();
                    }
                }, null))));
            }
            {
                (<precompile>21.Sorter = new (::presentation::controls::list::IDataSorter^)
                {
                    override func SetCallback(value : ::presentation::controls::list::IDataProcessorCallback*) : (::system::Void)
                    {
                    }

                    override func Compare(<row1> : ::system::Object, <row2> : ::system::Object) : (::system::Int32)
                    {
                        return [Sys::Compare($1.Website, $2.Website)] of ((func (demo::MyDataItem^, demo::MyDataItem^) : (::system::Int32)))((cast (demo::MyDataItem^) <row1>), (cast (demo::MyDataItem^) <row2>));
                    }
                });
            }
            {
                (<precompile>21.EditorFactory = new (::presentation::controls::list::DataEditorFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridEditorTemplate*)
                {
                    {
                        return new (::demo::TextEditor*)();
                    }
                }));
            }
            {
                (<precompile>21.ValueProperty = func (<item> : ::system::Object, <value> : ::system::Object, <update> : ::system::Boolean) : (::system::Object)
                {
                    var itemToBind = (cast (demo::MyDataItem^) <item>);
                    if (<update>)
                    {
                        (itemToBind.Website = (cast (::system::String) <value>));
                        return null of (::system::Object);
                    }
                    else
                    {
                        return itemToBind.Website;
                    }
                });
            }
            {
                (<precompile>21.Size = 160 of (::system::Int32));
            }
            {
                (<precompile>21.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var itemToBind = (cast (demo::MyDataItem^) <item>);
                    return itemToBind.Website;
                });
            }
            {
                (<precompile>21.Text = "Website");
            }
            {
                var <collection> = dataGrid.Columns;
                <collection>.Add(<precompile>21);
            }
            {
                <precompile>14.AddChild(dataGrid.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>14);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    {
                        var <switch>0 : ::system::Int32 = comboView.SelectedIndex;
                        if ((<switch>0 == 0 of (::system::Int32)))
                        {
                            (dataGrid.View = BigIcon);
                        }
                        else if ((<switch>0 == 1 of (::system::Int32)))
                        {
                            (dataGrid.View = SmallIcon);
                        }
                        else if ((<switch>0 == 2 of (::system::Int32)))
                        {
                            (dataGrid.View = ListViewView::List);
                        }
                        else if ((<switch>0 == 3 of (::system::Int32)))
                        {
                            (dataGrid.View = Tile);
                        }
                        else if ((<switch>0 == 4 of (::system::Int32)))
                        {
                            (dataGrid.View = Information);
                        }
                        else if ((<switch>0 == 5 of (::system::Int32)))
                        {
                            (dataGrid.View = Detail);
                        }
                        else if ((<switch>0 == 6 of (::system::Int32)))
                        {
                            dataGrid.SetViewToDefault();
                        }
                    }
                };
                attach(comboView.SelectedIndexChanged, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (dataGrid.ItemSource is not null)
                    {
                        (dataGrid.ItemSource = null);
                    }
                    else
                    {
                        (dataGrid.ItemSource = self.tempData);
                    }
                };
                attach(<precompile>12.Clicked, <event-handler>);
            }
            {
                (<precompile>18.Filter = dateFilter.Filter);
            }
        }

        new ()
        {
        }
    }
}

================================(2/115)================================
module <instance>demo::DataGridTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(DataGridTabPageConstructor))
    class DataGridTabPage : ::presentation::controls::GuiTabPage, DataGridTabPageConstructor
    {
        var tempData : observe MyDataItem^[] = null;

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::DataGridTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-DataGridTabPage>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            (tempData = {new (MyDataItem^)("涼宮 春日", Female, Lime, (cast (DateTime) "1988-08-08 00:00:00.000"), "http://www.haruhi.tv/"); new (MyDataItem^)("キョン", Male, Black, (cast (DateTime) "1988-08-08 00:00:00.000"), "http://www.haruhi.tv/"); new (MyDataItem^)("长门 有希", Female, White, (cast (DateTime) "2000-08-06 00:00:00.000"), "http://www.haruhi.tv/"); new (MyDataItem^)("朝比奈 实玖瑠", Female, Red, (cast (DateTime) "1987-08-30 00:00:00.000"), "http://www.haruhi.tv/"); new (MyDataItem^)("古泉 一树", Male, Blue, (cast (DateTime) "1986-08-12 00:00:00.000"), "http://www.haruhi.tv/");});
            var largeImage = (cast (GuiImageData^) ResolveResource("res", "LargeImages/Task", true));
            var smallImage = (cast (GuiImageData^) ResolveResource("res", "SmallImages/Task", true));
            {
                var <for-enumerable>item = tempData of (::system::Enumerable^);
                var <for-enumerator>item = <for-enumerable>item.CreateEnumerator();
                while (<for-enumerator>item.Next())
                {
                    var item = (cast (::demo::MyDataItem^) <for-enumerator>item.GetCurrent());
                    {
                        (item.LargeImage = largeImage);
                        (item.SmallImage = smallImage);
                    }
                }
            }
            (dataGrid.ItemSource = tempData);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(3/115)================================
module <constructor>demo::ElementTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class ElementTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::ElementTabPage* = null of (::demo::ElementTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>19 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>20 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>21 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>22 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>23 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>24 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>25 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>26 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>27 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>28 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>29 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>30 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>31 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>32 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>33 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>34 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>35 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>36 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>37 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>38 : ::presentation::elements::GuiInnerShadowElement^ = null of (::presentation::elements::GuiInnerShadowElement^);

        @cpp:Protected
        var <precompile>39 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>40 : ::presentation::elements::GuiInnerShadowElement^ = null of (::presentation::elements::GuiInnerShadowElement^);

        @cpp:Protected
        var <precompile>41 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>42 : ::presentation::elements::GuiInnerShadowElement^ = null of (::presentation::elements::GuiInnerShadowElement^);

        @cpp:Protected
        var <precompile>43 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>44 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>45 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>46 : ::presentation::elements::GuiFocusRectangleElement^ = null of (::presentation::elements::GuiFocusRectangleElement^);

        @cpp:Protected
        var <precompile>47 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>48 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>49 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>50 : ::presentation::elements::GuiFocusRectangleElement^ = null of (::presentation::elements::GuiFocusRectangleElement^);

        @cpp:Protected
        var <precompile>51 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>52 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>53 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>54 : ::presentation::elements::GuiFocusRectangleElement^ = null of (::presentation::elements::GuiFocusRectangleElement^);

        @cpp:Protected
        func <demo-ElementTabPage>Initialize(<this> : ::demo::ElementTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "Elements");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 10 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(7, 7);
                <precompile>0.SetRowOption(0, {composeType : Absolute; absolute : 45;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 45;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Absolute; absolute : 45;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(3, {composeType : Absolute; absolute : 45;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(4, {composeType : Absolute; absolute : 45;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(5, {composeType : Absolute; absolute : 45;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(6, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Absolute; absolute : 100;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Absolute; absolute : 100;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Absolute; absolute : 45;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(3, {composeType : Absolute; absolute : 45;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(4, {composeType : Absolute; absolute : 100;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(5, {composeType : Absolute; absolute : 100;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(6, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 2, 1);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(2, 0, 2, 1);
            }
            (<precompile>4 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>4.Shape = {shapeType : Ellipse;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>4.Color = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(4, 0, 2, 1);
            }
            (<precompile>6 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>6.Shape = {shapeType : RoundRect; radiusX : 10; radiusY : 5;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>6.Color = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>5.OwnedElement = <precompile>6);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(0, 1, 2, 1);
            }
            (<precompile>8 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>8.Color = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>7.OwnedElement = <precompile>8);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>9.SetSite(2, 1, 2, 1);
            }
            (<precompile>10 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>10.Shape = {shapeType : Ellipse;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>10.Color = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>9.OwnedElement = <precompile>10);
            }
            {
                <precompile>0.AddChild(<precompile>9);
            }
            (<precompile>11 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>11.SetSite(4, 1, 2, 1);
            }
            (<precompile>12 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>12.Shape = {shapeType : RoundRect; radiusX : 10; radiusY : 5;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>12.Color = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>11.OwnedElement = <precompile>12);
            }
            {
                <precompile>0.AddChild(<precompile>11);
            }
            (<precompile>13 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>13.SetSite(0, 2, 1, 1);
            }
            (<precompile>14 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>14.Color2 = (cast (::presentation::Color) "#0000FF"));
            }
            {
                (<precompile>14.Color1 = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>14.Direction = Horizontal of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>13.OwnedElement = <precompile>14);
            }
            {
                <precompile>0.AddChild(<precompile>13);
            }
            (<precompile>15 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>15.SetSite(0, 3, 1, 1);
            }
            (<precompile>16 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>16.Color2 = (cast (::presentation::Color) "#0000FF"));
            }
            {
                (<precompile>16.Color1 = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>16.Direction = Vertical of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>15.OwnedElement = <precompile>16);
            }
            {
                <precompile>0.AddChild(<precompile>15);
            }
            (<precompile>17 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>17.SetSite(1, 2, 1, 1);
            }
            (<precompile>18 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>18.Color2 = (cast (::presentation::Color) "#0000FF"));
            }
            {
                (<precompile>18.Color1 = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>18.Direction = Slash of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>17.OwnedElement = <precompile>18);
            }
            {
                <precompile>0.AddChild(<precompile>17);
            }
            (<precompile>19 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>19.SetSite(1, 3, 1, 1);
            }
            (<precompile>20 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>20.Color2 = (cast (::presentation::Color) "#0000FF"));
            }
            {
                (<precompile>20.Color1 = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>20.Direction = Backslash of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>19.OwnedElement = <precompile>20);
            }
            {
                <precompile>0.AddChild(<precompile>19);
            }
            (<precompile>21 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>21.SetSite(2, 2, 1, 1);
            }
            (<precompile>22 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>22.Shape = {shapeType : Ellipse;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>22.Color2 = (cast (::presentation::Color) "#0000FF"));
            }
            {
                (<precompile>22.Color1 = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>22.Direction = Horizontal of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>21.OwnedElement = <precompile>22);
            }
            {
                <precompile>0.AddChild(<precompile>21);
            }
            (<precompile>23 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>23.SetSite(2, 3, 1, 1);
            }
            (<precompile>24 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>24.Shape = {shapeType : Ellipse;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>24.Color2 = (cast (::presentation::Color) "#0000FF"));
            }
            {
                (<precompile>24.Color1 = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>24.Direction = Vertical of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>23.OwnedElement = <precompile>24);
            }
            {
                <precompile>0.AddChild(<precompile>23);
            }
            (<precompile>25 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>25.SetSite(3, 2, 1, 1);
            }
            (<precompile>26 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>26.Shape = {shapeType : Ellipse;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>26.Color2 = (cast (::presentation::Color) "#0000FF"));
            }
            {
                (<precompile>26.Color1 = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>26.Direction = Slash of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>25.OwnedElement = <precompile>26);
            }
            {
                <precompile>0.AddChild(<precompile>25);
            }
            (<precompile>27 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>27.SetSite(3, 3, 1, 1);
            }
            (<precompile>28 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>28.Shape = {shapeType : Ellipse;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>28.Color2 = (cast (::presentation::Color) "#0000FF"));
            }
            {
                (<precompile>28.Color1 = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>28.Direction = Backslash of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>27.OwnedElement = <precompile>28);
            }
            {
                <precompile>0.AddChild(<precompile>27);
            }
            (<precompile>29 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>29.SetSite(4, 2, 1, 1);
            }
            (<precompile>30 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>30.Shape = {shapeType : RoundRect; radiusX : 10; radiusY : 5;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>30.Color2 = (cast (::presentation::Color) "#0000FF"));
            }
            {
                (<precompile>30.Color1 = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>30.Direction = Horizontal of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>29.OwnedElement = <precompile>30);
            }
            {
                <precompile>0.AddChild(<precompile>29);
            }
            (<precompile>31 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>31.SetSite(4, 3, 1, 1);
            }
            (<precompile>32 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>32.Shape = {shapeType : RoundRect; radiusX : 10; radiusY : 5;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>32.Color2 = (cast (::presentation::Color) "#0000FF"));
            }
            {
                (<precompile>32.Color1 = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>32.Direction = Vertical of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>31.OwnedElement = <precompile>32);
            }
            {
                <precompile>0.AddChild(<precompile>31);
            }
            (<precompile>33 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>33.SetSite(5, 2, 1, 1);
            }
            (<precompile>34 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>34.Shape = {shapeType : RoundRect; radiusX : 10; radiusY : 5;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>34.Color2 = (cast (::presentation::Color) "#0000FF"));
            }
            {
                (<precompile>34.Color1 = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>34.Direction = Slash of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>33.OwnedElement = <precompile>34);
            }
            {
                <precompile>0.AddChild(<precompile>33);
            }
            (<precompile>35 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>35.SetSite(5, 3, 1, 1);
            }
            (<precompile>36 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>36.Shape = {shapeType : RoundRect; radiusX : 10; radiusY : 5;} of (::presentation::elements::ElementShape));
            }
            {
                (<precompile>36.Color2 = (cast (::presentation::Color) "#0000FF"));
            }
            {
                (<precompile>36.Color1 = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>36.Direction = Backslash of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>35.OwnedElement = <precompile>36);
            }
            {
                <precompile>0.AddChild(<precompile>35);
            }
            (<precompile>37 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>37.SetSite(0, 4, 2, 1);
            }
            (<precompile>38 = new (::presentation::elements::GuiInnerShadowElement^)());
            {
                (<precompile>38.Thickness = 10 of (::system::Int32));
            }
            {
                (<precompile>38.Color = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>37.OwnedElement = <precompile>38);
            }
            {
                <precompile>0.AddChild(<precompile>37);
            }
            (<precompile>39 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>39.SetSite(2, 4, 2, 1);
            }
            (<precompile>40 = new (::presentation::elements::GuiInnerShadowElement^)());
            {
                (<precompile>40.Thickness = 20 of (::system::Int32));
            }
            {
                (<precompile>40.Color = (cast (::presentation::Color) "#FF00FF"));
            }
            {
                (<precompile>39.OwnedElement = <precompile>40);
            }
            {
                <precompile>0.AddChild(<precompile>39);
            }
            (<precompile>41 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>41.SetSite(4, 4, 2, 1);
            }
            (<precompile>42 = new (::presentation::elements::GuiInnerShadowElement^)());
            {
                (<precompile>42.Thickness = 30 of (::system::Int32));
            }
            {
                (<precompile>42.Color = (cast (::presentation::Color) "#00FFFF"));
            }
            {
                (<precompile>41.OwnedElement = <precompile>42);
            }
            {
                <precompile>0.AddChild(<precompile>41);
            }
            (<precompile>43 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>43.SetSite(0, 5, 2, 1);
            }
            (<precompile>44 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>44.Color = (cast (::presentation::Color) "#FFFF00"));
            }
            {
                (<precompile>43.OwnedElement = <precompile>44);
            }
            (<precompile>45 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>45.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            (<precompile>46 = new (::presentation::elements::GuiFocusRectangleElement^)());
            {
                (<precompile>45.OwnedElement = <precompile>46);
            }
            {
                <precompile>43.AddChild(<precompile>45);
            }
            {
                <precompile>0.AddChild(<precompile>43);
            }
            (<precompile>47 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>47.SetSite(2, 5, 2, 1);
            }
            (<precompile>48 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>48.Color = (cast (::presentation::Color) "#FF00FF"));
            }
            {
                (<precompile>47.OwnedElement = <precompile>48);
            }
            (<precompile>49 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>49.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            (<precompile>50 = new (::presentation::elements::GuiFocusRectangleElement^)());
            {
                (<precompile>49.OwnedElement = <precompile>50);
            }
            {
                <precompile>47.AddChild(<precompile>49);
            }
            {
                <precompile>0.AddChild(<precompile>47);
            }
            (<precompile>51 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>51.SetSite(4, 5, 2, 1);
            }
            (<precompile>52 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>52.Color = (cast (::presentation::Color) "#00FFFF"));
            }
            {
                (<precompile>51.OwnedElement = <precompile>52);
            }
            (<precompile>53 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>53.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            (<precompile>54 = new (::presentation::elements::GuiFocusRectangleElement^)());
            {
                (<precompile>53.OwnedElement = <precompile>54);
            }
            {
                <precompile>51.AddChild(<precompile>53);
            }
            {
                <precompile>0.AddChild(<precompile>51);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
        }

        new ()
        {
        }
    }
}

================================(4/115)================================
module <instance>demo::ElementTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(ElementTabPageConstructor))
    class ElementTabPage : ::presentation::controls::GuiTabPage, ElementTabPageConstructor
    {
        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::ElementTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-ElementTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(5/115)================================
module <constructor>demo::ListViewTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class ListViewTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::ListViewTabPage* = null of (::demo::ListViewTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiTextList* = null of (::presentation::controls::GuiTextList*);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>15 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>16 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>17 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>18 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>19 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>20 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>21 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>23 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>24 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var comboView : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        var listView : ::presentation::controls::GuiListView* = null of (::presentation::controls::GuiListView*);

        @cpp:Protected
        var bindableListView : ::presentation::controls::GuiBindableListView* = null of (::presentation::controls::GuiBindableListView*);

        @cpp:Protected
        func <demo-ListViewTabPage>Initialize(<this> : ::demo::ListViewTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "ListView");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 2);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiTextList*)(::presentation::theme::ThemeName::TextList));
            }
            (<precompile>3 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>3.Text = "BigIcon");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>3);
            }
            (<precompile>4 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>4.Text = "SmallIcon");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>4);
            }
            (<precompile>5 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>5.Text = "List");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>5);
            }
            (<precompile>6 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>6.Text = "Tile");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>6);
            }
            (<precompile>7 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>7.Text = "Information");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>7);
            }
            (<precompile>8 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>8.Text = "Detail");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>8);
            }
            {
                (<precompile>2.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>2.VerticalAlwaysVisible = false);
            }
            {
                (comboView = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, <precompile>2));
                <this>.SetNamedObject("comboView", comboView);
            }
            {
                (comboView.SelectedIndex = 5 of (::system::Int32));
            }
            (<precompile>9 = comboView.BoundsComposition);
            {
                (<precompile>9.PreferredMinSize = {x : 120;} of (::presentation::Size));
            }
            {
                (comboView.Alt = "V");
            }
            {
                <precompile>1.AddChild(comboView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>10 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>10.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>11 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>12 = <precompile>11.BoundsComposition);
            {
                (<precompile>11.Alt = "X");
            }
            {
                (<precompile>11.Text = "Rotate Item Source -->");
            }
            {
                <precompile>10.AddChild(<precompile>11.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>10);
            }
            (<precompile>13 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>13.SetSite(2, 0, 1, 1);
            }
            {
                (listView = new (::presentation::controls::GuiListView*)(::presentation::theme::ThemeName::ListView));
                <this>.SetNamedObject("listView", listView);
            }
            {
                var <collection> = listView.DataColumns;
                <collection>.Add(0 of (::system::Int32));
            }
            {
                var <collection> = listView.DataColumns;
                <collection>.Add(1 of (::system::Int32));
            }
            {
                var <collection> = listView.DataColumns;
                <collection>.Add(2 of (::system::Int32));
            }
            {
                (listView.HorizontalAlwaysVisible = false);
            }
            {
                (listView.VerticalAlwaysVisible = false);
            }
            (<precompile>18 = listView.BoundsComposition);
            {
                (<precompile>18.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (listView.Alt = "L");
            }
            (<precompile>14 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>14.Text = "Id");
            }
            {
                var <collection> = listView.Columns;
                <collection>.Add(<precompile>14);
            }
            (<precompile>15 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>15.Text = "Category");
            }
            {
                var <collection> = listView.Columns;
                <collection>.Add(<precompile>15);
            }
            (<precompile>16 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>16.Text = "Size");
            }
            {
                var <collection> = listView.Columns;
                <collection>.Add(<precompile>16);
            }
            (<precompile>17 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>17.Text = "File");
            }
            {
                var <collection> = listView.Columns;
                <collection>.Add(<precompile>17);
            }
            {
                <precompile>13.AddChild(listView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>13);
            }
            (<precompile>19 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>19.SetSite(2, 1, 1, 1);
            }
            {
                (bindableListView = new (::presentation::controls::GuiBindableListView*)(::presentation::theme::ThemeName::ListView));
                <this>.SetNamedObject("bindableListView", bindableListView);
            }
            {
                (bindableListView.LargeImageProperty = func (<item> : ::system::Object) : (::presentation::GuiImageData^)
                {
                    var itemToBind = (cast (ListViewItem^) <item>);
                    return itemToBind.LargeImage;
                });
            }
            {
                var <collection> = bindableListView.DataColumns;
                <collection>.Add(0 of (::system::Int32));
            }
            {
                var <collection> = bindableListView.DataColumns;
                <collection>.Add(1 of (::system::Int32));
            }
            {
                var <collection> = bindableListView.DataColumns;
                <collection>.Add(2 of (::system::Int32));
            }
            {
                (bindableListView.SmallImageProperty = func (<item> : ::system::Object) : (::presentation::GuiImageData^)
                {
                    var itemToBind = (cast (ListViewItem^) <item>);
                    return itemToBind.SmallImage;
                });
            }
            {
                (bindableListView.HorizontalAlwaysVisible = false);
            }
            {
                (bindableListView.VerticalAlwaysVisible = false);
            }
            (<precompile>24 = bindableListView.BoundsComposition);
            {
                (<precompile>24.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (bindableListView.Alt = "L");
            }
            (<precompile>20 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>20.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var itemToBind = (cast (ListViewItem^) <item>);
                    return itemToBind.Text;
                });
            }
            {
                (<precompile>20.Text = "Id");
            }
            {
                var <collection> = bindableListView.Columns;
                <collection>.Add(<precompile>20);
            }
            (<precompile>21 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>21.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var itemToBind = (cast (ListViewItem^) <item>);
                    return itemToBind.SubItems[0];
                });
            }
            {
                (<precompile>21.Text = "Category");
            }
            {
                var <collection> = bindableListView.Columns;
                <collection>.Add(<precompile>21);
            }
            (<precompile>22 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>22.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var itemToBind = (cast (ListViewItem^) <item>);
                    return itemToBind.SubItems[1];
                });
            }
            {
                (<precompile>22.Text = "Size");
            }
            {
                var <collection> = bindableListView.Columns;
                <collection>.Add(<precompile>22);
            }
            (<precompile>23 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>23.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var itemToBind = (cast (ListViewItem^) <item>);
                    return itemToBind.SubItems[2];
                });
            }
            {
                (<precompile>23.Text = "File");
            }
            {
                var <collection> = bindableListView.Columns;
                <collection>.Add(<precompile>23);
            }
            {
                <precompile>19.AddChild(bindableListView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>19);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    {
                        var <switch>1 : ::system::Int32 = comboView.SelectedIndex;
                        if ((<switch>1 == 0 of (::system::Int32)))
                        {
                            (listView.View = BigIcon);
                            (bindableListView.View = BigIcon);
                        }
                        else if ((<switch>1 == 1 of (::system::Int32)))
                        {
                            (listView.View = SmallIcon);
                            (bindableListView.View = SmallIcon);
                        }
                        else if ((<switch>1 == 2 of (::system::Int32)))
                        {
                            (listView.View = ListViewView::List);
                            (bindableListView.View = ListViewView::List);
                        }
                        else if ((<switch>1 == 3 of (::system::Int32)))
                        {
                            (listView.View = Tile);
                            (bindableListView.View = Tile);
                        }
                        else if ((<switch>1 == 4 of (::system::Int32)))
                        {
                            (listView.View = Information);
                            (bindableListView.View = Information);
                        }
                        else if ((<switch>1 == 5 of (::system::Int32)))
                        {
                            (listView.View = Detail);
                            (bindableListView.View = Detail);
                        }
                    }
                };
                attach(comboView.SelectedIndexChanged, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (bindableListView.ItemSource is not null)
                    {
                        (bindableListView.ItemSource = null);
                    }
                    else
                    {
                        (bindableListView.ItemSource = self.itemsToBind);
                    }
                };
                attach(<precompile>11.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(6/115)================================
module <instance>demo::ListViewTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(ListViewTabPageConstructor))
    class ListViewTabPage : ::presentation::controls::GuiTabPage, ListViewTabPageConstructor
    {
        var itemsToBind : observe ListViewItem^[] = {};

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::ListViewTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-ListViewTabPage>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            LoadListView(this, func (item : ListViewItem^) : (void)
            {
                listView.Items.Add(item);
            });
            LoadListView(this, func (item : ListViewItem^) : (void)
            {
                itemsToBind.Add(item);
            });
            (bindableListView.ItemSource = itemsToBind);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(7/115)================================
module <constructor>demo::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class MainWindowConstructor
    {
        @cpp:Protected
        var self : ::demo::MainWindow* = null of (::demo::MainWindow*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::demo::TextListTabPage* = null of (::demo::TextListTabPage*);

        @cpp:Protected
        var <precompile>6 : ::demo::ListViewTabPage* = null of (::demo::ListViewTabPage*);

        @cpp:Protected
        var <precompile>7 : ::demo::TreeViewTabPage* = null of (::demo::TreeViewTabPage*);

        @cpp:Protected
        var <precompile>8 : ::demo::DataGridTabPage* = null of (::demo::DataGridTabPage*);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>12 : ::demo::RefreshTextListTabPage* = null of (::demo::RefreshTextListTabPage*);

        @cpp:Protected
        var <precompile>13 : ::demo::RefreshBindableTextListTabPage* = null of (::demo::RefreshBindableTextListTabPage*);

        @cpp:Protected
        var <precompile>14 : ::demo::RefreshListViewTabPage* = null of (::demo::RefreshListViewTabPage*);

        @cpp:Protected
        var <precompile>15 : ::demo::RefreshBindableListViewTabPage* = null of (::demo::RefreshBindableListViewTabPage*);

        @cpp:Protected
        var <precompile>16 : ::demo::RefreshTreeViewTabPage* = null of (::demo::RefreshTreeViewTabPage*);

        @cpp:Protected
        var <precompile>17 : ::demo::RefreshBindableTreeViewTabPage* = null of (::demo::RefreshBindableTreeViewTabPage*);

        @cpp:Protected
        var <precompile>18 : ::demo::RefreshBindableDataGridTabPage* = null of (::demo::RefreshBindableDataGridTabPage*);

        @cpp:Protected
        var <precompile>19 : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

        @cpp:Protected
        var <precompile>20 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>21 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>22 : ::demo::RepeatTabPage* = null of (::demo::RepeatTabPage*);

        @cpp:Protected
        var <precompile>23 : ::demo::ResponsiveTabPage* = null of (::demo::ResponsiveTabPage*);

        @cpp:Protected
        var <precompile>24 : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

        @cpp:Protected
        var <precompile>25 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>26 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>27 : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

        @cpp:Protected
        var <precompile>28 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>29 : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

        @cpp:Protected
        var <precompile>30 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>31 : ::demo::TextBoxTabPage* = null of (::demo::TextBoxTabPage*);

        @cpp:Protected
        var <precompile>32 : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

        @cpp:Protected
        var <precompile>33 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>34 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>35 : ::demo::ElementTabPage* = null of (::demo::ElementTabPage*);

        @cpp:Protected
        var <precompile>36 : ::demo::AnimationTabPage* = null of (::demo::AnimationTabPage*);

        @cpp:Protected
        var <precompile>37 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

        @cpp:Protected
        var <precompile>38 : ::demo::LocalizedDialogsTabPage* = null of (::demo::LocalizedDialogsTabPage*);

        @cpp:Protected
        var checkFrame : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkMax : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkMin : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkBorder : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkSizeBox : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkIcon : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkTitle : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var editorRibbon : ::demo::DocumentEditorRibbon* = null of (::demo::DocumentEditorRibbon*);

        @cpp:Protected
        var editorToolstrip : ::demo::DocumentEditorToolstrip* = null of (::demo::DocumentEditorToolstrip*);

        @cpp:Protected
        var <precompile>39 : ::demo::DatePickerTabPage* = null of (::demo::DatePickerTabPage*);

        @cpp:Protected
        var <precompile>40 : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

        @cpp:Protected
        var <precompile>41 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>42 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>43 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>44 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>45 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>46 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>47 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>48 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>49 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>50 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>51 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-MainWindow>Initialize(<this> : ::demo::MainWindow*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.ControlThemeName = CustomFrameWindow of (::presentation::theme::ThemeName));
            }
            {
                (self.ClientSize = {x : 640; y : 480;} of (::presentation::Size));
            }
            (<precompile>51 = self.BoundsComposition);
            {
                (<precompile>51.PreferredMinSize = {x : 640; y : 480;} of (::presentation::Size));
            }
            {
                (self.Text = "Complete Control Showcase");
            }
            {
                (<precompile>0 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiTabPage*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>2.Alt = "L");
            }
            {
                (<precompile>2.Text = "List");
            }
            {
                (<precompile>3 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            (<precompile>5 = new (::demo::TextListTabPage*)());
            {
                (<precompile>5.Alt = "T");
            }
            {
                var <collection> = <precompile>3.Pages;
                <collection>.Add(<precompile>5);
            }
            (<precompile>6 = new (::demo::ListViewTabPage*)());
            {
                (<precompile>6.Alt = "L");
            }
            {
                var <collection> = <precompile>3.Pages;
                <collection>.Add(<precompile>6);
            }
            (<precompile>7 = new (::demo::TreeViewTabPage*)());
            {
                (<precompile>7.Alt = "T");
            }
            {
                var <collection> = <precompile>3.Pages;
                <collection>.Add(<precompile>7);
            }
            (<precompile>8 = new (::demo::DataGridTabPage*)());
            {
                (<precompile>8.Alt = "D");
            }
            {
                var <collection> = <precompile>3.Pages;
                <collection>.Add(<precompile>8);
            }
            (<precompile>4 = <precompile>3.BoundsComposition);
            {
                (<precompile>4.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                <precompile>2.AddChild(<precompile>3);
            }
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>2);
            }
            {
                (<precompile>9 = new (::presentation::controls::GuiTabPage*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>9.Alt = "L");
            }
            {
                (<precompile>9.Text = "Refresh List");
            }
            {
                (<precompile>10 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            (<precompile>12 = new (::demo::RefreshTextListTabPage*)());
            {
                (<precompile>12.Alt = "T");
            }
            {
                var <collection> = <precompile>10.Pages;
                <collection>.Add(<precompile>12);
            }
            (<precompile>13 = new (::demo::RefreshBindableTextListTabPage*)());
            {
                (<precompile>13.Alt = "BT");
            }
            {
                var <collection> = <precompile>10.Pages;
                <collection>.Add(<precompile>13);
            }
            (<precompile>14 = new (::demo::RefreshListViewTabPage*)());
            {
                (<precompile>14.Alt = "L");
            }
            {
                var <collection> = <precompile>10.Pages;
                <collection>.Add(<precompile>14);
            }
            (<precompile>15 = new (::demo::RefreshBindableListViewTabPage*)());
            {
                (<precompile>15.Alt = "BL");
            }
            {
                var <collection> = <precompile>10.Pages;
                <collection>.Add(<precompile>15);
            }
            (<precompile>16 = new (::demo::RefreshTreeViewTabPage*)());
            {
                (<precompile>16.Alt = "T");
            }
            {
                var <collection> = <precompile>10.Pages;
                <collection>.Add(<precompile>16);
            }
            (<precompile>17 = new (::demo::RefreshBindableTreeViewTabPage*)());
            {
                (<precompile>17.Alt = "BT");
            }
            {
                var <collection> = <precompile>10.Pages;
                <collection>.Add(<precompile>17);
            }
            (<precompile>18 = new (::demo::RefreshBindableDataGridTabPage*)());
            {
                (<precompile>18.Alt = "D");
            }
            {
                var <collection> = <precompile>10.Pages;
                <collection>.Add(<precompile>18);
            }
            (<precompile>11 = <precompile>10.BoundsComposition);
            {
                (<precompile>11.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                <precompile>9.AddChild(<precompile>10);
            }
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>9);
            }
            {
                (<precompile>19 = new (::presentation::controls::GuiTabPage*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>19.Alt = "L");
            }
            {
                (<precompile>19.Text = "Layout");
            }
            {
                (<precompile>20 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            (<precompile>22 = new (::demo::RepeatTabPage*)());
            {
                (<precompile>22.Alt = "R");
            }
            {
                var <collection> = <precompile>20.Pages;
                <collection>.Add(<precompile>22);
            }
            (<precompile>23 = new (::demo::ResponsiveTabPage*)());
            {
                (<precompile>23.Alt = "R");
            }
            {
                var <collection> = <precompile>20.Pages;
                <collection>.Add(<precompile>23);
            }
            (<precompile>21 = <precompile>20.BoundsComposition);
            {
                (<precompile>21.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                <precompile>19.AddChild(<precompile>20);
            }
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>19);
            }
            {
                (<precompile>24 = new (::presentation::controls::GuiTabPage*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>24.Alt = "L");
            }
            {
                (<precompile>24.Text = "Control");
            }
            {
                (<precompile>25 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            {
                (<precompile>27 = new (::presentation::controls::GuiTabPage*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>27.Alt = "D");
            }
            (editorRibbon = new (::demo::DocumentEditorRibbon*)());
            <this>.SetNamedObject("editorRibbon", editorRibbon);
            (<precompile>28 = editorRibbon.BoundsComposition);
            {
                (<precompile>28.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>27.AddChild(editorRibbon);
            }
            {
                var <collection> = <precompile>25.Pages;
                <collection>.Add(<precompile>27);
            }
            {
                (<precompile>29 = new (::presentation::controls::GuiTabPage*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>29.Alt = "D");
            }
            (editorToolstrip = new (::demo::DocumentEditorToolstrip*)());
            <this>.SetNamedObject("editorToolstrip", editorToolstrip);
            (<precompile>30 = editorToolstrip.BoundsComposition);
            {
                (<precompile>30.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>29.AddChild(editorToolstrip);
            }
            {
                var <collection> = <precompile>25.Pages;
                <collection>.Add(<precompile>29);
            }
            (<precompile>31 = new (::demo::TextBoxTabPage*)());
            {
                (<precompile>31.Alt = "T");
            }
            {
                var <collection> = <precompile>25.Pages;
                <collection>.Add(<precompile>31);
            }
            (<precompile>26 = <precompile>25.BoundsComposition);
            {
                (<precompile>26.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                <precompile>24.AddChild(<precompile>25);
            }
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>24);
            }
            {
                (<precompile>32 = new (::presentation::controls::GuiTabPage*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>32.Alt = "M");
            }
            {
                (<precompile>32.Text = "Misc");
            }
            {
                (<precompile>33 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            (<precompile>35 = new (::demo::ElementTabPage*)());
            {
                (<precompile>35.Alt = "E");
            }
            {
                var <collection> = <precompile>33.Pages;
                <collection>.Add(<precompile>35);
            }
            (<precompile>36 = new (::demo::AnimationTabPage*)());
            {
                (<precompile>36.Alt = "A");
            }
            {
                var <collection> = <precompile>33.Pages;
                <collection>.Add(<precompile>36);
            }
            (<precompile>37 = new (::demo::LocalizedStringsTabPage*)());
            {
                (<precompile>37.Alt = "L");
            }
            {
                var <collection> = <precompile>33.Pages;
                <collection>.Add(<precompile>37);
            }
            (<precompile>38 = new (::demo::LocalizedDialogsTabPage*)());
            {
                (<precompile>38.Alt = "L");
            }
            {
                var <collection> = <precompile>33.Pages;
                <collection>.Add(<precompile>38);
            }
            (<precompile>39 = new (::demo::DatePickerTabPage*)());
            {
                (<precompile>39.Alt = "D");
            }
            {
                var <collection> = <precompile>33.Pages;
                <collection>.Add(<precompile>39);
            }
            (<precompile>34 = <precompile>33.BoundsComposition);
            {
                (<precompile>34.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                <precompile>32.AddChild(<precompile>33);
            }
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>32);
            }
            {
                (<precompile>40 = new (::presentation::controls::GuiTabPage*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>40.Alt = "W");
            }
            {
                (<precompile>40.Text = "Window Manager");
            }
            (<precompile>41 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>41.Padding = 5 of (::system::Int32));
            }
            {
                (<precompile>41.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>41.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>41.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>42 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkFrame = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkFrame", checkFrame);
            }
            {
                (checkFrame.Text = "Customized Frame");
            }
            {
                <precompile>42.AddChild(checkFrame.BoundsComposition);
            }
            {
                <precompile>41.AddChild(<precompile>42);
            }
            (<precompile>43 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkMax = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkMax", checkMax);
            }
            {
                (checkMax.Text = "MaximizedBox");
            }
            {
                <precompile>43.AddChild(checkMax.BoundsComposition);
            }
            {
                <precompile>41.AddChild(<precompile>43);
            }
            (<precompile>44 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkMin = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkMin", checkMin);
            }
            {
                (checkMin.Text = "MinimizedBox");
            }
            {
                <precompile>44.AddChild(checkMin.BoundsComposition);
            }
            {
                <precompile>41.AddChild(<precompile>44);
            }
            (<precompile>45 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkBorder = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkBorder", checkBorder);
            }
            {
                (checkBorder.Text = "Border");
            }
            {
                <precompile>45.AddChild(checkBorder.BoundsComposition);
            }
            {
                <precompile>41.AddChild(<precompile>45);
            }
            (<precompile>46 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkSizeBox = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkSizeBox", checkSizeBox);
            }
            {
                (checkSizeBox.Text = "SizeBox");
            }
            {
                <precompile>46.AddChild(checkSizeBox.BoundsComposition);
            }
            {
                <precompile>41.AddChild(<precompile>46);
            }
            (<precompile>47 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkIcon = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkIcon", checkIcon);
            }
            {
                (checkIcon.Text = "IconVisible");
            }
            {
                <precompile>47.AddChild(checkIcon.BoundsComposition);
            }
            {
                <precompile>41.AddChild(<precompile>47);
            }
            (<precompile>48 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkTitle = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkTitle", checkTitle);
            }
            {
                (checkTitle.Text = "TitleBar");
            }
            {
                <precompile>48.AddChild(checkTitle.BoundsComposition);
            }
            {
                <precompile>41.AddChild(<precompile>48);
            }
            (<precompile>49 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>50 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>50.Text = "Open New Window");
            }
            {
                <precompile>49.AddChild(<precompile>50.BoundsComposition);
            }
            {
                <precompile>41.AddChild(<precompile>49);
            }
            {
                <precompile>40.ContainerComposition.AddChild(<precompile>41);
            }
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>40);
            }
            (<precompile>1 = <precompile>0.BoundsComposition);
            {
                (<precompile>1.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorRibbon* = null of (::demo::DocumentEditorRibbon*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (editorRibbon ?? null of (::demo::DocumentEditorRibbon*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorRibbon*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>27.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>27.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorToolstrip* = null of (::demo::DocumentEditorToolstrip*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (editorToolstrip ?? null of (::demo::DocumentEditorToolstrip*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorToolstrip*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>29.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>29.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::MainWindow* = null of (::demo::MainWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.CustomFrameEnabled == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::MainWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::MainWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkFrame.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkFrame.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkFrame.Selected = (self.ControlThemeName == ThemeName::CustomFrameWindow));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (checkFrame.Selected)
                    {
                        (self.ControlThemeName = CustomFrameWindow);
                    }
                    else
                    {
                        (self.ControlThemeName = SystemFrameWindow);
                    }
                };
                attach(checkFrame.SelectedChanged, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::MainWindow* = null of (::demo::MainWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.MaximizedBoxOption == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::MainWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::MainWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkMax.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkMax.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkMax.Selected = self.MaximizedBox);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::MainWindow* = null of (::demo::MainWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.MinimizedBoxOption == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::MainWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::MainWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkMin.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkMin.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkMin.Selected = self.MinimizedBox);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::MainWindow* = null of (::demo::MainWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.BorderOption == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::MainWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::MainWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkBorder.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkBorder.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkBorder.Selected = self.Border);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::MainWindow* = null of (::demo::MainWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.SizeBoxOption == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::MainWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::MainWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkSizeBox.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkSizeBox.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkSizeBox.Selected = self.SizeBox);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::MainWindow* = null of (::demo::MainWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.IconVisibleOption == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::MainWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::MainWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkIcon.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkIcon.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkIcon.Selected = self.IconVisible);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::MainWindow* = null of (::demo::MainWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.TitleBarOption == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::MainWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::MainWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkTitle.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkTitle.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkTitle.Selected = self.TitleBar);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var subWindow = new (SubWindow*)();
                    self.openedSubWindows.Add((cast (SubWindow^) subWindow));
                    subWindow.MoveToScreenCenter();
                    subWindow.ShowWithOwner(self);
                };
                attach(<precompile>50.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkMax ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.MaximizedBox;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.MaximizedBox = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkMin ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.MinimizedBox;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.MinimizedBox = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkSizeBox ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.SizeBox;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.SizeBox = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkIcon ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.IconVisible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.IconVisible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkBorder ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Border;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Border = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkTitle ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.TitleBar;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.TitleBar = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(8/115)================================
module <instance>demo::MainWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:File("MainWindow")
    @cpp:Friend(typeof(MainWindowConstructor))
    class MainWindow : ::presentation::controls::GuiWindow, MainWindowConstructor
    {
        var openedSubWindows : GuiWindow^[] = {};

        new* ()
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::MainWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-MainWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(9/115)================================
module <constructor>demo::RepeatTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class RepeatTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::RepeatTabPage* = null of (::demo::RepeatTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::GuiScrollContainer* = null of (::presentation::controls::GuiScrollContainer*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiRepeatStackComposition* = null of (::presentation::compositions::GuiRepeatStackComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::GuiScrollContainer* = null of (::presentation::controls::GuiScrollContainer*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiRepeatFlowComposition* = null of (::presentation::compositions::GuiRepeatFlowComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::GuiScrollContainer* = null of (::presentation::controls::GuiScrollContainer*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiSharedSizeRootComposition* = null of (::presentation::compositions::GuiSharedSizeRootComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiRepeatFlowComposition* = null of (::presentation::compositions::GuiRepeatFlowComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::compositions::GuiSharedSizeRootComposition* = null of (::presentation::compositions::GuiSharedSizeRootComposition*);

        @cpp:Protected
        var <precompile>19 : ::presentation::controls::GuiBindableTextList* = null of (::presentation::controls::GuiBindableTextList*);

        @cpp:Protected
        var <precompile>20 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>21 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::GuiScroll* = null of (::presentation::controls::GuiScroll*);

        @cpp:Protected
        var <precompile>23 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>24 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>25 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>26 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>27 : ::presentation::controls::GuiScroll* = null of (::presentation::controls::GuiScroll*);

        @cpp:Protected
        var <precompile>28 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>29 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>30 : ::presentation::controls::GuiScroll* = null of (::presentation::controls::GuiScroll*);

        @cpp:Protected
        var <precompile>31 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>32 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>33 : ::presentation::controls::GuiScroll* = null of (::presentation::controls::GuiScroll*);

        @cpp:Protected
        var <precompile>34 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var repeatStackTabPage : ::demo::EnglishNumbersControllerTabPage* = null of (::demo::EnglishNumbersControllerTabPage*);

        @cpp:Protected
        var repeatFlowTabPage : ::demo::EnglishNumbersControllerTabPage* = null of (::demo::EnglishNumbersControllerTabPage*);

        @cpp:Protected
        var sharedSizeFlowTabPage : ::demo::EnglishNumbersControllerTabPage* = null of (::demo::EnglishNumbersControllerTabPage*);

        @cpp:Protected
        var sharedSizeListTabPage : ::demo::EnglishNumbersControllerTabPage* = null of (::demo::EnglishNumbersControllerTabPage*);

        @cpp:Protected
        var hTracker : ::presentation::controls::GuiScroll* = null of (::presentation::controls::GuiScroll*);

        @cpp:Protected
        func <demo-RepeatTabPage>Initialize(<this> : ::demo::RepeatTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "Repeat");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(4, 3);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 20;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Absolute; absolute : 20;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(3, {composeType : Absolute; absolute : 20;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Absolute; absolute : 20;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Absolute; absolute : 20;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            (repeatStackTabPage = new (::demo::EnglishNumbersControllerTabPage*)());
            <this>.SetNamedObject("repeatStackTabPage", repeatStackTabPage);
            (<precompile>4 = repeatStackTabPage.ContentComposition);
            {
                (<precompile>5 = new (::presentation::controls::GuiScrollContainer*)(::presentation::theme::ThemeName::ScrollView));
            }
            {
                (<precompile>5.ExtendToFullWidth = true);
            }
            {
                (<precompile>5.HorizontalAlwaysVisible = false);
            }
            (<precompile>7 = <precompile>5.BoundsComposition);
            {
                (<precompile>7.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>6 = new (::presentation::compositions::GuiRepeatStackComposition*)());
            {
                (<precompile>6.ExtraMargin = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>6.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTemplate*)
                {
                    {
                        if (<viewModel> is (::demo::MyTextItem^))
                        {
                            return new (::demo::RepeatItemTemplate*)((cast (::demo::MyTextItem^) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            {
                (<precompile>6.Padding = 5 of (::system::Int32));
            }
            {
                (<precompile>6.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>6.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>5.ContainerComposition.AddChild(<precompile>6);
            }
            {
                <precompile>4.AddChild(<precompile>5.BoundsComposition);
            }
            {
                (repeatStackTabPage.Alt = "S");
            }
            {
                (repeatStackTabPage.Text = "RepeatStack");
            }
            {
                var <collection> = <precompile>2.Pages;
                <collection>.Add(repeatStackTabPage);
            }
            (repeatFlowTabPage = new (::demo::EnglishNumbersControllerTabPage*)());
            <this>.SetNamedObject("repeatFlowTabPage", repeatFlowTabPage);
            (<precompile>8 = repeatFlowTabPage.ContentComposition);
            {
                (<precompile>9 = new (::presentation::controls::GuiScrollContainer*)(::presentation::theme::ThemeName::ScrollView));
            }
            {
                (<precompile>9.ExtendToFullWidth = true);
            }
            {
                (<precompile>9.HorizontalAlwaysVisible = false);
            }
            (<precompile>11 = <precompile>9.BoundsComposition);
            {
                (<precompile>11.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>10 = new (::presentation::compositions::GuiRepeatFlowComposition*)());
            {
                (<precompile>10.ColumnPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>10.RowPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>10.ExtraMargin = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>10.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTemplate*)
                {
                    {
                        if (<viewModel> is (::demo::MyTextItem^))
                        {
                            return new (::demo::RepeatItemTemplate*)((cast (::demo::MyTextItem^) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            {
                (<precompile>10.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>10.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>9.ContainerComposition.AddChild(<precompile>10);
            }
            {
                <precompile>8.AddChild(<precompile>9.BoundsComposition);
            }
            {
                (repeatFlowTabPage.Alt = "F");
            }
            {
                (repeatFlowTabPage.Text = "RepeatFlow");
            }
            {
                var <collection> = <precompile>2.Pages;
                <collection>.Add(repeatFlowTabPage);
            }
            (sharedSizeFlowTabPage = new (::demo::EnglishNumbersControllerTabPage*)());
            <this>.SetNamedObject("sharedSizeFlowTabPage", sharedSizeFlowTabPage);
            (<precompile>12 = sharedSizeFlowTabPage.ContentComposition);
            {
                (<precompile>13 = new (::presentation::controls::GuiScrollContainer*)(::presentation::theme::ThemeName::ScrollView));
            }
            {
                (<precompile>13.ExtendToFullWidth = true);
            }
            {
                (<precompile>13.HorizontalAlwaysVisible = false);
            }
            (<precompile>16 = <precompile>13.BoundsComposition);
            {
                (<precompile>16.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>14 = new (::presentation::compositions::GuiSharedSizeRootComposition*)());
            {
                (<precompile>14.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>14.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>15 = new (::presentation::compositions::GuiRepeatFlowComposition*)());
            {
                (<precompile>15.ColumnPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>15.RowPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>15.ExtraMargin = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>15.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTemplate*)
                {
                    {
                        if (<viewModel> is (::demo::MyTextItem^))
                        {
                            return new (::demo::SharedSizeItemTemplate*)((cast (::demo::MyTextItem^) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            {
                (<precompile>15.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>15.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>14.AddChild(<precompile>15);
            }
            {
                <precompile>13.ContainerComposition.AddChild(<precompile>14);
            }
            {
                <precompile>12.AddChild(<precompile>13.BoundsComposition);
            }
            {
                (sharedSizeFlowTabPage.Alt = "F");
            }
            {
                (sharedSizeFlowTabPage.Text = "SharedSize (RepeatFlow)");
            }
            {
                var <collection> = <precompile>2.Pages;
                <collection>.Add(sharedSizeFlowTabPage);
            }
            (sharedSizeListTabPage = new (::demo::EnglishNumbersControllerTabPage*)());
            <this>.SetNamedObject("sharedSizeListTabPage", sharedSizeListTabPage);
            (<precompile>17 = sharedSizeListTabPage.ContentComposition);
            (<precompile>18 = new (::presentation::compositions::GuiSharedSizeRootComposition*)());
            {
                (<precompile>18.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>18.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (<precompile>19 = new (::presentation::controls::GuiBindableTextList*)(::presentation::theme::ThemeName::TextList));
            }
            {
                (<precompile>19.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>19.VerticalAlwaysVisible = false);
            }
            {
                (<precompile>19.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::MyTextItem^) <item>);
                    return item.Name;
                });
            }
            {
                (<precompile>19.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiListItemTemplate*)
                {
                    {
                        if (<viewModel> is (::demo::MyTextItem^))
                        {
                            return new (::demo::SharedSizeTextItemTemplate*)((cast (::demo::MyTextItem^) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            (<precompile>20 = <precompile>19.BoundsComposition);
            {
                (<precompile>20.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>18.AddChild(<precompile>19.BoundsComposition);
            }
            {
                <precompile>17.AddChild(<precompile>18);
            }
            {
                (sharedSizeListTabPage.Alt = "L");
            }
            {
                (sharedSizeListTabPage.Text = "SharedSize (TextList)");
            }
            {
                var <collection> = <precompile>2.Pages;
                <collection>.Add(sharedSizeListTabPage);
            }
            (<precompile>3 = <precompile>2.BoundsComposition);
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>21 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>21.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>22 = new (::presentation::controls::GuiScroll*)(::presentation::theme::ThemeName::HScroll));
            }
            {
                (<precompile>22.PageSize = 10 of (::system::Int32));
            }
            {
                (<precompile>22.TotalSize = 100 of (::system::Int32));
            }
            (<precompile>23 = <precompile>22.BoundsComposition);
            {
                (<precompile>23.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>22.Alt = "H");
            }
            {
                <precompile>21.AddChild(<precompile>22.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>21);
            }
            (<precompile>24 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>24.SetSite(2, 0, 1, 1);
            }
            {
                (hTracker = new (::presentation::controls::GuiScroll*)(::presentation::theme::ThemeName::HTracker));
                hTracker.SetPageSize(0);
                <this>.SetNamedObject("hTracker", hTracker);
            }
            {
                (hTracker.TotalSize = 10 of (::system::Int32));
            }
            (<precompile>25 = hTracker.BoundsComposition);
            {
                (<precompile>25.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (hTracker.Alt = "H");
            }
            {
                <precompile>24.AddChild(hTracker.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>24);
            }
            (<precompile>26 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>26.SetSite(3, 0, 1, 1);
            }
            {
                (<precompile>27 = new (::presentation::controls::GuiScroll*)(::presentation::theme::ThemeName::ProgressBar));
                <precompile>27.SetPageSize(0);
            }
            {
                (<precompile>27.TotalSize = 10 of (::system::Int32));
            }
            (<precompile>28 = <precompile>27.BoundsComposition);
            {
                (<precompile>28.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>26.AddChild(<precompile>27.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>26);
            }
            (<precompile>29 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>29.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>30 = new (::presentation::controls::GuiScroll*)(::presentation::theme::ThemeName::VScroll));
            }
            {
                (<precompile>30.PageSize = 10 of (::system::Int32));
            }
            {
                (<precompile>30.TotalSize = 50 of (::system::Int32));
            }
            (<precompile>31 = <precompile>30.BoundsComposition);
            {
                (<precompile>31.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>30.Alt = "V");
            }
            {
                <precompile>29.AddChild(<precompile>30.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>29);
            }
            (<precompile>32 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>32.SetSite(0, 2, 1, 1);
            }
            {
                (<precompile>33 = new (::presentation::controls::GuiScroll*)(::presentation::theme::ThemeName::VTracker));
                <precompile>33.SetPageSize(0);
            }
            {
                (<precompile>33.TotalSize = 5 of (::system::Int32));
            }
            (<precompile>34 = <precompile>33.BoundsComposition);
            {
                (<precompile>34.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>33.Alt = "V");
            }
            {
                <precompile>32.AddChild(<precompile>33.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>32);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                (<precompile>6.ItemSource = repeatStackTabPage.ItemsToBind);
            }
            {
                (<precompile>10.ItemSource = repeatFlowTabPage.ItemsToBind);
            }
            {
                (<precompile>15.ItemSource = sharedSizeFlowTabPage.ItemsToBind);
            }
            {
                (<precompile>19.ItemSource = sharedSizeListTabPage.ItemsToBind);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiScroll* = null of (::presentation::controls::GuiScroll*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Position of (::system::Int32);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (hTracker ?? null of (::presentation::controls::GuiScroll*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.PositionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.PositionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiScroll*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>27.Position;
                    var <new> = (cast (::system::Int32) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>27.Position = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(10/115)================================
module <instance>demo::RepeatTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(RepeatTabPageConstructor))
    class RepeatTabPage : ::presentation::controls::GuiTabPage, RepeatTabPageConstructor
    {
        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::RepeatTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-RepeatTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(11/115)================================
module <constructor>demo::SubWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class SubWindowConstructor
    {
        @cpp:Protected
        var self : ::demo::SubWindow* = null of (::demo::SubWindow*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var checkFrame : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkMax : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkMin : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkBorder : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkSizeBox : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkIcon : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var checkTitle : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        func <demo-SubWindow>Initialize(<this> : ::demo::SubWindow*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.ControlThemeName = CustomFrameWindow of (::presentation::theme::ThemeName));
            }
            {
                (self.ClientSize = {x : 240; y : 160;} of (::presentation::Size));
            }
            (<precompile>0 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>0.Padding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkFrame = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkFrame", checkFrame);
            }
            {
                (checkFrame.Text = "Customized Frame");
            }
            {
                <precompile>1.AddChild(checkFrame.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkMax = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkMax", checkMax);
            }
            {
                (checkMax.Text = "MaximizedBox");
            }
            {
                <precompile>2.AddChild(checkMax.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            (<precompile>3 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkMin = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkMin", checkMin);
            }
            {
                (checkMin.Text = "MinimizedBox");
            }
            {
                <precompile>3.AddChild(checkMin.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>4 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkBorder = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkBorder", checkBorder);
            }
            {
                (checkBorder.Text = "Border");
            }
            {
                <precompile>4.AddChild(checkBorder.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>4);
            }
            (<precompile>5 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkSizeBox = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkSizeBox", checkSizeBox);
            }
            {
                (checkSizeBox.Text = "SizeBox");
            }
            {
                <precompile>5.AddChild(checkSizeBox.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            (<precompile>6 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkIcon = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkIcon", checkIcon);
            }
            {
                (checkIcon.Text = "IconVisible");
            }
            {
                <precompile>6.AddChild(checkIcon.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>6);
            }
            (<precompile>7 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (checkTitle = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkTitle", checkTitle);
            }
            {
                (checkTitle.Text = "TitleBar");
            }
            {
                <precompile>7.AddChild(checkTitle.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>8 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>9 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>9.Text = "Open New Window");
            }
            {
                <precompile>8.AddChild(<precompile>9.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>8);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::SubWindow* = null of (::demo::SubWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.CustomFrameEnabled == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::SubWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::SubWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkFrame.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkFrame.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkFrame.Selected = (self.ControlThemeName == ThemeName::CustomFrameWindow));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (checkFrame.Selected)
                    {
                        (self.ControlThemeName = CustomFrameWindow);
                    }
                    else
                    {
                        (self.ControlThemeName = SystemFrameWindow);
                    }
                };
                attach(checkFrame.SelectedChanged, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::SubWindow* = null of (::demo::SubWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.MaximizedBoxOption == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::SubWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::SubWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkMax.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkMax.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkMax.Selected = self.MaximizedBox);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::SubWindow* = null of (::demo::SubWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.MinimizedBoxOption == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::SubWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::SubWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkMin.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkMin.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkMin.Selected = self.MinimizedBox);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::SubWindow* = null of (::demo::SubWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.BorderOption == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::SubWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::SubWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkBorder.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkBorder.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkBorder.Selected = self.Border);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::SubWindow* = null of (::demo::SubWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.SizeBoxOption == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::SubWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::SubWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkSizeBox.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkSizeBox.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkSizeBox.Selected = self.SizeBox);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::SubWindow* = null of (::demo::SubWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.IconVisibleOption == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::SubWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::SubWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkIcon.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkIcon.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkIcon.Selected = self.IconVisible);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::SubWindow* = null of (::demo::SubWindow*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.FrameConfig.TitleBarOption == BoolOption::Customizable) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::SubWindow*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FrameConfigChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FrameConfigChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::SubWindow*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = checkTitle.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (checkTitle.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (checkTitle.Selected = self.TitleBar);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var subWindow = new (SubWindow*)();
                    self.openedSubWindows.Add((cast (SubWindow^) subWindow));
                    subWindow.MoveToScreenCenter();
                    subWindow.ShowWithOwner(self);
                };
                attach(<precompile>9.Clicked, <event-handler>);
            }
            {
                (self.Text = Sys::LoremIpsumTitle(20));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkMax ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.MaximizedBox;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.MaximizedBox = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkMin ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.MinimizedBox;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.MinimizedBox = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkSizeBox ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.SizeBox;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.SizeBox = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkIcon ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.IconVisible;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.IconVisible = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkBorder ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Border;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Border = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkTitle ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.TitleBar;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.TitleBar = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(12/115)================================
module <instance>demo::SubWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(SubWindowConstructor))
    class SubWindow : ::presentation::controls::GuiWindow, SubWindowConstructor
    {
        var openedSubWindows : GuiWindow^[] = {};

        new* ()
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::SubWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-SubWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(13/115)================================
module <constructor>demo::TextListTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class TextListTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::TextListTabPage* = null of (::demo::TextListTabPage*);

        @cpp:Protected
        var textList : ::presentation::controls::GuiTextList* = null of (::presentation::controls::GuiTextList*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiTextList* = null of (::presentation::controls::GuiTextList*);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>19 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>20 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>21 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>23 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>24 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>25 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>26 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>27 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>28 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var <precompile>29 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>30 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>31 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var <precompile>32 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>33 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>34 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var <precompile>35 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>36 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>37 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var <precompile>38 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var mutexGroupController : ::presentation::controls::GuiSelectableButton::MutexGroupController* = null of (::presentation::controls::GuiSelectableButton::MutexGroupController*);

        @cpp:Protected
        var comboView : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        var bindableTextList : ::presentation::controls::GuiBindableTextList* = null of (::presentation::controls::GuiBindableTextList*);

        @cpp:Protected
        var <precompile>39 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>40 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>41 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-TextListTabPage>Initialize(<this> : ::demo::TextListTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "TextList");
            }
            (mutexGroupController = new (::presentation::controls::GuiSelectableButton::MutexGroupController*)());
            <this>.SetNamedObject("mutexGroupController", mutexGroupController);
            {
                self.AddComponent(mutexGroupController);
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 3);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 3);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiTextList*)(::presentation::theme::ThemeName::TextList));
            }
            (<precompile>3 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>3.Text = "Text");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>3);
            }
            (<precompile>4 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>4.Text = "Check");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>4);
            }
            (<precompile>5 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>5.Text = "Radio");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>5);
            }
            {
                (<precompile>2.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>2.VerticalAlwaysVisible = false);
            }
            {
                (comboView = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, <precompile>2));
                <this>.SetNamedObject("comboView", comboView);
            }
            {
                (comboView.SelectedIndex = 0 of (::system::Int32));
            }
            (<precompile>6 = comboView.BoundsComposition);
            {
                (<precompile>6.PreferredMinSize = {x : 120;} of (::presentation::Size));
            }
            {
                (comboView.Alt = "V");
            }
            {
                <precompile>1.AddChild(comboView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(1, 0, 1, 1);
            }
            {
                (textList = new (::presentation::controls::GuiTextList*)(::presentation::theme::ThemeName::TextList));
                <this>.SetNamedObject("textList", textList);
            }
            {
                (textList.HorizontalAlwaysVisible = false);
            }
            {
                (textList.VerticalAlwaysVisible = false);
            }
            (<precompile>8 = textList.BoundsComposition);
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (textList.Alt = "L");
            }
            {
                <precompile>7.AddChild(textList.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>9.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>10 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>39 = <precompile>10.BoundsComposition);
            {
                (<precompile>39.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : (-1);} of (::presentation::Margin));
            }
            {
                (<precompile>10.Text = "Operations");
            }
            (<precompile>11 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>11.Padding = 5 of (::system::Int32));
            }
            {
                (<precompile>11.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>11.AlignmentToParent = {left : 5; top : 0; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>11.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>12 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>13 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>14 = <precompile>13.BoundsComposition);
            {
                (<precompile>14.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>13.Alt = "A");
            }
            {
                (<precompile>13.Text = "Add 10 items");
            }
            {
                <precompile>12.AddChild(<precompile>13.BoundsComposition);
            }
            {
                <precompile>11.AddChild(<precompile>12);
            }
            (<precompile>15 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>16 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>17 = <precompile>16.BoundsComposition);
            {
                (<precompile>17.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>16.Alt = "O");
            }
            {
                (<precompile>16.Text = "Remove odd items");
            }
            {
                <precompile>15.AddChild(<precompile>16.BoundsComposition);
            }
            {
                <precompile>11.AddChild(<precompile>15);
            }
            (<precompile>18 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>19 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>20 = <precompile>19.BoundsComposition);
            {
                (<precompile>20.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>19.Alt = "E");
            }
            {
                (<precompile>19.Text = "Remove even items");
            }
            {
                <precompile>18.AddChild(<precompile>19.BoundsComposition);
            }
            {
                <precompile>11.AddChild(<precompile>18);
            }
            (<precompile>21 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>22 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>23 = <precompile>22.BoundsComposition);
            {
                (<precompile>23.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>22.Alt = "C");
            }
            {
                (<precompile>22.Text = "Clear");
            }
            {
                <precompile>21.AddChild(<precompile>22.BoundsComposition);
            }
            {
                <precompile>11.AddChild(<precompile>21);
            }
            (<precompile>24 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>25 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>26 = <precompile>25.BoundsComposition);
            {
                (<precompile>26.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>25.Alt = "X");
            }
            {
                (<precompile>25.Text = "Rotate Item Source -->");
            }
            {
                <precompile>24.AddChild(<precompile>25.BoundsComposition);
            }
            {
                <precompile>11.AddChild(<precompile>24);
            }
            (<precompile>27 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>28 = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
            }
            (<precompile>29 = <precompile>28.BoundsComposition);
            {
                (<precompile>29.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>28.Text = "Dummy");
            }
            {
                <precompile>27.AddChild(<precompile>28.BoundsComposition);
            }
            {
                <precompile>11.AddChild(<precompile>27);
            }
            (<precompile>30 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>31 = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
            }
            (<precompile>32 = <precompile>31.BoundsComposition);
            {
                (<precompile>32.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>31.Text = "Dummy");
            }
            {
                <precompile>30.AddChild(<precompile>31.BoundsComposition);
            }
            {
                <precompile>11.AddChild(<precompile>30);
            }
            (<precompile>33 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>34 = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::RadioButton));
            }
            (<precompile>35 = <precompile>34.BoundsComposition);
            {
                (<precompile>35.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>34.Text = "Dummy");
            }
            {
                <precompile>33.AddChild(<precompile>34.BoundsComposition);
            }
            {
                <precompile>11.AddChild(<precompile>33);
            }
            (<precompile>36 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>37 = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::RadioButton));
            }
            (<precompile>38 = <precompile>37.BoundsComposition);
            {
                (<precompile>38.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>37.Text = "Dummy");
            }
            {
                <precompile>36.AddChild(<precompile>37.BoundsComposition);
            }
            {
                <precompile>11.AddChild(<precompile>36);
            }
            {
                <precompile>10.ContainerComposition.AddChild(<precompile>11);
            }
            {
                <precompile>9.AddChild(<precompile>10.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>9);
            }
            (<precompile>40 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>40.SetSite(1, 2, 1, 1);
            }
            {
                (bindableTextList = new (::presentation::controls::GuiBindableTextList*)(::presentation::theme::ThemeName::TextList));
                <this>.SetNamedObject("bindableTextList", bindableTextList);
            }
            {
                (bindableTextList.CheckedProperty = func (<item> : ::system::Object, <value> : ::system::Boolean, <update> : ::system::Boolean) : (::system::Boolean)
                {
                    var item = (cast (demo::MyTextItem^) <item>);
                    if (<update>)
                    {
                        (item.Checked = <value>);
                        return false;
                    }
                    else
                    {
                        return item.Checked;
                    }
                });
            }
            {
                (bindableTextList.HorizontalAlwaysVisible = false);
            }
            {
                (bindableTextList.VerticalAlwaysVisible = false);
            }
            {
                (bindableTextList.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::MyTextItem^) <item>);
                    return item.Name;
                });
            }
            (<precompile>41 = bindableTextList.BoundsComposition);
            {
                (<precompile>41.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (bindableTextList.Alt = "B");
            }
            {
                <precompile>40.AddChild(bindableTextList.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>40);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    {
                        var <switch>2 : ::system::Int32 = comboView.SelectedIndex;
                        if ((<switch>2 == 0 of (::system::Int32)))
                        {
                            (textList.View = Text);
                            (bindableTextList.View = Text);
                        }
                        else if ((<switch>2 == 1 of (::system::Int32)))
                        {
                            (textList.View = Check);
                            (bindableTextList.View = Check);
                        }
                        else if ((<switch>2 == 2 of (::system::Int32)))
                        {
                            (textList.View = Radio);
                            (bindableTextList.View = Radio);
                        }
                    }
                };
                attach(comboView.SelectedIndexChanged, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    {
                        var <for-begin>i : ::system::Int32 = 0;
                        var <for-end>i : ::system::Int32 = 9;
                        var i = <for-begin>i;
                        while ((i <= <for-end>i))
                        {
                            {
                                var textItem = new (TextItem^)((cast (string) (self.counter + i)));
                                textList.Items.Add(textItem);
                            }
                            (i = (i + 1));
                        }
                    }
                    {
                        var <for-begin>i : ::system::Int32 = 0;
                        var <for-end>i : ::system::Int32 = 9;
                        var i = <for-begin>i;
                        while ((i <= <for-end>i))
                        {
                            {
                                var textItem = new (demo::MyTextItem^)();
                                (textItem.Name = (cast (string) (self.counter + i)));
                                self.itemsToBind.Add(textItem);
                            }
                            (i = (i + 1));
                        }
                    }
                    (self.counter = (self.counter + 10));
                };
                attach(<precompile>13.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    {
                        var i = 0;
                        while ((i < textList.Items.Count))
                        {
                            textList.Items.RemoveAt(i);
                            (i = (i + 1));
                        }
                    }
                    {
                        var i = 0;
                        while ((i < self.itemsToBind.Count))
                        {
                            self.itemsToBind.RemoveAt(i);
                            (i = (i + 1));
                        }
                    }
                };
                attach(<precompile>16.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    {
                        var i = 1;
                        while ((i < textList.Items.Count))
                        {
                            textList.Items.RemoveAt(i);
                            (i = (i + 1));
                        }
                    }
                    {
                        var i = 1;
                        while ((i < self.itemsToBind.Count))
                        {
                            self.itemsToBind.RemoveAt(i);
                            (i = (i + 1));
                        }
                    }
                };
                attach(<precompile>19.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    textList.Items.Clear();
                    self.itemsToBind.Clear();
                };
                attach(<precompile>22.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (bindableTextList.ItemSource is not null)
                    {
                        (bindableTextList.ItemSource = null);
                    }
                    else
                    {
                        (bindableTextList.ItemSource = self.itemsToBind);
                    }
                };
                attach(<precompile>25.Clicked, <event-handler>);
            }
            {
                (<precompile>34.GroupController = mutexGroupController);
            }
            {
                (<precompile>37.GroupController = mutexGroupController);
            }
            {
                (bindableTextList.ItemSource = self.itemsToBind);
            }
        }

        new ()
        {
        }
    }
}

================================(14/115)================================
module <instance>demo::TextListTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(TextListTabPageConstructor))
    class TextListTabPage : ::presentation::controls::GuiTabPage, TextListTabPageConstructor
    {
        var counter : int = 0;

        var itemsToBind : observe MyTextItem^[] = {};

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::TextListTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-TextListTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(15/115)================================
module <constructor>demo::TreeViewTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class TreeViewTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::TreeViewTabPage* = null of (::demo::TreeViewTabPage*);

        @cpp:Protected
        var treeView : ::presentation::controls::GuiTreeView* = null of (::presentation::controls::GuiTreeView*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>14 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>15 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>16 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>17 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>19 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>20 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>21 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>23 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>24 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>25 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>26 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>27 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>28 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>29 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>30 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>31 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>32 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>33 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>34 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>35 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>36 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>37 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>38 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var bindableTreeView : ::presentation::controls::GuiBindableTreeView* = null of (::presentation::controls::GuiBindableTreeView*);

        @cpp:Protected
        var <precompile>39 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>40 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>41 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>42 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>43 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>44 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>45 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>46 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>47 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>48 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>49 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>50 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>51 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>52 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        func <demo-TreeViewTabPage>Initialize(<this> : ::demo::TreeViewTabPage*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>30 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)()));
            (<precompile>31 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Plus_Blue", true)), "Blue+")));
            (<precompile>32 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/ArrowCurve_Blue_Left", true)), "<--")));
            {
                <precompile>31.Children.Add(<precompile>32);
            }
            (<precompile>33 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/ArrowCurve_Blue_Right", true)), "-->")));
            {
                <precompile>31.Children.Add(<precompile>33);
            }
            (<precompile>34 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/DownArrowLong_Blue", true)), "V")));
            {
                <precompile>31.Children.Add(<precompile>34);
            }
            (<precompile>35 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/UpArrowLong_Blue", true)), "^")));
            {
                <precompile>31.Children.Add(<precompile>35);
            }
            (<precompile>36 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/LeftArrowLong_Blue", true)), "<")));
            {
                <precompile>31.Children.Add(<precompile>36);
            }
            (<precompile>37 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/RightArrowLong_Blue", true)), ">")));
            {
                <precompile>31.Children.Add(<precompile>37);
            }
            {
                <precompile>30.Children.Add(<precompile>31);
            }
            (<precompile>38 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Plus_Green", true)), "Green+")));
            (<precompile>39 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/DownArrowLong_Green", true)), "V")));
            {
                <precompile>38.Children.Add(<precompile>39);
            }
            (<precompile>40 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/UpArrowLong_Green", true)), "^")));
            {
                <precompile>38.Children.Add(<precompile>40);
            }
            (<precompile>41 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/LeftArrowLong_Green", true)), "<")));
            {
                <precompile>38.Children.Add(<precompile>41);
            }
            (<precompile>42 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/RightArrowLong_Green", true)), ">")));
            {
                <precompile>38.Children.Add(<precompile>42);
            }
            {
                <precompile>30.Children.Add(<precompile>38);
            }
            (<precompile>43 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Plus_Grey", true)), "Grey+")));
            (<precompile>44 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/DownArrowLong_Grey", true)), "V")));
            {
                <precompile>43.Children.Add(<precompile>44);
            }
            (<precompile>45 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/UpArrowLong_Grey", true)), "^")));
            {
                <precompile>43.Children.Add(<precompile>45);
            }
            (<precompile>46 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/LeftArrowLong_Grey", true)), "<")));
            {
                <precompile>43.Children.Add(<precompile>46);
            }
            (<precompile>47 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/RightArrowLong_Grey", true)), ">")));
            {
                <precompile>43.Children.Add(<precompile>47);
            }
            {
                <precompile>30.Children.Add(<precompile>43);
            }
            (<precompile>48 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Plus_Orange", true)), "Orange+")));
            (<precompile>49 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/DownArrowLong_Orange", true)), "V")));
            {
                <precompile>48.Children.Add(<precompile>49);
            }
            (<precompile>50 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/UpArrowLong_Orange", true)), "^")));
            {
                <precompile>48.Children.Add(<precompile>50);
            }
            (<precompile>51 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/LeftArrowLong_Orange", true)), "<")));
            {
                <precompile>48.Children.Add(<precompile>51);
            }
            (<precompile>52 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/RightArrowLong_Orange", true)), ">")));
            {
                <precompile>48.Children.Add(<precompile>52);
            }
            {
                <precompile>30.Children.Add(<precompile>48);
            }
            {
                (self.nodesToBind = <precompile>30);
            }
            {
                (self.Text = "TreeView");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>3 = <precompile>2.BoundsComposition);
            {
                (<precompile>2.Alt = "X");
            }
            {
                (<precompile>2.Text = "Rotate Item Source -->");
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(1, 0, 1, 1);
            }
            {
                (treeView = new (::presentation::controls::GuiTreeView*)(::presentation::theme::ThemeName::TreeView));
                <this>.SetNamedObject("treeView", treeView);
            }
            {
                (treeView.HorizontalAlwaysVisible = false);
            }
            {
                (treeView.VerticalAlwaysVisible = false);
            }
            (<precompile>27 = treeView.BoundsComposition);
            {
                (<precompile>27.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (treeView.Alt = "L");
            }
            (<precompile>5 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Plus_Blue", true)), "Blue+")));
            (<precompile>6 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/ArrowCurve_Blue_Left", true)), "<--")));
            {
                <precompile>5.Children.Add(<precompile>6);
            }
            (<precompile>7 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/ArrowCurve_Blue_Right", true)), "-->")));
            {
                <precompile>5.Children.Add(<precompile>7);
            }
            (<precompile>8 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/DownArrowLong_Blue", true)), "V")));
            {
                <precompile>5.Children.Add(<precompile>8);
            }
            (<precompile>9 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/UpArrowLong_Blue", true)), "^")));
            {
                <precompile>5.Children.Add(<precompile>9);
            }
            (<precompile>10 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/LeftArrowLong_Blue", true)), "<")));
            {
                <precompile>5.Children.Add(<precompile>10);
            }
            (<precompile>11 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/RightArrowLong_Blue", true)), ">")));
            {
                <precompile>5.Children.Add(<precompile>11);
            }
            {
                treeView.Nodes.Children.Add(<precompile>5);
            }
            (<precompile>12 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Plus_Green", true)), "Green+")));
            (<precompile>13 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/DownArrowLong_Green", true)), "V")));
            {
                <precompile>12.Children.Add(<precompile>13);
            }
            (<precompile>14 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/UpArrowLong_Green", true)), "^")));
            {
                <precompile>12.Children.Add(<precompile>14);
            }
            (<precompile>15 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/LeftArrowLong_Green", true)), "<")));
            {
                <precompile>12.Children.Add(<precompile>15);
            }
            (<precompile>16 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/RightArrowLong_Green", true)), ">")));
            {
                <precompile>12.Children.Add(<precompile>16);
            }
            {
                treeView.Nodes.Children.Add(<precompile>12);
            }
            (<precompile>17 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Plus_Grey", true)), "Grey+")));
            (<precompile>18 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/DownArrowLong_Grey", true)), "V")));
            {
                <precompile>17.Children.Add(<precompile>18);
            }
            (<precompile>19 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/UpArrowLong_Grey", true)), "^")));
            {
                <precompile>17.Children.Add(<precompile>19);
            }
            (<precompile>20 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/LeftArrowLong_Grey", true)), "<")));
            {
                <precompile>17.Children.Add(<precompile>20);
            }
            (<precompile>21 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/RightArrowLong_Grey", true)), ">")));
            {
                <precompile>17.Children.Add(<precompile>21);
            }
            {
                treeView.Nodes.Children.Add(<precompile>17);
            }
            (<precompile>22 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Plus_Orange", true)), "Orange+")));
            (<precompile>23 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/DownArrowLong_Orange", true)), "V")));
            {
                <precompile>22.Children.Add(<precompile>23);
            }
            (<precompile>24 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/UpArrowLong_Orange", true)), "^")));
            {
                <precompile>22.Children.Add(<precompile>24);
            }
            (<precompile>25 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/LeftArrowLong_Orange", true)), "<")));
            {
                <precompile>22.Children.Add(<precompile>25);
            }
            (<precompile>26 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/RightArrowLong_Orange", true)), ">")));
            {
                <precompile>22.Children.Add(<precompile>26);
            }
            {
                treeView.Nodes.Children.Add(<precompile>22);
            }
            {
                <precompile>4.AddChild(treeView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>4);
            }
            (<precompile>28 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>28.SetSite(1, 1, 1, 1);
            }
            {
                (bindableTreeView = new (::presentation::controls::GuiBindableTreeView*)(::presentation::theme::ThemeName::TreeView));
                <this>.SetNamedObject("bindableTreeView", bindableTreeView);
            }
            {
                (bindableTreeView.ImageProperty = func (<item> : ::system::Object) : (::presentation::GuiImageData^)
                {
                    var nodeToBind = (cast (MemoryNodeProvider^) <item>);
                    return (nodeToBind.Data as (TreeViewItem^)).image;
                });
            }
            {
                (bindableTreeView.ChildrenProperty = func (<item> : ::system::Object) : (::system::Enumerable^)
                {
                    var nodeToBind = (cast (MemoryNodeProvider^) <item>);
                    return nodeToBind.Children;
                });
            }
            {
                (bindableTreeView.HorizontalAlwaysVisible = false);
            }
            {
                (bindableTreeView.VerticalAlwaysVisible = false);
            }
            {
                (bindableTreeView.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var nodeToBind = (cast (MemoryNodeProvider^) <item>);
                    return (nodeToBind.Data as (TreeViewItem^)).text;
                });
            }
            (<precompile>29 = bindableTreeView.BoundsComposition);
            {
                (<precompile>29.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (bindableTreeView.Alt = "L");
            }
            {
                <precompile>28.AddChild(bindableTreeView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>28);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (bindableTreeView.ItemSource is not null)
                    {
                        (bindableTreeView.ItemSource = null);
                    }
                    else
                    {
                        (bindableTreeView.ItemSource = self.nodesToBind);
                    }
                };
                attach(<precompile>2.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(16/115)================================
module <instance>demo::TreeViewTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(TreeViewTabPageConstructor))
    class TreeViewTabPage : ::presentation::controls::GuiTabPage, TreeViewTabPageConstructor
    {
        var nodesToBind : MemoryNodeProvider^ = null;

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::TreeViewTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-TreeViewTabPage>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            (bindableTreeView.ItemSource = nodesToBind);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(17/115)================================
module <constructor>demo::AnimationTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class AnimationTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::AnimationTabPage* = null of (::demo::AnimationTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::elements::GuiGradientBackgroundElement^ = null of (::presentation::elements::GuiGradientBackgroundElement^);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::elements::GuiInnerShadowElement^ = null of (::presentation::elements::GuiInnerShadowElement^);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::GuiTabPage* = null of (::presentation::controls::GuiTabPage*);

        @cpp:Protected
        var <precompile>19 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var animationBackground : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-AnimationTabPage>Initialize(<this> : ::demo::AnimationTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "Animation");
            }
            {
                (<precompile>0 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiTabPage*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>2.Text = "Gradient Animation");
            }
            (<precompile>3 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>3.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>3.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>3.SetRowsAndColumns(4, 3);
                <precompile>3.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetRowOption(3, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetColumnOption(1, {composeType : Absolute; absolute : 100;} of (::presentation::compositions::GuiCellOption));
                <precompile>3.SetColumnOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(0, 0, 4, 1);
            }
            (<precompile>5 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>5.PreferredMinSize = {x : 200; y : 200;} of (::presentation::Size));
            }
            (<precompile>6 = new (::presentation::elements::GuiGradientBackgroundElement^)());
            {
                (<precompile>6.Direction = Slash of (::presentation::elements::GuiGradientBackgroundElement::Direction));
            }
            {
                (<precompile>5.OwnedElement = <precompile>6);
            }
            (<precompile>7 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>7.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>8 = new (::presentation::elements::GuiInnerShadowElement^)());
            {
                (<precompile>7.OwnedElement = <precompile>8);
            }
            {
                <precompile>5.AddChild(<precompile>7);
            }
            {
                <precompile>4.AddChild(<precompile>5);
            }
            {
                <precompile>3.AddChild(<precompile>4);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>9.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>10 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>11 = <precompile>10.BoundsComposition);
            {
                (<precompile>11.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>10.Text = "Dark");
            }
            {
                <precompile>9.AddChild(<precompile>10.BoundsComposition);
            }
            {
                <precompile>3.AddChild(<precompile>9);
            }
            (<precompile>12 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>12.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>13 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>14 = <precompile>13.BoundsComposition);
            {
                (<precompile>14.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>13.Text = "Light");
            }
            {
                <precompile>12.AddChild(<precompile>13.BoundsComposition);
            }
            {
                <precompile>3.AddChild(<precompile>12);
            }
            (<precompile>15 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>15.SetSite(2, 1, 1, 1);
            }
            {
                (<precompile>16 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>17 = <precompile>16.BoundsComposition);
            {
                (<precompile>17.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>16.Text = "Sink");
            }
            {
                <precompile>15.AddChild(<precompile>16.BoundsComposition);
            }
            {
                <precompile>3.AddChild(<precompile>15);
            }
            {
                <precompile>2.ContainerComposition.AddChild(<precompile>3);
            }
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>2);
            }
            {
                (<precompile>18 = new (::presentation::controls::GuiTabPage*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>18.Text = "Complex Animation");
            }
            (animationBackground = new (::presentation::compositions::GuiBoundsComposition*)());
            <this>.SetNamedObject("animationBackground", animationBackground);
            {
                (animationBackground.PreferredMinSize = {x : 200; y : 200;} of (::presentation::Size));
            }
            {
                (animationBackground.AlignmentToParent = {left : 10; top : 10; right : (-1); bottom : (-1);} of (::presentation::Margin));
            }
            (<precompile>19 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>19.Color = (cast (::presentation::Color) "#FFC929"));
            }
            {
                (animationBackground.OwnedElement = <precompile>19);
            }
            {
                <precompile>18.ContainerComposition.AddChild(animationBackground);
            }
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>18);
            }
            (<precompile>1 = <precompile>0.BoundsComposition);
            {
                (<precompile>1.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::ColorAnimation^ = null of (::demo::ColorAnimation^);

                    var <bind-cache>1 : ::demo::ColorDef^ = null of (::demo::ColorDef^);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>1.Top of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        if (<bind-handler>1_0 is not null)
                        {
                            detach(<bind-cache>1.TopChanged, <bind-handler>1_0);
                            (<bind-handler>1_0 = null);
                        }
                        (<bind-cache>1 = (<bind-cache>0.Current ?? null of (::demo::ColorDef^)));
                        (<bind-handler>1_0 = (attach(<bind-cache>1.TopChanged, <bind-callback>1_0) ?? null));
                        <bind-activator>();
                    }

                    func <bind-callback>1_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self.gradientColorDef ?? null of (::demo::ColorAnimation^)));
                            (<bind-cache>1 = (<bind-cache>0.Current ?? null of (::demo::ColorDef^)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CurrentChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.TopChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CurrentChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.TopChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::ColorAnimation^));
                            (<bind-cache>1 = null of (::demo::ColorDef^));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Color1;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Color1 = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::ColorAnimation^ = null of (::demo::ColorAnimation^);

                    var <bind-cache>1 : ::demo::ColorDef^ = null of (::demo::ColorDef^);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>1.Bottom of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        if (<bind-handler>1_0 is not null)
                        {
                            detach(<bind-cache>1.BottomChanged, <bind-handler>1_0);
                            (<bind-handler>1_0 = null);
                        }
                        (<bind-cache>1 = (<bind-cache>0.Current ?? null of (::demo::ColorDef^)));
                        (<bind-handler>1_0 = (attach(<bind-cache>1.BottomChanged, <bind-callback>1_0) ?? null));
                        <bind-activator>();
                    }

                    func <bind-callback>1_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self.gradientColorDef ?? null of (::demo::ColorAnimation^)));
                            (<bind-cache>1 = (<bind-cache>0.Current ?? null of (::demo::ColorDef^)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CurrentChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.BottomChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CurrentChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.BottomChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::ColorAnimation^));
                            (<bind-cache>1 = null of (::demo::ColorDef^));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Color2;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Color2 = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::ColorAnimation^ = null of (::demo::ColorAnimation^);

                    var <bind-cache>1 : ::demo::ColorDef^ = null of (::demo::ColorDef^);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>1.Shadow of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        if (<bind-handler>1_0 is not null)
                        {
                            detach(<bind-cache>1.ShadowChanged, <bind-handler>1_0);
                            (<bind-handler>1_0 = null);
                        }
                        (<bind-cache>1 = (<bind-cache>0.Current ?? null of (::demo::ColorDef^)));
                        (<bind-handler>1_0 = (attach(<bind-cache>1.ShadowChanged, <bind-callback>1_0) ?? null));
                        <bind-activator>();
                    }

                    func <bind-callback>1_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self.gradientColorDef ?? null of (::demo::ColorAnimation^)));
                            (<bind-cache>1 = (<bind-cache>0.Current ?? null of (::demo::ColorDef^)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CurrentChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.ShadowChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CurrentChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.ShadowChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::ColorAnimation^));
                            (<bind-cache>1 = null of (::demo::ColorDef^));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::ColorAnimation^ = null of (::demo::ColorAnimation^);

                    var <bind-cache>1 : ::demo::ColorDef^ = null of (::demo::ColorDef^);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>1.Thickness of (::system::Int32);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        if (<bind-handler>1_0 is not null)
                        {
                            detach(<bind-cache>1.ThicknessChanged, <bind-handler>1_0);
                            (<bind-handler>1_0 = null);
                        }
                        (<bind-cache>1 = (<bind-cache>0.Current ?? null of (::demo::ColorDef^)));
                        (<bind-handler>1_0 = (attach(<bind-cache>1.ThicknessChanged, <bind-callback>1_0) ?? null));
                        <bind-activator>();
                    }

                    func <bind-callback>1_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self.gradientColorDef ?? null of (::demo::ColorAnimation^)));
                            (<bind-cache>1 = (<bind-cache>0.Current ?? null of (::demo::ColorDef^)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CurrentChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.ThicknessChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CurrentChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.ThicknessChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::ColorAnimation^));
                            (<bind-cache>1 = null of (::demo::ColorDef^));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.Thickness;
                    var <new> = (cast (::system::Int32) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.Thickness = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.PerformGradientAnimation(ColorDef::Dark());
                };
                attach(<precompile>10.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.PerformGradientAnimation(ColorDef::Light());
                };
                attach(<precompile>13.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.PerformGradientAnimation(ColorDef::Sink());
                };
                attach(<precompile>16.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(18/115)================================
module <instance>demo::AnimationTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(AnimationTabPageConstructor))
    class AnimationTabPage : ::presentation::controls::GuiTabPage, AnimationTabPageConstructor
    {
        @cpp:Private
        static func BallAnimation(container : GuiBoundsComposition*, ball : GuiBoundsComposition*) : (IGuiAnimation^)
        {
            return IGuiAnimation::CreateAnimation(func (time : UInt64) : (void)
            {
                var circleRatio = G(((cast (double) time) / 2000));
                var angle = (((circleRatio * Math::Pi()) * 2) + (Math::Pi() * 1.5));
                var sin = Math::Sin(angle);
                var cos = Math::Cos(angle);
                var cx = ((container.CachedBounds.x2 - container.CachedBounds.x1) / 2);
                var cy = ((container.CachedBounds.y2 - container.CachedBounds.y1) / 2);
                var radiusBall = ((ball.CachedBounds.x2 - ball.CachedBounds.x1) / 2);
                var radiusOrbit = (Math::Min(cx, cy) - radiusBall);
                var x = (cast (int) Math::Round(((cos * radiusOrbit) + cx)));
                var y = (cast (int) Math::Round(((sin * radiusOrbit) + cx)));
                (ball.AlignmentToParent = {left : (x - radiusBall); top : (y - radiusBall); right : (-1); bottom : (-1);});
                var alpha = 1.0;
                if ((circleRatio < 0.05))
                {
                    (alpha = (circleRatio * 20));
                }
                else if ((circleRatio > 0.95))
                {
                    (alpha = ((1 - circleRatio) * 20));
                }
                var element = (cast (SolidBackground^) ball.OwnedElement);
                var color = element.Color;
                (element.Color = {r : color.r; g : color.g; b : color.b; a : (cast (UInt8) Math::Round((alpha * 255)));});
                if ((!ball.Visible))
                {
                    (ball.Visible = true);
                }
            }, (cast (UInt64) 2000));
        }

        @cpp:Private
        static func BallAnimationWithDelay(container : GuiBoundsComposition*, ball : GuiBoundsComposition*, delay : int) : (IGuiAnimation^)
        {
            return ::presentation::controls::IGuiAnimationCoroutine::Create(func (<co-impl> : ::presentation::controls::IGuiAnimationCoroutine::IImpl*) : (::system::Coroutine^)
            {
                return new (::system::Coroutine^)
                {
                    var <co-state> : ::system::Int32 = 0;

                    var <co-state-before-pause> : ::system::Int32 = (-1);

                    @cpp:Private
                    var <prop>Failure : ::system::Exception^ = null;

                    override func GetFailure() : (::system::Exception^)
                    {
                        return <prop>Failure;
                    }

                    @cpp:Protected
                    func SetFailure(<value> : ::system::Exception^) : (void)
                    {
                        (<prop>Failure = <value>);
                    }

                    @cpp:Private
                    var <prop>Status : ::system::CoroutineStatus = Waiting;

                    override func GetStatus() : (::system::CoroutineStatus)
                    {
                        return <prop>Status;
                    }

                    @cpp:Protected
                    func SetStatus(<value> : ::system::CoroutineStatus) : (void)
                    {
                        (<prop>Status = <value>);
                    }

                    override func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
                    {
                        if ((Status != ::system::CoroutineStatus::Waiting))
                        {
                            raise "Resume should be called only when the coroutine is in the waiting status.";
                        }
                        SetStatus(Executing);
                        try
                        {
                            if ((<co-state-before-pause> != (-1)))
                            {
                                if (<co-result> is null)
                                {
                                    (<co-state-before-pause> = (-1));
                                }
                                else if (<co-result>.Failure is null)
                                {
                                    (<co-state-before-pause> = (-1));
                                }
                                else
                                {
                                    {
                                        (<co-state-before-pause> = (-1));
                                        raise <co-result>.Failure;
                                    }
                                }
                            }
                            while (true)
                            {
                                if ((<co-state> == 0))
                                {
                                    SetStatus(Waiting);
                                    (<co-state-before-pause> = <co-state>);
                                    (<co-state> = 2);
                                    {
                                        ::presentation::controls::IGuiAnimationCoroutine::WaitAndPause(<co-impl>, (cast (UInt64) delay));
                                    }
                                    return;
                                }
                                if ((<co-state> == 1))
                                {
                                    if (<co-result> is not null)
                                    {
                                        if (<co-result>.Failure is not null)
                                        {
                                            raise <co-result>.Failure;
                                        }
                                    }
                                    (ball.Visible = false);
                                    SetStatus(Stopped);
                                    return;
                                }
                                if ((<co-state> == 2))
                                {
                                    if (<co-result> is not null)
                                    {
                                        if (<co-result>.Failure is not null)
                                        {
                                            raise <co-result>.Failure;
                                        }
                                    }
                                    (<co-state> = 3);
                                    continue;
                                }
                                if ((<co-state> == 3))
                                {
                                    SetStatus(Waiting);
                                    (<co-state-before-pause> = <co-state>);
                                    (<co-state> = 1);
                                    {
                                        ::presentation::controls::IGuiAnimationCoroutine::PlayAndWaitAndPause(<co-impl>, BallAnimation(container, ball));
                                    }
                                    return;
                                }
                            }
                        }
                        catch (<co-ex>)
                        {
                            SetFailure(<co-ex>);
                            SetStatus(Stopped);
                            if (<raise-exception>)
                            {
                                raise;
                            }
                        }
                    }
                };
            });
        }

        @cpp:Private
        static func WaitingAnimation(container : GuiBoundsComposition*) : (IGuiAnimation^)
        {
            return ::presentation::controls::IGuiAnimationCoroutine::Create(func (<co-impl> : ::presentation::controls::IGuiAnimationCoroutine::IImpl*) : (::system::Coroutine^)
            {
                return new (::system::Coroutine^)
                {
                    var <co0-for-begin>i : ::system::Int32 = 0 of (::system::Int32);

                    var <co1-for-end>i : ::system::Int32 = 0 of (::system::Int32);

                    var <co2>i : ::system::Int32 = 0 of (::system::Int32);

                    var <co3>balls : ::presentation::compositions::GuiBoundsComposition*[] = null of (::presentation::compositions::GuiBoundsComposition*[]);

                    var <co-state> : ::system::Int32 = 0;

                    var <co-state-before-pause> : ::system::Int32 = (-1);

                    @cpp:Private
                    var <prop>Failure : ::system::Exception^ = null;

                    override func GetFailure() : (::system::Exception^)
                    {
                        return <prop>Failure;
                    }

                    @cpp:Protected
                    func SetFailure(<value> : ::system::Exception^) : (void)
                    {
                        (<prop>Failure = <value>);
                    }

                    @cpp:Private
                    var <prop>Status : ::system::CoroutineStatus = Waiting;

                    override func GetStatus() : (::system::CoroutineStatus)
                    {
                        return <prop>Status;
                    }

                    @cpp:Protected
                    func SetStatus(<value> : ::system::CoroutineStatus) : (void)
                    {
                        (<prop>Status = <value>);
                    }

                    override func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
                    {
                        if ((Status != ::system::CoroutineStatus::Waiting))
                        {
                            raise "Resume should be called only when the coroutine is in the waiting status.";
                        }
                        SetStatus(Executing);
                        try
                        {
                            if ((<co-state-before-pause> != (-1)))
                            {
                                if (<co-result> is null)
                                {
                                    (<co-state-before-pause> = (-1));
                                }
                                else if (<co-result>.Failure is null)
                                {
                                    (<co-state-before-pause> = (-1));
                                }
                                else
                                {
                                    {
                                        (<co-state-before-pause> = (-1));
                                        raise <co-result>.Failure;
                                    }
                                }
                            }
                            while (true)
                            {
                                if ((<co-state> == 0))
                                {
                                    (<co3>balls = {} of (GuiBoundsComposition*[]));
                                    {
                                        var <for-begin>i : ::system::Int32 = 0;
                                        var <for-end>i : ::system::Int32 = (8 - 1);
                                        var i = <for-begin>i;
                                        while ((i <= <for-end>i))
                                        {
                                            {
                                                var ball = new (GuiBoundsComposition*)();
                                                <co3>balls.Add(ball);
                                                (ball.Visible = false);
                                                (ball.PreferredMinSize = {x : 16; y : 16;});
                                                var element = new (SolidBackground^)();
                                                (element.Shape = {shapeType : Ellipse;});
                                                (element.Color = (cast (Color) "#3F48CC"));
                                                (ball.OwnedElement = element);
                                                container.AddChild(ball);
                                            }
                                            (i = (i + 1));
                                        }
                                    }
                                    if (true)
                                    {
                                        (<co-state> = 3);
                                        continue;
                                    }
                                    (<co-state> = 1);
                                    continue;
                                }
                                if ((<co-state> == 1))
                                {
                                    SetStatus(Stopped);
                                    return;
                                }
                                if ((<co-state> == 2))
                                {
                                    if (<co-result> is not null)
                                    {
                                        if (<co-result>.Failure is not null)
                                        {
                                            raise <co-result>.Failure;
                                        }
                                    }
                                    if (true)
                                    {
                                        (<co-state> = 3);
                                        continue;
                                    }
                                    (<co-state> = 1);
                                    continue;
                                }
                                if ((<co-state> == 3))
                                {
                                    SetStatus(Waiting);
                                    (<co-state-before-pause> = <co-state>);
                                    (<co-state> = 4);
                                    {
                                        ::presentation::controls::IGuiAnimationCoroutine::WaitAndPause(<co-impl>, (cast (UInt64) 500));
                                    }
                                    return;
                                }
                                if ((<co-state> == 4))
                                {
                                    if (<co-result> is not null)
                                    {
                                        if (<co-result>.Failure is not null)
                                        {
                                            raise <co-result>.Failure;
                                        }
                                    }
                                    (<co0-for-begin>i = 0);
                                    (<co1-for-end>i = (<co3>balls.Count - 1));
                                    (<co2>i = <co0-for-begin>i);
                                    if ((<co2>i <= <co1-for-end>i))
                                    {
                                        (<co-state> = 6);
                                        continue;
                                    }
                                    (<co-state> = 7);
                                    continue;
                                }
                                if ((<co-state> == 5))
                                {
                                    if (<co-result> is not null)
                                    {
                                        if (<co-result>.Failure is not null)
                                        {
                                            raise <co-result>.Failure;
                                        }
                                    }
                                    (<co2>i = (<co2>i + 1));
                                    if ((<co2>i <= <co1-for-end>i))
                                    {
                                        (<co-state> = 6);
                                        continue;
                                    }
                                    (<co-state> = 7);
                                    continue;
                                }
                                if ((<co-state> == 6))
                                {
                                    SetStatus(Waiting);
                                    (<co-state-before-pause> = <co-state>);
                                    (<co-state> = 5);
                                    {
                                        ::presentation::controls::IGuiAnimationCoroutine::PlayInGroupAndPause(<co-impl>, BallAnimationWithDelay(container, <co3>balls[<co2>i], (150 * <co2>i)), 0);
                                    }
                                    return;
                                }
                                if ((<co-state> == 7))
                                {
                                    SetStatus(Waiting);
                                    (<co-state-before-pause> = <co-state>);
                                    (<co-state> = 2);
                                    {
                                        ::presentation::controls::IGuiAnimationCoroutine::WaitForGroupAndPause(<co-impl>, 0);
                                    }
                                    return;
                                }
                            }
                        }
                        catch (<co-ex>)
                        {
                            SetFailure(<co-ex>);
                            SetStatus(Stopped);
                            if (<raise-exception>)
                            {
                                raise;
                            }
                        }
                    }
                };
            });
        }

        @cpp:Private
        var gradientColorDef : ColorAnimation^ = new (ColorAnimation^)(ColorDef::Dark());

        @cpp:Private
        var lastGradientAnimation : IGuiAnimation^ = null;

        func PerformGradientAnimation(target : ColorDef^) : (void)
        {
            KillAnimation(lastGradientAnimation);
            (lastGradientAnimation = gradientColorDef.CreateAnimation(target, (cast (UInt64) 500)));
            AddAnimation(lastGradientAnimation);
        }

        var counter : int = 0;

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::AnimationTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-AnimationTabPage>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            self.AddAnimation(WaitingAnimation(animationBackground));
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(19/115)================================
module <animation>demo::ColorAnimation;

namespace demo
{
    class ColorAnimation
    {
        @cpp:Private
        var <prop>Begin : ::demo::ColorDef^ = null of (::demo::ColorDef^);

        func GetBegin() : (::demo::ColorDef^)
        {
            return <prop>Begin;
        }

        func SetBegin(<value> : ::demo::ColorDef^) : (void)
        {
            if ((<prop>Begin != <value>))
            {
                (<prop>Begin = <value>);
                BeginChanged();
            }
        }

        event BeginChanged();

        prop Begin : ::demo::ColorDef^{GetBegin, SetBegin : BeginChanged}

        @cpp:Private
        var <prop>End : ::demo::ColorDef^ = null of (::demo::ColorDef^);

        func GetEnd() : (::demo::ColorDef^)
        {
            return <prop>End;
        }

        func SetEnd(<value> : ::demo::ColorDef^) : (void)
        {
            if ((<prop>End != <value>))
            {
                (<prop>End = <value>);
                EndChanged();
            }
        }

        event EndChanged();

        prop End : ::demo::ColorDef^{GetEnd, SetEnd : EndChanged}

        @cpp:Private
        var <prop>Current : ::demo::ColorDef^ = null of (::demo::ColorDef^);

        func GetCurrent() : (::demo::ColorDef^)
        {
            return <prop>Current;
        }

        func SetCurrent(<value> : ::demo::ColorDef^) : (void)
        {
            if ((<prop>Current != <value>))
            {
                (<prop>Current = <value>);
                CurrentChanged();
            }
        }

        event CurrentChanged();

        prop Current : ::demo::ColorDef^{GetCurrent, SetCurrent : CurrentChanged}

        @cpp:Private
        var <ani-int> : (func (::system::Double) : (::system::Double)) = G;

        @cpp:Private
        var <ani-int>Thickness : (func (::system::Double) : (::system::Double)) = [$1];

        func GetTimeScale(<ani>begin : ::demo::ColorDef^, <ani>end : ::demo::ColorDef^, <ani>current : ::demo::ColorDef^) : (::system::Double)
        {
            var <ani>scale = 0.0;
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Top.a) - (cast (::system::Double) <ani>end.Top.a)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Top.a) - (cast (::system::Double) <ani>end.Top.a)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Top.b) - (cast (::system::Double) <ani>end.Top.b)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Top.b) - (cast (::system::Double) <ani>end.Top.b)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Top.g) - (cast (::system::Double) <ani>end.Top.g)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Top.g) - (cast (::system::Double) <ani>end.Top.g)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Top.r) - (cast (::system::Double) <ani>end.Top.r)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Top.r) - (cast (::system::Double) <ani>end.Top.r)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Bottom.a) - (cast (::system::Double) <ani>end.Bottom.a)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Bottom.a) - (cast (::system::Double) <ani>end.Bottom.a)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Bottom.b) - (cast (::system::Double) <ani>end.Bottom.b)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Bottom.b) - (cast (::system::Double) <ani>end.Bottom.b)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Bottom.g) - (cast (::system::Double) <ani>end.Bottom.g)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Bottom.g) - (cast (::system::Double) <ani>end.Bottom.g)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Bottom.r) - (cast (::system::Double) <ani>end.Bottom.r)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Bottom.r) - (cast (::system::Double) <ani>end.Bottom.r)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Shadow.a) - (cast (::system::Double) <ani>end.Shadow.a)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Shadow.a) - (cast (::system::Double) <ani>end.Shadow.a)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Shadow.b) - (cast (::system::Double) <ani>end.Shadow.b)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Shadow.b) - (cast (::system::Double) <ani>end.Shadow.b)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Shadow.g) - (cast (::system::Double) <ani>end.Shadow.g)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Shadow.g) - (cast (::system::Double) <ani>end.Shadow.g)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Shadow.r) - (cast (::system::Double) <ani>end.Shadow.r)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Shadow.r) - (cast (::system::Double) <ani>end.Shadow.r)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            {
                var <ani>ref = ::system::Math::Abs(((cast (::system::Double) <ani>begin.Thickness) - (cast (::system::Double) <ani>end.Thickness)));
                var <ani>cur = ::system::Math::Abs(((cast (::system::Double) <ani>current.Thickness) - (cast (::system::Double) <ani>end.Thickness)));
                (<ani>scale = ::system::Math::Max(<ani>scale, (<ani>cur / ::system::Math::Max(<ani>ref, 0.000001))));
            }
            return ::system::Math::Min(1.0, <ani>scale);
        }

        func Interpolate(<ani>begin : ::demo::ColorDef^, <ani>end : ::demo::ColorDef^, <ani>current : ::demo::ColorDef^, <ani>ratio : ::system::Double) : (::system::Void)
        {
            var <ani>_Top_a = (cast (::system::UInt8) ::system::Math::Round((((cast (::system::Double) <ani>begin.Top.a) * (1.0 - <ani-int>(<ani>ratio))) + ((cast (::system::Double) <ani>end.Top.a) * <ani-int>(<ani>ratio)))));
            var <ani>_Top_b = (cast (::system::UInt8) ::system::Math::Round((((cast (::system::Double) <ani>begin.Top.b) * (1.0 - <ani-int>(<ani>ratio))) + ((cast (::system::Double) <ani>end.Top.b) * <ani-int>(<ani>ratio)))));
            var <ani>_Top_g = (cast (::system::UInt8) ::system::Math::Round((((cast (::system::Double) <ani>begin.Top.g) * (1.0 - <ani-int>(<ani>ratio))) + ((cast (::system::Double) <ani>end.Top.g) * <ani-int>(<ani>ratio)))));
            var <ani>_Top_r = (cast (::system::UInt8) ::system::Math::Round((((cast (::system::Double) <ani>begin.Top.r) * (1.0 - <ani-int>(<ani>ratio))) + ((cast (::system::Double) <ani>end.Top.r) * <ani-int>(<ani>ratio)))));
            var <ani>_Bottom_a = (cast (::system::UInt8) ::system::Math::Round((((cast (::system::Double) <ani>begin.Bottom.a) * (1.0 - <ani-int>(<ani>ratio))) + ((cast (::system::Double) <ani>end.Bottom.a) * <ani-int>(<ani>ratio)))));
            var <ani>_Bottom_b = (cast (::system::UInt8) ::system::Math::Round((((cast (::system::Double) <ani>begin.Bottom.b) * (1.0 - <ani-int>(<ani>ratio))) + ((cast (::system::Double) <ani>end.Bottom.b) * <ani-int>(<ani>ratio)))));
            var <ani>_Bottom_g = (cast (::system::UInt8) ::system::Math::Round((((cast (::system::Double) <ani>begin.Bottom.g) * (1.0 - <ani-int>(<ani>ratio))) + ((cast (::system::Double) <ani>end.Bottom.g) * <ani-int>(<ani>ratio)))));
            var <ani>_Bottom_r = (cast (::system::UInt8) ::system::Math::Round((((cast (::system::Double) <ani>begin.Bottom.r) * (1.0 - <ani-int>(<ani>ratio))) + ((cast (::system::Double) <ani>end.Bottom.r) * <ani-int>(<ani>ratio)))));
            var <ani>_Shadow_a = (cast (::system::UInt8) ::system::Math::Round((((cast (::system::Double) <ani>begin.Shadow.a) * (1.0 - <ani-int>(<ani>ratio))) + ((cast (::system::Double) <ani>end.Shadow.a) * <ani-int>(<ani>ratio)))));
            var <ani>_Shadow_b = (cast (::system::UInt8) ::system::Math::Round((((cast (::system::Double) <ani>begin.Shadow.b) * (1.0 - <ani-int>(<ani>ratio))) + ((cast (::system::Double) <ani>end.Shadow.b) * <ani-int>(<ani>ratio)))));
            var <ani>_Shadow_g = (cast (::system::UInt8) ::system::Math::Round((((cast (::system::Double) <ani>begin.Shadow.g) * (1.0 - <ani-int>(<ani>ratio))) + ((cast (::system::Double) <ani>end.Shadow.g) * <ani-int>(<ani>ratio)))));
            var <ani>_Shadow_r = (cast (::system::UInt8) ::system::Math::Round((((cast (::system::Double) <ani>begin.Shadow.r) * (1.0 - <ani-int>(<ani>ratio))) + ((cast (::system::Double) <ani>end.Shadow.r) * <ani-int>(<ani>ratio)))));
            var <ani>_Thickness = (cast (::system::Int32) ::system::Math::Round((((cast (::system::Double) <ani>begin.Thickness) * (1.0 - <ani-int>Thickness(<ani>ratio))) + ((cast (::system::Double) <ani>end.Thickness) * <ani-int>Thickness(<ani>ratio)))));
            (<ani>current.Top = {a : <ani>_Top_a; b : <ani>_Top_b; g : <ani>_Top_g; r : <ani>_Top_r;});
            (<ani>current.Bottom = {a : <ani>_Bottom_a; b : <ani>_Bottom_b; g : <ani>_Bottom_g; r : <ani>_Bottom_r;});
            (<ani>current.Shadow = {a : <ani>_Shadow_a; b : <ani>_Shadow_b; g : <ani>_Shadow_g; r : <ani>_Shadow_r;});
            (<ani>current.Thickness = <ani>_Thickness);
        }

        func Interpolate(<ani>ratio : ::system::Double) : (::system::Void)
        {
            Interpolate(Begin, End, Current, <ani>ratio);
        }

        func CreateAnimation(<ani>target : ::demo::ColorDef^, <ani>time : ::system::UInt64) : (::presentation::controls::IGuiAnimation^)
        {
            var <ani>scaledTime = (cast (::system::UInt64) ::system::Math::Round((<ani>time * GetTimeScale(End, <ani>target, Current))));
            (Begin.Top = Current.Top);
            (Begin.Bottom = Current.Bottom);
            (Begin.Shadow = Current.Shadow);
            (Begin.Thickness = Current.Thickness);
            (End = <ani>target);
            return ::presentation::controls::IGuiAnimation::CreateAnimation(func (<ani>currentTime : ::system::UInt64) : (::system::Void)
            {
                Interpolate(((cast (::system::Double) <ani>currentTime) / (cast (::system::Double) <ani>time)));
            }, <ani>time);
        }

        new (<ani>current : ::demo::ColorDef^)
        {
            (Begin = new (::demo::ColorDef^)());
            (Begin.Top = <ani>current.Top);
            (Begin.Bottom = <ani>current.Bottom);
            (Begin.Shadow = <ani>current.Shadow);
            (Begin.Thickness = <ani>current.Thickness);
            (End = new (::demo::ColorDef^)());
            (End.Top = <ani>current.Top);
            (End.Bottom = <ani>current.Bottom);
            (End.Shadow = <ani>current.Shadow);
            (End.Thickness = <ani>current.Thickness);
            (Current = new (::demo::ColorDef^)());
            (Current.Top = <ani>current.Top);
            (Current.Bottom = <ani>current.Bottom);
            (Current.Shadow = <ani>current.Shadow);
            (Current.Thickness = <ani>current.Thickness);
        }
    }
}

================================(20/115)================================
module <constructor>demo::DateEditor;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class DateEditorConstructor
    {
        @cpp:Protected
        var self : ::demo::DateEditor* = null of (::demo::DateEditor*);

        @cpp:Protected
        var comboBox : ::presentation::controls::GuiDateComboBox* = null of (::presentation::controls::GuiDateComboBox*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-DateEditor>Initialize(<this> : ::demo::DateEditor*) : (::system::Void)
        {
            (self = <this>);
            {
                (comboBox = new (::presentation::controls::GuiDateComboBox*)(::presentation::theme::ThemeName::DateComboBox));
                <this>.SetNamedObject("comboBox", comboBox);
            }
            (<precompile>0 = comboBox.BoundsComposition);
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(comboBox.BoundsComposition);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DateEditor* = null of (::demo::DateEditor*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((cast (DateTime) <bind-cache>0.CellValue) ?? (cast (DateTime) "2000-01-01 00:00:00.000")) of (::system::DateTime);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DateEditor*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CellValueChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CellValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DateEditor*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = comboBox.SelectedDate;
                    var <new> = (cast (::system::DateTime) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (comboBox.SelectedDate = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDateComboBox* = null of (::presentation::controls::GuiDateComboBox*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.SelectedDate of (::system::Object);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (comboBox ?? null of (::presentation::controls::GuiDateComboBox*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedDateChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedDateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDateComboBox*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.CellValue;
                    var <new> = (cast (::system::Object) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.CellValue = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.FocusControl = comboBox);
            }
        }

        new ()
        {
        }
    }
}

================================(21/115)================================
module <instance>demo::DateEditor;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(DateEditorConstructor))
    class DateEditor : ::presentation::templates::GuiGridEditorTemplate, DateEditorConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::DateEditor");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-DateEditor>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(22/115)================================
module <constructor>demo::DateFilter;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class DateFilterConstructor
    {
        @cpp:Protected
        var self : ::demo::DateFilter* = null of (::demo::DateFilter*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var checkFrom : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var dateFrom : ::presentation::controls::GuiDateComboBox* = null of (::presentation::controls::GuiDateComboBox*);

        @cpp:Protected
        var checkTo : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var dateTo : ::presentation::controls::GuiDateComboBox* = null of (::presentation::controls::GuiDateComboBox*);

        @cpp:Protected
        func <demo-DateFilter>Initialize(<this> : ::demo::DateFilter*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (checkFrom = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkFrom", checkFrom);
            }
            {
                (checkFrom.Text = "From:");
            }
            {
                <precompile>1.AddChild(checkFrom.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(0, 1, 1, 1);
            }
            {
                (dateFrom = new (::presentation::controls::GuiDateComboBox*)(::presentation::theme::ThemeName::DateComboBox));
                <this>.SetNamedObject("dateFrom", dateFrom);
            }
            {
                (dateFrom.SelectedDate = (cast (::system::DateTime) "1988-01-01 00:00:00.000"));
            }
            (<precompile>3 = dateFrom.BoundsComposition);
            {
                (<precompile>3.PreferredMinSize = {x : 120;} of (::presentation::Size));
            }
            {
                <precompile>2.AddChild(dateFrom.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(1, 0, 1, 1);
            }
            {
                (checkTo = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkTo", checkTo);
            }
            {
                (checkTo.Text = "To:");
            }
            {
                <precompile>4.AddChild(checkTo.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>4);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(1, 1, 1, 1);
            }
            {
                (dateTo = new (::presentation::controls::GuiDateComboBox*)(::presentation::theme::ThemeName::DateComboBox));
                <this>.SetNamedObject("dateTo", dateTo);
            }
            {
                (dateTo.SelectedDate = (cast (::system::DateTime) "2000-01-01 00:00:00.000"));
            }
            (<precompile>6 = dateTo.BoundsComposition);
            {
                (<precompile>6.PreferredMinSize = {x : 120;} of (::presentation::Size));
            }
            {
                <precompile>5.AddChild(dateTo.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.UpdateFilter();
                };
                attach(checkFrom.SelectedChanged, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkFrom ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = dateFrom.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (dateFrom.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.UpdateFilter();
                };
                attach(dateFrom.SelectedDateChanged, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.UpdateFilter();
                };
                attach(checkTo.SelectedChanged, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Selected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (checkTo ?? null of (::presentation::controls::GuiSelectableButton*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSelectableButton*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = dateTo.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (dateTo.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.UpdateFilter();
                };
                attach(dateTo.SelectedDateChanged, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(23/115)================================
module <instance>demo::DateFilter;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(DateFilterConstructor))
    class DateFilter : ::presentation::controls::GuiCustomControl, DateFilterConstructor
    {
        @cpp:Private
        var callback : IDataProcessorCallback* = null;

        @cpp:Private
        func UpdateFilter() : (void)
        {
            if (callback is not null)
            {
                callback.OnProcessorChanged();
            }
        }

        @cpp:Private
        var <prop>Filter : IDataFilter^ = null;

        func GetFilter() : (IDataFilter^)
        {
            return <prop>Filter;
        }

        @cpp:Protected
        func SetFilter(<value> : IDataFilter^) : (void)
        {
            (<prop>Filter = <value>);
        }

        prop Filter : IDataFilter^{GetFilter}

        new* ()
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::DateFilter");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-DateFilter>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            SetFilter(new (IDataFilter^)
            {
                override func SetCallback(value : IDataProcessorCallback*) : (void)
                {
                    (callback = value);
                }

                override func Filter(row : object) : (bool)
                {
                    var date = (cast (MyDataItem^) row).Birthday;
                    if (checkFrom.Selected)
                    {
                        if ((Sys::Compare(date, dateFrom.SelectedDate) < 0))
                        {
                            return false;
                        }
                    }
                    if (checkTo.Selected)
                    {
                        if ((Sys::Compare(date, dateTo.SelectedDate) > 0))
                        {
                            return false;
                        }
                    }
                    return true;
                }
            });
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(24/115)================================
module <constructor>demo::TextEditor;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class TextEditorConstructor
    {
        @cpp:Protected
        var self : ::demo::TextEditor* = null of (::demo::TextEditor*);

        @cpp:Protected
        var textBox : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-TextEditor>Initialize(<this> : ::demo::TextEditor*) : (::system::Void)
        {
            (self = <this>);
            {
                (textBox = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("textBox", textBox);
            }
            (<precompile>0 = textBox.BoundsComposition);
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(textBox.BoundsComposition);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::TextEditor* = null of (::demo::TextEditor*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((cast (string) <bind-cache>0.CellValue) ?? "") of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::TextEditor*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CellValueChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CellValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::TextEditor*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = textBox.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (textBox.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::Object);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (textBox ?? null of (::presentation::controls::GuiSinglelineTextBox*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiSinglelineTextBox*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.CellValue;
                    var <new> = (cast (::system::Object) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.CellValue = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.FocusControl = textBox);
            }
        }

        new ()
        {
        }
    }
}

================================(25/115)================================
module <instance>demo::TextEditor;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(TextEditorConstructor))
    class TextEditor : ::presentation::templates::GuiGridEditorTemplate, TextEditorConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::TextEditor");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-TextEditor>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(26/115)================================
module <constructor>demo::CategoryDisplayer;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class CategoryDisplayerConstructor
    {
        @cpp:Protected
        var self : ::demo::CategoryDisplayer* = null of (::demo::CategoryDisplayer*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <demo-CategoryDisplayer>Initialize(<this> : ::demo::CategoryDisplayer*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 4);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Absolute; absolute : 16;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Absolute; absolute : 2;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Absolute; absolute : 16;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Absolute; absolute : 2;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(3, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(1, 1, 1, 1);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#000000"));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            (<precompile>3 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>3.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            (<precompile>4 = new (::presentation::elements::GuiSolidBackgroundElement^)());
            {
                (<precompile>3.OwnedElement = <precompile>4);
            }
            {
                <precompile>1.AddChild(<precompile>3);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(0, 3, 3, 1);
            }
            (<precompile>6 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>6.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>6.HorizontalAlignment = Left of (::presentation::Alignment));
            }
            {
                (<precompile>6.Ellipse = true);
            }
            {
                (<precompile>6.Color = (cast (::presentation::Color) "#FF8000"));
            }
            {
                (<precompile>5.OwnedElement = <precompile>6);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::CategoryDisplayer* = null of (::demo::CategoryDisplayer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ToColor(<bind-cache>0.Category) of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::CategoryDisplayer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CategoryChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CategoryChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::CategoryDisplayer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>4.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>4.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::CategoryDisplayer* = null of (::demo::CategoryDisplayer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ToString(<bind-cache>0.Category) of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::CategoryDisplayer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CategoryChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CategoryChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::CategoryDisplayer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::CategoryDisplayer* = null of (::demo::CategoryDisplayer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.DisplayFont of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::CategoryDisplayer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DisplayFontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DisplayFontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::CategoryDisplayer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>6.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>6.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(27/115)================================
module <instance>demo::CategoryDisplayer;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(CategoryDisplayerConstructor))
    class CategoryDisplayer : ::presentation::controls::GuiCustomControl, CategoryDisplayerConstructor
    {
        @cpp:Private
        var <prop>Category : MyCategory = Black;

        func GetCategory() : (MyCategory)
        {
            return <prop>Category;
        }

        func SetCategory(<value> : MyCategory) : (void)
        {
            if ((<prop>Category != <value>))
            {
                (<prop>Category = <value>);
                CategoryChanged();
            }
        }

        event CategoryChanged();

        prop Category : MyCategory{GetCategory, SetCategory : CategoryChanged}

        new* ()
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::CategoryDisplayer");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-CategoryDisplayer>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(28/115)================================
module <constructor>demo::CategoryEditor;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class CategoryEditorConstructor
    {
        @cpp:Protected
        var self : ::demo::CategoryEditor* = null of (::demo::CategoryEditor*);

        @cpp:Protected
        var comboBox : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::GuiBindableTextList* = null of (::presentation::controls::GuiBindableTextList*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-CategoryEditor>Initialize(<this> : ::demo::CategoryEditor*) : (::system::Void)
        {
            (self = <this>);
            {
                (<precompile>0 = new (::presentation::controls::GuiBindableTextList*)(::presentation::theme::ThemeName::TextList));
            }
            {
                (<precompile>0.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>0.VerticalAlwaysVisible = false);
            }
            {
                (<precompile>0.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiListItemTemplate*)
                {
                    {
                        if (<viewModel> is (::demo::MyCategory))
                        {
                            return new (::demo::CategoryItemTemplate*)((cast (::demo::MyCategory) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            {
                (comboBox = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, <precompile>0));
                <this>.SetNamedObject("comboBox", comboBox);
            }
            {
                (comboBox.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTemplate*)
                {
                    {
                        if (<viewModel> is (::demo::MyCategory))
                        {
                            return new (::demo::CategoryItemTemplate*)((cast (::demo::MyCategory) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            (<precompile>1 = comboBox.BoundsComposition);
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(comboBox.BoundsComposition);
            }
            {
                (<precompile>0.ItemSource = self.items);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::CategoryEditor* = null of (::demo::CategoryEditor*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.items.IndexOf(<bind-cache>0.CellValue) of (::system::Int32);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::CategoryEditor*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CellValueChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CellValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::CategoryEditor*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = comboBox.SelectedIndex;
                    var <new> = (cast (::system::Int32) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (comboBox.SelectedIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.SelectedItem of (::system::Object);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (comboBox ?? null of (::presentation::controls::GuiComboBoxListControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedIndexChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedIndexChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiComboBoxListControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.CellValue;
                    var <new> = (cast (::system::Object) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.CellValue = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.FocusControl = comboBox);
            }
        }

        new ()
        {
        }
    }
}

================================(29/115)================================
module <instance>demo::CategoryEditor;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(CategoryEditorConstructor))
    class CategoryEditor : ::presentation::templates::GuiGridEditorTemplate, CategoryEditorConstructor
    {
        var items : MyCategory[] = {Black of (MyCategory); Red of (MyCategory); Lime of (MyCategory); Blue of (MyCategory); White of (MyCategory);};

        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::CategoryEditor");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-CategoryEditor>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(30/115)================================
module <constructor>demo::CategoryItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class CategoryItemTemplateConstructor
    {
        @cpp:Protected
        var self : ::demo::CategoryItemTemplate* = null of (::demo::CategoryItemTemplate*);

        @cpp:Protected
        var <precompile>0 : ::demo::CategoryDisplayer* = null of (::demo::CategoryDisplayer*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var SelectedCategory : ::demo::MyCategory = (cast (::demo::MyCategory) (cast (::system::UInt64) 0));

        @cpp:Protected
        func <demo-CategoryItemTemplate>Initialize(<this> : ::demo::CategoryItemTemplate*) : (::system::Void)
        {
            (self = <this>);
            (SelectedCategory = <this>.SelectedCategory);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::demo::CategoryDisplayer*)());
            (<precompile>1 = <precompile>0.BoundsComposition);
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(<precompile>0.BoundsComposition);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::CategoryItemTemplate* = null of (::demo::CategoryItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties?);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::CategoryItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::CategoryItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Font;
                    var <new> = (cast (::presentation::FontProperties?) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>0.Category = SelectedCategory);
            }
        }

        new ()
        {
        }
    }
}

================================(31/115)================================
module <instance>demo::CategoryItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(CategoryItemTemplateConstructor))
    class CategoryItemTemplate : ::presentation::templates::GuiTextListItemTemplate, CategoryItemTemplateConstructor
    {
        @cpp:Private
        var <parameter>SelectedCategory : demo::MyCategory = (cast (::demo::MyCategory) (cast (::system::UInt64) 0));

        func GetSelectedCategory() : (demo::MyCategory)
        {
            return <parameter>SelectedCategory;
        }

        prop SelectedCategory : demo::MyCategory{GetSelectedCategory}

        new* (<ctor-parameter>SelectedCategory : demo::MyCategory)
        {
            (<parameter>SelectedCategory = <ctor-parameter>SelectedCategory);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::CategoryItemTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-CategoryItemTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(32/115)================================
module <constructor>demo::CategoryVisualizer;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class CategoryVisualizerConstructor
    {
        @cpp:Protected
        var self : ::demo::CategoryVisualizer* = null of (::demo::CategoryVisualizer*);

        @cpp:Protected
        var <precompile>0 : ::demo::CategoryDisplayer* = null of (::demo::CategoryDisplayer*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-CategoryVisualizer>Initialize(<this> : ::demo::CategoryVisualizer*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>0 = new (::demo::CategoryDisplayer*)());
            (<precompile>1 = <precompile>0.BoundsComposition);
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(<precompile>0.BoundsComposition);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::CategoryVisualizer* = null of (::demo::CategoryVisualizer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties?);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::CategoryVisualizer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::CategoryVisualizer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Font;
                    var <new> = (cast (::presentation::FontProperties?) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::CategoryVisualizer* = null of (::demo::CategoryVisualizer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((cast (MyCategory) <bind-cache>0.CellValue) ?? MyCategory::Black) of (::demo::MyCategory);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::CategoryVisualizer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CellValueChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CellValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::CategoryVisualizer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Category;
                    var <new> = (cast (::demo::MyCategory) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Category = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(33/115)================================
module <instance>demo::CategoryVisualizer;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(CategoryVisualizerConstructor))
    class CategoryVisualizer : ::presentation::templates::GuiGridVisualizerTemplate, CategoryVisualizerConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::CategoryVisualizer");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-CategoryVisualizer>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(34/115)================================
module <constructor>demo::GenderDisplayer;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class GenderDisplayerConstructor
    {
        @cpp:Protected
        var self : ::demo::GenderDisplayer* = null of (::demo::GenderDisplayer*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiImageFrameElement^ = null of (::presentation::elements::GuiImageFrameElement^);

        @cpp:Protected
        func <demo-GenderDisplayer>Initialize(<this> : ::demo::GenderDisplayer*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>0 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 2; top : 2; right : 2; bottom : 2;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElement of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::elements::GuiImageFrameElement^)());
            {
                (<precompile>1.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>1.HorizontalAlignment = Left of (::presentation::Alignment));
            }
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::GenderDisplayer* = null of (::demo::GenderDisplayer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (GuiImageData^) self.ResolveResource("res", ("MiscImages/" & ToString(<bind-cache>0.Gender)), true)).Image of (::presentation::INativeImage^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::GenderDisplayer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.GenderChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.GenderChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::GenderDisplayer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Image;
                    var <new> = (cast (::presentation::INativeImage^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(35/115)================================
module <instance>demo::GenderDisplayer;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(GenderDisplayerConstructor))
    class GenderDisplayer : ::presentation::controls::GuiCustomControl, GenderDisplayerConstructor
    {
        @cpp:Private
        var <prop>Gender : MyGender = Male;

        func GetGender() : (MyGender)
        {
            return <prop>Gender;
        }

        func SetGender(<value> : MyGender) : (void)
        {
            if ((<prop>Gender != <value>))
            {
                (<prop>Gender = <value>);
                GenderChanged();
            }
        }

        event GenderChanged();

        prop Gender : MyGender{GetGender, SetGender : GenderChanged}

        new* ()
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::GenderDisplayer");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-GenderDisplayer>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(36/115)================================
module <constructor>demo::GenderEditor;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class GenderEditorConstructor
    {
        @cpp:Protected
        var self : ::demo::GenderEditor* = null of (::demo::GenderEditor*);

        @cpp:Protected
        var comboBox : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::GuiBindableTextList* = null of (::presentation::controls::GuiBindableTextList*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-GenderEditor>Initialize(<this> : ::demo::GenderEditor*) : (::system::Void)
        {
            (self = <this>);
            {
                (<precompile>0 = new (::presentation::controls::GuiBindableTextList*)(::presentation::theme::ThemeName::TextList));
            }
            {
                (<precompile>0.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>0.VerticalAlwaysVisible = false);
            }
            {
                (<precompile>0.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiListItemTemplate*)
                {
                    {
                        if (<viewModel> is (::demo::MyGender))
                        {
                            return new (::demo::GenderItemTemplate*)((cast (::demo::MyGender) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            {
                (comboBox = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, <precompile>0));
                <this>.SetNamedObject("comboBox", comboBox);
            }
            {
                (comboBox.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiTemplate*)
                {
                    {
                        if (<viewModel> is (::demo::MyGender))
                        {
                            return new (::demo::GenderItemTemplate*)((cast (::demo::MyGender) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            (<precompile>1 = comboBox.BoundsComposition);
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(comboBox.BoundsComposition);
            }
            {
                (<precompile>0.ItemSource = self.items);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::GenderEditor* = null of (::demo::GenderEditor*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.items.IndexOf(<bind-cache>0.CellValue) of (::system::Int32);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::GenderEditor*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CellValueChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CellValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::GenderEditor*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = comboBox.SelectedIndex;
                    var <new> = (cast (::system::Int32) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (comboBox.SelectedIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.SelectedItem of (::system::Object);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (comboBox ?? null of (::presentation::controls::GuiComboBoxListControl*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedIndexChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedIndexChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiComboBoxListControl*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.CellValue;
                    var <new> = (cast (::system::Object) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.CellValue = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (self.FocusControl = comboBox);
            }
        }

        new ()
        {
        }
    }
}

================================(37/115)================================
module <instance>demo::GenderEditor;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(GenderEditorConstructor))
    class GenderEditor : ::presentation::templates::GuiGridEditorTemplate, GenderEditorConstructor
    {
        var items : MyGender[] = {Male of (MyGender); Female of (MyGender);};

        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::GenderEditor");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-GenderEditor>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(38/115)================================
module <constructor>demo::GenderItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class GenderItemTemplateConstructor
    {
        @cpp:Protected
        var <precompile>0 : ::demo::GenderItemTemplate* = null of (::demo::GenderItemTemplate*);

        @cpp:Protected
        var <precompile>1 : ::demo::GenderDisplayer* = null of (::demo::GenderDisplayer*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var SelectedGender : ::demo::MyGender = (cast (::demo::MyGender) (cast (::system::UInt64) 0));

        @cpp:Protected
        func <demo-GenderItemTemplate>Initialize(<this> : ::demo::GenderItemTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            (SelectedGender = <this>.SelectedGender);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::demo::GenderDisplayer*)());
            (<precompile>2 = <precompile>1.BoundsComposition);
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>0.AddChild(<precompile>1.BoundsComposition);
            }
            {
                (<precompile>1.Gender = SelectedGender);
            }
        }

        new ()
        {
        }
    }
}

================================(39/115)================================
module <instance>demo::GenderItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(GenderItemTemplateConstructor))
    class GenderItemTemplate : ::presentation::templates::GuiTextListItemTemplate, GenderItemTemplateConstructor
    {
        @cpp:Private
        var <parameter>SelectedGender : demo::MyGender = (cast (::demo::MyGender) (cast (::system::UInt64) 0));

        func GetSelectedGender() : (demo::MyGender)
        {
            return <parameter>SelectedGender;
        }

        prop SelectedGender : demo::MyGender{GetSelectedGender}

        new* (<ctor-parameter>SelectedGender : demo::MyGender)
        {
            (<parameter>SelectedGender = <ctor-parameter>SelectedGender);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::GenderItemTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-GenderItemTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(40/115)================================
module <constructor>demo::GenderVisualizer;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class GenderVisualizerConstructor
    {
        @cpp:Protected
        var self : ::demo::GenderVisualizer* = null of (::demo::GenderVisualizer*);

        @cpp:Protected
        var <precompile>0 : ::demo::GenderDisplayer* = null of (::demo::GenderDisplayer*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-GenderVisualizer>Initialize(<this> : ::demo::GenderVisualizer*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>0 = new (::demo::GenderDisplayer*)());
            (<precompile>1 = <precompile>0.BoundsComposition);
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(<precompile>0.BoundsComposition);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::GenderVisualizer* = null of (::demo::GenderVisualizer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ((cast (MyGender) <bind-cache>0.CellValue) ?? MyGender::Male) of (::demo::MyGender);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::GenderVisualizer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CellValueChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CellValueChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::GenderVisualizer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Gender;
                    var <new> = (cast (::demo::MyGender) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Gender = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(41/115)================================
module <instance>demo::GenderVisualizer;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(GenderVisualizerConstructor))
    class GenderVisualizer : ::presentation::templates::GuiGridVisualizerTemplate, GenderVisualizerConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::GenderVisualizer");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-GenderVisualizer>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(42/115)================================
module <constructor>demo::DatePickerTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class DatePickerTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::DatePickerTabPage* = null of (::demo::DatePickerTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var dp1 : ::presentation::controls::GuiDatePicker* = null of (::presentation::controls::GuiDatePicker*);

        @cpp:Protected
        var dp2 : ::presentation::controls::GuiDatePicker* = null of (::presentation::controls::GuiDatePicker*);

        @cpp:Protected
        var dc1 : ::presentation::controls::GuiDateComboBox* = null of (::presentation::controls::GuiDateComboBox*);

        @cpp:Protected
        var dc2 : ::presentation::controls::GuiDateComboBox* = null of (::presentation::controls::GuiDateComboBox*);

        @cpp:Protected
        func <demo-DatePickerTabPage>Initialize(<this> : ::demo::DatePickerTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "DatePicker");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 4);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(3, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (dp1 = new (::presentation::controls::GuiDatePicker*)(::presentation::theme::ThemeName::DatePicker));
                <this>.SetNamedObject("dp1", dp1);
            }
            (<precompile>2 = dp1.BoundsComposition);
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (dp1.Alt = "D");
            }
            {
                <precompile>1.AddChild(dp1.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 1, 1, 1);
            }
            {
                (dp2 = new (::presentation::controls::GuiDatePicker*)(::presentation::theme::ThemeName::DatePicker));
                <this>.SetNamedObject("dp2", dp2);
            }
            (<precompile>4 = dp2.BoundsComposition);
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (dp2.Alt = "D");
            }
            {
                <precompile>3.AddChild(dp2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(1, 0, 1, 1);
            }
            {
                (dc1 = new (::presentation::controls::GuiDateComboBox*)(::presentation::theme::ThemeName::DateComboBox));
                <this>.SetNamedObject("dc1", dc1);
            }
            (<precompile>6 = dc1.BoundsComposition);
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (dc1.Alt = "D");
            }
            {
                <precompile>5.AddChild(dc1.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(1, 1, 1, 1);
            }
            {
                (dc2 = new (::presentation::controls::GuiDateComboBox*)(::presentation::theme::ThemeName::DateComboBox));
                <this>.SetNamedObject("dc2", dc2);
            }
            (<precompile>8 = dc2.BoundsComposition);
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (dc2.Alt = "D");
            }
            {
                <precompile>7.AddChild(dc2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>9.SetSite(0, 2, 2, 1);
            }
            (<precompile>10 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>10.Padding = 5 of (::system::Int32));
            }
            {
                (<precompile>10.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>10.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>10.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>11 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>12 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>12.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (<precompile>11.OwnedElement = <precompile>12);
            }
            {
                <precompile>10.AddChild(<precompile>11);
            }
            (<precompile>13 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>14 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>14.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (<precompile>13.OwnedElement = <precompile>14);
            }
            {
                <precompile>10.AddChild(<precompile>13);
            }
            (<precompile>15 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>16 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>16.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (<precompile>15.OwnedElement = <precompile>16);
            }
            {
                <precompile>10.AddChild(<precompile>15);
            }
            (<precompile>17 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>18 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>18.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (<precompile>17.OwnedElement = <precompile>18);
            }
            {
                <precompile>10.AddChild(<precompile>17);
            }
            {
                <precompile>9.AddChild(<precompile>10);
            }
            {
                <precompile>0.AddChild(<precompile>9);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDatePicker* = null of (::presentation::controls::GuiDatePicker*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("DP1: " & <bind-cache>0.Date);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (dp1 ?? null of (::presentation::controls::GuiDatePicker*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DateChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDatePicker*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>12.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>12.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DatePickerTabPage* = null of (::demo::DatePickerTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.DisplayFont of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DatePickerTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DisplayFontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DisplayFontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DatePickerTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>12.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>12.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDatePicker* = null of (::presentation::controls::GuiDatePicker*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("DP2: " & <bind-cache>0.Date);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (dp2 ?? null of (::presentation::controls::GuiDatePicker*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DateChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDatePicker*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>14.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>14.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DatePickerTabPage* = null of (::demo::DatePickerTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.DisplayFont of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DatePickerTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DisplayFontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DisplayFontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DatePickerTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>14.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>14.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDateComboBox* = null of (::presentation::controls::GuiDateComboBox*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("DC1: " & <bind-cache>0.SelectedDate);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (dc1 ?? null of (::presentation::controls::GuiDateComboBox*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedDateChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedDateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDateComboBox*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>16.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>16.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DatePickerTabPage* = null of (::demo::DatePickerTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.DisplayFont of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DatePickerTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DisplayFontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DisplayFontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DatePickerTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>16.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>16.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDateComboBox* = null of (::presentation::controls::GuiDateComboBox*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("DC2: " & <bind-cache>0.SelectedDate);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (dc2 ?? null of (::presentation::controls::GuiDateComboBox*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedDateChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedDateChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDateComboBox*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>18.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>18.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DatePickerTabPage* = null of (::demo::DatePickerTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.DisplayFont of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DatePickerTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DisplayFontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DisplayFontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DatePickerTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>18.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>18.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(43/115)================================
module <instance>demo::DatePickerTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(DatePickerTabPageConstructor))
    class DatePickerTabPage : ::presentation::controls::GuiTabPage, DatePickerTabPageConstructor
    {
        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::DatePickerTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-DatePickerTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(44/115)================================
module <constructor>demo::HyperlinkWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class HyperlinkWindowConstructor
    {
        @cpp:Protected
        var self : ::demo::HyperlinkWindow* = null of (::demo::HyperlinkWindow*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var textUrl : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        func <demo-HyperlinkWindow>Initialize(<this> : ::demo::HyperlinkWindow*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.SizeBox = false);
            }
            {
                (self.MinimizedBox = false);
            }
            {
                (self.MaximizedBox = false);
            }
            {
                (self.ShowInTaskBar = false);
            }
            {
                (self.ClientSize = {x : 320; y : 80;} of (::presentation::Size));
            }
            (<precompile>13 = self.BoundsComposition);
            {
                (<precompile>13.PreferredMinSize = {x : 320; y : 80;} of (::presentation::Size));
            }
            {
                (self.Text = "Hyperlink");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = true);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 4);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>2.SetRowsAndColumns(3, 1);
                <precompile>2.SetRowOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(2, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>4.Text = "Url: ");
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>3);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(0, 1, 1, 3);
            }
            {
                (textUrl = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("textUrl", textUrl);
            }
            (<precompile>6 = textUrl.BoundsComposition);
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>5.AddChild(textUrl.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(2, 2, 1, 1);
            }
            {
                (<precompile>8 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>9 = <precompile>8.BoundsComposition);
            {
                (<precompile>9.PreferredMinSize = {x : 100;} of (::presentation::Size));
            }
            {
                (<precompile>8.Text = "OK");
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>10 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>10.SetSite(2, 3, 1, 1);
            }
            {
                (<precompile>11 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>12 = <precompile>11.BoundsComposition);
            {
                (<precompile>12.PreferredMinSize = {x : 100;} of (::presentation::Size));
            }
            {
                (<precompile>11.Text = "Cancel");
            }
            {
                <precompile>10.AddChild(<precompile>11.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>10);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (self.Url = textUrl.Text);
                    self.Close();
                };
                attach(<precompile>8.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (self.Url = null);
                    self.Close();
                };
                attach(<precompile>11.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(45/115)================================
module <instance>demo::HyperlinkWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(HyperlinkWindowConstructor))
    class HyperlinkWindow : ::presentation::controls::GuiWindow, HyperlinkWindowConstructor
    {
        @cpp:Private
        var <prop>Url : string? = null;

        func GetUrl() : (string?)
        {
            return <prop>Url;
        }

        func SetUrl(<value> : string?) : (void)
        {
            if ((<prop>Url != <value>))
            {
                (<prop>Url = <value>);
                UrlChanged();
            }
        }

        event UrlChanged();

        prop Url : string?{GetUrl, SetUrl : UrlChanged}

        new* ()
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::HyperlinkWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-HyperlinkWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(46/115)================================
module <constructor>demo::DocumentEditorBase;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class DocumentEditorBaseConstructor
    {
        @cpp:Protected
        var self : ::demo::DocumentEditorBase* = null of (::demo::DocumentEditorBase*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var dialogMessage : ::presentation::controls::GuiMessageDialog* = null of (::presentation::controls::GuiMessageDialog*);

        @cpp:Protected
        var dialogNotImpl : ::presentation::controls::GuiMessageDialog* = null of (::presentation::controls::GuiMessageDialog*);

        @cpp:Protected
        var dialogOpen : ::presentation::controls::GuiOpenFileDialog* = null of (::presentation::controls::GuiOpenFileDialog*);

        @cpp:Protected
        var dialogOpenDoc : ::presentation::controls::GuiOpenFileDialog* = null of (::presentation::controls::GuiOpenFileDialog*);

        @cpp:Protected
        var dialogSaveDoc : ::presentation::controls::GuiSaveFileDialog* = null of (::presentation::controls::GuiSaveFileDialog*);

        @cpp:Protected
        var dialogSaveDocPrivate : ::presentation::controls::GuiSaveFileDialog* = null of (::presentation::controls::GuiSaveFileDialog*);

        @cpp:Protected
        var dialogQueryClose : ::presentation::controls::GuiMessageDialog* = null of (::presentation::controls::GuiMessageDialog*);

        @cpp:Protected
        var menuContainer : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var toolstripContainer : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var document : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

        @cpp:Protected
        var commandLoadPrivate : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandSavePrivate : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandSaveRtf : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandSaveHtml : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandUndo : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandRedo : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandCopy : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandCut : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandPaste : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandDelete : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandSelect : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandInsertImage : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandEditHyperlink : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandRemoveHyperlink : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandBold : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandItalic : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandUnderline : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandStrike : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var dialogColor : ::presentation::controls::GuiColorDialog* = null of (::presentation::controls::GuiColorDialog*);

        @cpp:Protected
        var dialogFont : ::presentation::controls::GuiFontDialog* = null of (::presentation::controls::GuiFontDialog*);

        @cpp:Protected
        var commandFont : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandColor : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandBackColor : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandViewOnly : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandSelectable : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandEditable : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandAlignDefault : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandAlignLeft : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandAlignCenter : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        var commandAlignRight : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

        @cpp:Protected
        func <demo-DocumentEditorBase>Initialize(<this> : ::demo::DocumentEditorBase*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "Document Editor");
            }
            (dialogMessage = new (::presentation::controls::GuiMessageDialog*)());
            <this>.SetNamedObject("dialogMessage", dialogMessage);
            {
                (dialogMessage.Title = "You Clicked a Hyperlink!");
            }
            {
                self.AddComponent(dialogMessage);
            }
            (dialogNotImpl = new (::presentation::controls::GuiMessageDialog*)());
            <this>.SetNamedObject("dialogNotImpl", dialogNotImpl);
            {
                self.AddComponent(dialogNotImpl);
            }
            (dialogOpen = new (::presentation::controls::GuiOpenFileDialog*)());
            <this>.SetNamedObject("dialogOpen", dialogOpen);
            {
                (dialogOpen.Options = (FileDialogFileMustExist | FileDialogDereferenceLinks) of (::presentation::INativeDialogService::FileDialogOptions));
            }
            {
                (dialogOpen.EnabledPreview = true);
            }
            {
                (dialogOpen.Title = "Select an Image");
            }
            {
                (dialogOpen.Filter = "Image Files (*.jpg;*.png;*.bmp)|*.jpg;*.png;*.bmp");
            }
            {
                self.AddComponent(dialogOpen);
            }
            (dialogOpenDoc = new (::presentation::controls::GuiOpenFileDialog*)());
            <this>.SetNamedObject("dialogOpenDoc", dialogOpenDoc);
            {
                (dialogOpenDoc.Options = (FileDialogFileMustExist | FileDialogDereferenceLinks) of (::presentation::INativeDialogService::FileDialogOptions));
            }
            {
                (dialogOpenDoc.Title = "Load a GacUI Document");
            }
            {
                (dialogOpenDoc.Filter = "Private Format (*.bin)|*.bin");
            }
            {
                self.AddComponent(dialogOpenDoc);
            }
            (dialogSaveDoc = new (::presentation::controls::GuiSaveFileDialog*)());
            <this>.SetNamedObject("dialogSaveDoc", dialogSaveDoc);
            {
                (dialogSaveDoc.Options = FileDialogPromptOverwriteFile of (::presentation::INativeDialogService::FileDialogOptions));
            }
            {
                (dialogSaveDoc.Title = "Save a GacUI Document");
            }
            {
                (dialogSaveDoc.Filter = "Private Format (*.bin)|*.bin|RTF Document (*.rtf)|*.rtf|HTML Document (*.html)|*.html");
            }
            {
                self.AddComponent(dialogSaveDoc);
            }
            (dialogSaveDocPrivate = new (::presentation::controls::GuiSaveFileDialog*)());
            <this>.SetNamedObject("dialogSaveDocPrivate", dialogSaveDocPrivate);
            {
                (dialogSaveDocPrivate.Options = FileDialogPromptOverwriteFile of (::presentation::INativeDialogService::FileDialogOptions));
            }
            {
                (dialogSaveDocPrivate.Title = "Save a GacUI Document");
            }
            {
                (dialogSaveDocPrivate.Filter = "Private Format (*.bin)|*.bin");
            }
            {
                self.AddComponent(dialogSaveDocPrivate);
            }
            (dialogQueryClose = new (::presentation::controls::GuiMessageDialog*)());
            <this>.SetNamedObject("dialogQueryClose", dialogQueryClose);
            {
                (dialogQueryClose.Icon = IconQuestion of (::presentation::INativeDialogService::MessageBoxIcons));
            }
            {
                (dialogQueryClose.Input = DisplayYesNoCancel of (::presentation::INativeDialogService::MessageBoxButtonsInput));
            }
            {
                (dialogQueryClose.Text = "The document has been changed since the last time it was saved as a Private Format file. Do you want to save this file?");
            }
            {
                self.AddComponent(dialogQueryClose);
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 1);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (menuContainer = new (::presentation::compositions::GuiCellComposition*)());
            <this>.SetNamedObject("menuContainer", menuContainer);
            {
                menuContainer.SetSite(0, 0, 1, 1);
            }
            {
                <precompile>0.AddChild(menuContainer);
            }
            (toolstripContainer = new (::presentation::compositions::GuiCellComposition*)());
            <this>.SetNamedObject("toolstripContainer", toolstripContainer);
            {
                toolstripContainer.SetSite(1, 0, 1, 1);
            }
            {
                <precompile>0.AddChild(toolstripContainer);
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(2, 0, 1, 1);
            }
            {
                (document = new (::presentation::controls::GuiDocumentViewer*)(::presentation::theme::ThemeName::DocumentViewer));
                <this>.SetNamedObject("document", document);
            }
            {
                (document.EditMode = Editable of (::presentation::controls::GuiDocumentCommonInterface::EditMode));
            }
            (<precompile>2 = document.BoundsComposition);
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (document.Alt = "D");
            }
            {
                <precompile>1.AddChild(document.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            (commandLoadPrivate = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandLoadPrivate", commandLoadPrivate);
            {
                (commandLoadPrivate.Text = "Load as Private Format");
            }
            {
                self.AddComponent(commandLoadPrivate);
            }
            (commandSavePrivate = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandSavePrivate", commandSavePrivate);
            {
                (commandSavePrivate.Text = "Save as Private Format");
            }
            {
                self.AddComponent(commandSavePrivate);
            }
            (commandSaveRtf = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandSaveRtf", commandSaveRtf);
            {
                (commandSaveRtf.Text = "Save as RTF");
            }
            {
                self.AddComponent(commandSaveRtf);
            }
            (commandSaveHtml = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandSaveHtml", commandSaveHtml);
            {
                (commandSaveHtml.Text = "Save as HTML");
            }
            {
                self.AddComponent(commandSaveHtml);
            }
            (commandUndo = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandUndo", commandUndo);
            {
                (commandUndo.ShortcutBuilder = "Ctrl+Z");
            }
            {
                (commandUndo.Text = "Undo");
            }
            {
                self.AddComponent(commandUndo);
            }
            (commandRedo = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandRedo", commandRedo);
            {
                (commandRedo.ShortcutBuilder = "Ctrl+Y");
            }
            {
                (commandRedo.Text = "Redo");
            }
            {
                self.AddComponent(commandRedo);
            }
            (commandCopy = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandCopy", commandCopy);
            {
                (commandCopy.ShortcutBuilder = "Ctrl+C");
            }
            {
                (commandCopy.Text = "Copy");
            }
            {
                self.AddComponent(commandCopy);
            }
            (commandCut = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandCut", commandCut);
            {
                (commandCut.ShortcutBuilder = "Ctrl+X");
            }
            {
                (commandCut.Text = "Cut");
            }
            {
                self.AddComponent(commandCut);
            }
            (commandPaste = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandPaste", commandPaste);
            {
                (commandPaste.ShortcutBuilder = "Ctrl+V");
            }
            {
                (commandPaste.Text = "Paste");
            }
            {
                self.AddComponent(commandPaste);
            }
            (commandDelete = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandDelete", commandDelete);
            {
                (commandDelete.Text = "Delete");
            }
            {
                self.AddComponent(commandDelete);
            }
            (commandSelect = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandSelect", commandSelect);
            {
                (commandSelect.ShortcutBuilder = "Ctrl+A");
            }
            {
                (commandSelect.Text = "Select All");
            }
            {
                self.AddComponent(commandSelect);
            }
            (commandInsertImage = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandInsertImage", commandInsertImage);
            {
                (commandInsertImage.Text = "Insert Image ...");
            }
            {
                self.AddComponent(commandInsertImage);
            }
            (commandEditHyperlink = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandEditHyperlink", commandEditHyperlink);
            {
                (commandEditHyperlink.Text = "Edit Hyperlink ...");
            }
            {
                self.AddComponent(commandEditHyperlink);
            }
            (commandRemoveHyperlink = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandRemoveHyperlink", commandRemoveHyperlink);
            {
                (commandRemoveHyperlink.Text = "Remove Hyperlink");
            }
            {
                self.AddComponent(commandRemoveHyperlink);
            }
            (commandBold = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandBold", commandBold);
            {
                (commandBold.Text = "Bold");
            }
            {
                self.AddComponent(commandBold);
            }
            (commandItalic = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandItalic", commandItalic);
            {
                (commandItalic.Text = "Italic");
            }
            {
                self.AddComponent(commandItalic);
            }
            (commandUnderline = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandUnderline", commandUnderline);
            {
                (commandUnderline.Text = "Underline");
            }
            {
                self.AddComponent(commandUnderline);
            }
            (commandStrike = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandStrike", commandStrike);
            {
                (commandStrike.Text = "Strike");
            }
            {
                self.AddComponent(commandStrike);
            }
            (dialogColor = new (::presentation::controls::GuiColorDialog*)());
            <this>.SetNamedObject("dialogColor", dialogColor);
            {
                (dialogColor.EnabledCustomColor = false);
            }
            {
                self.AddComponent(dialogColor);
            }
            (dialogFont = new (::presentation::controls::GuiFontDialog*)());
            <this>.SetNamedObject("dialogFont", dialogFont);
            {
                (dialogFont.ForceFontExist = true);
            }
            {
                (dialogFont.ShowSelection = true);
            }
            {
                (dialogFont.ShowEffect = false);
            }
            {
                self.AddComponent(dialogFont);
            }
            (commandFont = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandFont", commandFont);
            {
                (commandFont.Text = "Set Font ...");
            }
            {
                self.AddComponent(commandFont);
            }
            (commandColor = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandColor", commandColor);
            {
                (commandColor.Text = "Text Color ...");
            }
            {
                self.AddComponent(commandColor);
            }
            (commandBackColor = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandBackColor", commandBackColor);
            {
                (commandBackColor.Text = "Background Color ...");
            }
            {
                self.AddComponent(commandBackColor);
            }
            (commandViewOnly = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandViewOnly", commandViewOnly);
            {
                (commandViewOnly.ShortcutBuilder = "Ctrl+Shift+P");
            }
            {
                (commandViewOnly.Text = "Preview");
            }
            {
                self.AddComponent(commandViewOnly);
            }
            (commandSelectable = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandSelectable", commandSelectable);
            {
                (commandSelectable.ShortcutBuilder = "Ctrl+Shift+S");
            }
            {
                (commandSelectable.Text = "Selectable");
            }
            {
                self.AddComponent(commandSelectable);
            }
            (commandEditable = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandEditable", commandEditable);
            {
                (commandEditable.ShortcutBuilder = "Ctrl+Shift+E");
            }
            {
                (commandEditable.Text = "Editable");
            }
            {
                self.AddComponent(commandEditable);
            }
            (commandAlignDefault = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandAlignDefault", commandAlignDefault);
            {
                (commandAlignDefault.Text = "Set Alignment to Default (Left)");
            }
            {
                self.AddComponent(commandAlignDefault);
            }
            (commandAlignLeft = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandAlignLeft", commandAlignLeft);
            {
                (commandAlignLeft.Text = "Left");
            }
            {
                self.AddComponent(commandAlignLeft);
            }
            (commandAlignCenter = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandAlignCenter", commandAlignCenter);
            {
                (commandAlignCenter.Text = "Center");
            }
            {
                self.AddComponent(commandAlignCenter);
            }
            (commandAlignRight = new (::presentation::controls::GuiToolstripCommand*)());
            <this>.SetNamedObject("commandAlignRight", commandAlignRight);
            {
                (commandAlignRight.Text = "Right");
            }
            {
                self.AddComponent(commandAlignRight);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorBase* = null of (::demo::DocumentEditorBase*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorBase*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorBase*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = dialogNotImpl.Title;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (dialogNotImpl.Title = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (dialogQueryClose.Title = self.Text);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (dialogMessage.Text = document.ActiveHyperlinkReference);
                    dialogMessage.ShowDialog();
                };
                attach(document.ActiveHyperlinkExecuted, <event-handler>);
            }
            {
                (commandLoadPrivate.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/FormatPrivate", true)));
            }
            {
                (commandLoadPrivate.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/FormatPrivateLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (dialogOpenDoc.ShowDialog())
                    {
                        self.LoadAsPrivateFormat(dialogOpenDoc.FileName);
                    }
                };
                attach(commandLoadPrivate.Executed, <event-handler>);
            }
            {
                (commandSavePrivate.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/FormatPrivate", true)));
            }
            {
                (commandSavePrivate.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/FormatPrivateLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (dialogSaveDoc.FilterIndex = 0);
                    self.SaveDocument();
                };
                attach(commandSavePrivate.Executed, <event-handler>);
            }
            {
                (commandSaveRtf.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/FormatRtf", true)));
            }
            {
                (commandSaveRtf.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/FormatRtfLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (dialogSaveDoc.FilterIndex = 1);
                    self.SaveDocument();
                };
                attach(commandSaveRtf.Executed, <event-handler>);
            }
            {
                (commandSaveHtml.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/FormatHtml", true)));
            }
            {
                (commandSaveHtml.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/FormatHtmlLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (dialogSaveDoc.FilterIndex = 2);
                    self.SaveDocument();
                };
                attach(commandSaveHtml.Executed, <event-handler>);
            }
            {
                (commandUndo.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Undo", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.CanUndo() of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.UndoRedoChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.UndoRedoChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandUndo.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandUndo.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (commandUndo.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/UndoLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    document.Undo();
                };
                attach(commandUndo.Executed, <event-handler>);
            }
            {
                (commandRedo.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Redo", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.CanRedo() of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.UndoRedoChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.UndoRedoChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandRedo.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandRedo.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (commandRedo.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/RedoLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    document.Redo();
                };
                attach(commandRedo.Executed, <event-handler>);
            }
            {
                (commandCopy.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Copy", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.CanCopy() of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandCopy.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandCopy.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (commandCopy.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/CopyLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    document.Copy();
                };
                attach(commandCopy.Executed, <event-handler>);
            }
            {
                (commandCut.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Cut", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorBase* = null of (::demo::DocumentEditorBase*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.HasEditableSelection of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorBase*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.HasEditableSelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.HasEditableSelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorBase*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandCut.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandCut.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (commandCut.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/CutLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    document.Cut();
                };
                attach(commandCut.Executed, <event-handler>);
            }
            {
                (commandPaste.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Paste", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorBase* = null of (::demo::DocumentEditorBase*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = document.CanPaste() of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorBase*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.BoundsComposition.clipboardNotify, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.BoundsComposition.clipboardNotify, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorBase*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandPaste.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandPaste.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (commandPaste.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/PasteLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    document.Paste();
                };
                attach(commandPaste.Executed, <event-handler>);
            }
            {
                (commandDelete.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Delete", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorBase* = null of (::demo::DocumentEditorBase*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.HasEditableSelection of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorBase*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.HasEditableSelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.HasEditableSelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorBase*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandDelete.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandDelete.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (commandDelete.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/RemoveLinkLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    document.SetSelectionText("");
                };
                attach(commandDelete.Executed, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    document.SelectAll();
                };
                attach(commandSelect.Executed, <event-handler>);
            }
            {
                (commandInsertImage.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Image", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.HasEditableCursor() of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandInsertImage.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandInsertImage.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (commandInsertImage.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/ImageLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (dialogOpen.ShowDialog())
                    {
                        var imageService = INativeController::GetCurrentController().ImageService();
                        var image = imageService.CreateImageFromFile(dialogOpen.FileName);
                        var imageData = new (ImageData^)(image, 0);
                        document.EditImage(document.CaretBegin, document.CaretEnd, imageData);
                    }
                };
                attach(commandInsertImage.Executed, <event-handler>);
            }
            {
                (commandEditHyperlink.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Link", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.HasEditableHyperlink(true) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandEditHyperlink.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandEditHyperlink.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (commandEditHyperlink.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/LinkLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    ::system::AsyncCoroutine::CreateAndRun(func (<co-impl> : ::system::AsyncCoroutine::IImpl*) : (::system::Coroutine^)
                    {
                        return new (::system::Coroutine^)
                        {
                            var <co0>mainWindow : ::presentation::controls::GuiWindow* = null of (::presentation::controls::GuiWindow*);

                            var <co1>window : ::demo::HyperlinkWindow* = null of (::demo::HyperlinkWindow*);

                            var <co-state> : ::system::Int32 = 0;

                            var <co-state-before-pause> : ::system::Int32 = (-1);

                            @cpp:Private
                            var <prop>Failure : ::system::Exception^ = null;

                            override func GetFailure() : (::system::Exception^)
                            {
                                return <prop>Failure;
                            }

                            @cpp:Protected
                            func SetFailure(<value> : ::system::Exception^) : (void)
                            {
                                (<prop>Failure = <value>);
                            }

                            @cpp:Private
                            var <prop>Status : ::system::CoroutineStatus = Waiting;

                            override func GetStatus() : (::system::CoroutineStatus)
                            {
                                return <prop>Status;
                            }

                            @cpp:Protected
                            func SetStatus(<value> : ::system::CoroutineStatus) : (void)
                            {
                                (<prop>Status = <value>);
                            }

                            override func Resume(<raise-exception> : ::system::Boolean, <co-result> : ::system::CoroutineResult^) : (::system::Void)
                            {
                                if ((Status != ::system::CoroutineStatus::Waiting))
                                {
                                    raise "Resume should be called only when the coroutine is in the waiting status.";
                                }
                                SetStatus(Executing);
                                try
                                {
                                    if ((<co-state-before-pause> != (-1)))
                                    {
                                        if (<co-result> is null)
                                        {
                                            (<co-state-before-pause> = (-1));
                                        }
                                        else if (<co-result>.Failure is null)
                                        {
                                            (<co-state-before-pause> = (-1));
                                        }
                                        else
                                        {
                                            {
                                                (<co-state-before-pause> = (-1));
                                                raise <co-result>.Failure;
                                            }
                                        }
                                    }
                                    while (true)
                                    {
                                        if ((<co-state> == 0))
                                        {
                                            (<co0>mainWindow = (self.RelatedControlHost as (controls::GuiWindow*)));
                                            (<co1>window = new (HyperlinkWindow*)());
                                            <co1>window.MoveToScreenCenter(<co0>mainWindow.RelatedScreen);
                                            (<co-state> = 2);
                                            continue;
                                        }
                                        if ((<co-state> == 1))
                                        {
                                            if (<co-result> is not null)
                                            {
                                                if (<co-result>.Failure is not null)
                                                {
                                                    raise <co-result>.Failure;
                                                }
                                            }
                                            if (<co1>window.Url is not null)
                                            {
                                                var row = document.CaretBegin.row;
                                                var begin = document.CaretBegin.column;
                                                var end = document.CaretEnd.column;
                                                document.EditHyperlink(row, begin, end, (cast (string) <co1>window.Url), "#NormalLink", "#ActiveLink");
                                            }
                                            delete <co1>window;
                                            SetStatus(Stopped);
                                            return;
                                        }
                                        if ((<co-state> == 2))
                                        {
                                            SetStatus(Waiting);
                                            (<co-state-before-pause> = <co-state>);
                                            (<co-state> = 1);
                                            {
                                                ::system::AsyncCoroutine::AwaitAndRead(<co-impl>, <co1>window.ShowModalAsync(<co0>mainWindow));
                                            }
                                            return;
                                        }
                                    }
                                }
                                catch (<co-ex>)
                                {
                                    SetFailure(<co-ex>);
                                    SetStatus(Stopped);
                                    if (<raise-exception>)
                                    {
                                        raise;
                                    }
                                }
                            }
                        };
                    });
                };
                attach(commandEditHyperlink.Executed, <event-handler>);
            }
            {
                (commandRemoveHyperlink.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/RemoveLink", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.HasEditableHyperlink(false) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandRemoveHyperlink.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandRemoveHyperlink.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (commandRemoveHyperlink.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/RemoveLinkLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var row = document.CaretBegin.row;
                    var begin = document.CaretBegin.column;
                    var end = document.CaretEnd.column;
                    document.RemoveHyperlink(row, begin, end);
                };
                attach(commandRemoveHyperlink.Executed, <event-handler>);
            }
            {
                (commandBold.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Bold", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorBase* = null of (::demo::DocumentEditorBase*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.HasEditableSelection of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorBase*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.HasEditableSelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.HasEditableSelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorBase*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandBold.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandBold.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>0_1 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.SummarizeStyle(<bind-cache>0.CaretBegin, <bind-cache>0.CaretEnd).bold == true) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>0_1(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>0_1 = (attach(<bind-cache>0.ModifiedChanged, <bind-callback>0_1) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>0_1 is not null)
                            {
                                detach(<bind-cache>0.ModifiedChanged, <bind-handler>0_1);
                                (<bind-handler>0_1 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>0_1 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandBold.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandBold.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var style = new (DocumentStyleProperties^)();
                    (style.bold = (!commandBold.Selected));
                    document.EditStyle(document.CaretBegin, document.CaretEnd, style);
                };
                attach(commandBold.Executed, <event-handler>);
            }
            {
                (commandItalic.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Italic", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorBase* = null of (::demo::DocumentEditorBase*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.HasEditableSelection of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorBase*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.HasEditableSelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.HasEditableSelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorBase*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandItalic.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandItalic.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>0_1 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.SummarizeStyle(<bind-cache>0.CaretBegin, <bind-cache>0.CaretEnd).italic == true) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>0_1(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>0_1 = (attach(<bind-cache>0.ModifiedChanged, <bind-callback>0_1) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>0_1 is not null)
                            {
                                detach(<bind-cache>0.ModifiedChanged, <bind-handler>0_1);
                                (<bind-handler>0_1 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>0_1 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandItalic.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandItalic.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var style = new (DocumentStyleProperties^)();
                    (style.italic = (!commandItalic.Selected));
                    document.EditStyle(document.CaretBegin, document.CaretEnd, style);
                };
                attach(commandItalic.Executed, <event-handler>);
            }
            {
                (commandUnderline.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Underline", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorBase* = null of (::demo::DocumentEditorBase*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.HasEditableSelection of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorBase*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.HasEditableSelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.HasEditableSelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorBase*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandUnderline.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandUnderline.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>0_1 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.SummarizeStyle(<bind-cache>0.CaretBegin, <bind-cache>0.CaretEnd).underline == true) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>0_1(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>0_1 = (attach(<bind-cache>0.ModifiedChanged, <bind-callback>0_1) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>0_1 is not null)
                            {
                                detach(<bind-cache>0.ModifiedChanged, <bind-handler>0_1);
                                (<bind-handler>0_1 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>0_1 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandUnderline.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandUnderline.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var style = new (DocumentStyleProperties^)();
                    (style.underline = (!commandUnderline.Selected));
                    document.EditStyle(document.CaretBegin, document.CaretEnd, style);
                };
                attach(commandUnderline.Executed, <event-handler>);
            }
            {
                (commandStrike.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Strike", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorBase* = null of (::demo::DocumentEditorBase*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.HasEditableSelection of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorBase*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.HasEditableSelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.HasEditableSelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorBase*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandStrike.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandStrike.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>0_1 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.SummarizeStyle(<bind-cache>0.CaretBegin, <bind-cache>0.CaretEnd).strikeline == true) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    func <bind-callback>0_1(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>0_1 = (attach(<bind-cache>0.ModifiedChanged, <bind-callback>0_1) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>0_1 is not null)
                            {
                                detach(<bind-cache>0.ModifiedChanged, <bind-handler>0_1);
                                (<bind-handler>0_1 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>0_1 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandStrike.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandStrike.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var style = new (DocumentStyleProperties^)();
                    (style.strikeline = (!commandStrike.Selected));
                    document.EditStyle(document.CaretBegin, document.CaretEnd, style);
                };
                attach(commandStrike.Executed, <event-handler>);
            }
            {
                (commandFont.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Font", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorBase* = null of (::demo::DocumentEditorBase*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.HasEditableSelection of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorBase*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.HasEditableSelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.HasEditableSelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorBase*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandFont.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandFont.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var begin = document.CaretBegin;
                    var end = document.CaretEnd;
                    var style = document.SummarizeStyle(begin, end);
                    var baselineFont = document.DisplayFont;
                    (dialogFont.SelectedFont = {fontFamily : style.face is null ? baselineFont.fontFamily : (cast (string) style.face); size : style.size is null ? baselineFont.size : (cast (int) style.size.size);});
                    if (dialogFont.ShowDialog())
                    {
                        (style = new (DocumentStyleProperties^)());
                        var selectedFont = dialogFont.SelectedFont;
                        (style.face = selectedFont.fontFamily);
                        (style.size = {size : selectedFont.size; relative : false;});
                        document.EditStyle(begin, end, style);
                    }
                };
                attach(commandFont.Executed, <event-handler>);
            }
            {
                (commandColor.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Color", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorBase* = null of (::demo::DocumentEditorBase*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.HasEditableSelection of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorBase*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.HasEditableSelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.HasEditableSelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorBase*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandColor.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandColor.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var begin = document.CaretBegin;
                    var end = document.CaretEnd;
                    var selectedColor = document.SummarizeStyle(begin, end).color;
                    if (selectedColor is null)
                    {
                        (dialogColor.SelectedColor = (cast (Color) "#000000"));
                    }
                    else
                    {
                        (dialogColor.SelectedColor = (cast (Color) selectedColor));
                    }
                    if (dialogColor.ShowDialog())
                    {
                        var style = new (DocumentStyleProperties^)();
                        (style.color = dialogColor.SelectedColor);
                        document.EditStyle(begin, end, style);
                    }
                };
                attach(commandColor.Executed, <event-handler>);
            }
            {
                (commandBackColor.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/BackColor", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorBase* = null of (::demo::DocumentEditorBase*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.HasEditableSelection of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorBase*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.HasEditableSelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.HasEditableSelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorBase*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandBackColor.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandBackColor.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var begin = document.CaretBegin;
                    var end = document.CaretEnd;
                    var selectedColor = document.SummarizeStyle(begin, end).backgroundColor;
                    if (selectedColor is null)
                    {
                        (dialogColor.SelectedColor = (cast (Color) "#000000"));
                    }
                    else
                    {
                        (dialogColor.SelectedColor = (cast (Color) selectedColor));
                    }
                    if (dialogColor.ShowDialog())
                    {
                        var style = new (DocumentStyleProperties^)();
                        (style.backgroundColor = dialogColor.SelectedColor);
                        document.EditStyle(begin, end, style);
                    }
                };
                attach(commandBackColor.Executed, <event-handler>);
            }
            {
                (commandViewOnly.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/ViewOnly", true)));
            }
            {
                (commandViewOnly.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/ViewOnlyLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.SetEditMode(ViewOnly);
                };
                attach(commandViewOnly.Executed, <event-handler>);
            }
            {
                (commandSelectable.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Selectable", true)));
            }
            {
                (commandSelectable.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/SelectableLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.SetEditMode(Selectable);
                };
                attach(commandSelectable.Executed, <event-handler>);
            }
            {
                (commandEditable.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/Editable", true)));
            }
            {
                (commandEditable.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/EditableLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.SetEditMode(Editable);
                };
                attach(commandEditable.Executed, <event-handler>);
            }
            {
                (commandAlignDefault.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlign", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.HasEditableCursor() of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandAlignDefault.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandAlignDefault.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.SetAlignment(null);
                };
                attach(commandAlignDefault.Executed, <event-handler>);
            }
            {
                (commandAlignLeft.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlignLeft", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.HasEditableCursor() of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandAlignLeft.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandAlignLeft.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (self.SelectAlignmentCommand() == commandAlignLeft) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandAlignLeft.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandAlignLeft.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (commandAlignLeft.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlignLeftLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.SetAlignment(Left);
                };
                attach(commandAlignLeft.Executed, <event-handler>);
            }
            {
                (commandAlignCenter.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlignCenter", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.HasEditableCursor() of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandAlignCenter.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandAlignCenter.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (self.SelectAlignmentCommand() == commandAlignCenter) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandAlignCenter.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandAlignCenter.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (commandAlignCenter.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlignCenterLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.SetAlignment(Center);
                };
                attach(commandAlignCenter.Executed, <event-handler>);
            }
            {
                (commandAlignRight.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlignRight", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.HasEditableCursor() of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandAlignRight.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandAlignRight.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (self.SelectAlignmentCommand() == commandAlignRight) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = commandAlignRight.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (commandAlignRight.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (commandAlignRight.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlignRightLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.SetAlignment(Right);
                };
                attach(commandAlignRight.Executed, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.CanCut() of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.HasEditableSelection;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.HasEditableSelection = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(47/115)================================
module <instance>demo::DocumentEditorBase;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:File("DocumentEditorBase")
    @cpp:Friend(typeof(DocumentEditorBaseConstructor))
    class DocumentEditorBase : ::presentation::controls::GuiCustomControl, DocumentEditorBaseConstructor
    {
        @cpp:Protected
        @cpp:Private
        var <prop>EditModeCommand : ToolstripCommand* = null;

        func GetEditModeCommand() : (ToolstripCommand*)
        {
            return <prop>EditModeCommand;
        }

        @cpp:Protected
        func SetEditModeCommand(<value> : ToolstripCommand*) : (void)
        {
            if ((<prop>EditModeCommand != <value>))
            {
                (<prop>EditModeCommand = <value>);
                EditModeCommandChanged();
            }
        }

        event EditModeCommandChanged();

        prop EditModeCommand : ToolstripCommand*{GetEditModeCommand : EditModeCommandChanged}

        @cpp:Private
        func SetEditMode(editMode : DocumentCommonInterface::EditMode) : (void)
        {
            var command = (editMode == DocumentCommonInterface::EditMode::ViewOnly) ? commandViewOnly : (editMode == DocumentCommonInterface::EditMode::Selectable) ? commandSelectable : commandEditable;
            (document.EditMode = editMode);
            (commandViewOnly.Selected = (command == commandViewOnly));
            (commandSelectable.Selected = (command == commandSelectable));
            (commandEditable.Selected = (command == commandEditable));
            SetEditModeCommand(command);
            self.UpdateSubscriptions();
        }

        @cpp:Protected
        func SelectAlignmentCommand() : (ToolstripCommand*)
        {
            var alignment = document.SummarizeParagraphAlignment(document.CaretBegin, document.CaretEnd);
            return (alignment == Alignment::Left) ? commandAlignLeft : (alignment == Alignment::Center) ? commandAlignCenter : (alignment == Alignment::Right) ? commandAlignRight : commandAlignDefault;
        }

        @cpp:Private
        func SetAlignment(alignment : Alignment?) : (void)
        {
            document.SetParagraphAlignment(document.CaretBegin, document.CaretEnd, alignment);
            self.UpdateSubscriptions();
        }

        @cpp:Private
        @cpp:Private
        var <prop>HasEditableSelection : bool = false;

        func GetHasEditableSelection() : (bool)
        {
            return <prop>HasEditableSelection;
        }

        func SetHasEditableSelection(<value> : bool) : (void)
        {
            if ((<prop>HasEditableSelection != <value>))
            {
                (<prop>HasEditableSelection = <value>);
                HasEditableSelectionChanged();
            }
        }

        event HasEditableSelectionChanged();

        prop HasEditableSelection : bool{GetHasEditableSelection, SetHasEditableSelection : HasEditableSelectionChanged}

        @cpp:Private
        @cpp:Private
        var <prop>HasEditableSelectionInSingleParagraph : bool = false;

        func GetHasEditableSelectionInSingleParagraph() : (bool)
        {
            return <prop>HasEditableSelectionInSingleParagraph;
        }

        func SetHasEditableSelectionInSingleParagraph(<value> : bool) : (void)
        {
            if ((<prop>HasEditableSelectionInSingleParagraph != <value>))
            {
                (<prop>HasEditableSelectionInSingleParagraph = <value>);
                HasEditableSelectionInSingleParagraphChanged();
            }
        }

        event HasEditableSelectionInSingleParagraphChanged();

        prop HasEditableSelectionInSingleParagraph : bool{GetHasEditableSelectionInSingleParagraph, SetHasEditableSelectionInSingleParagraph : HasEditableSelectionInSingleParagraphChanged}

        @cpp:Private
        func HasEditableCursor() : (bool)
        {
            return (document.EditMode == DocumentCommonInterface::EditMode::Editable);
        }

        @cpp:Private
        func HasEditableHyperlink(forEdit : bool) : (bool)
        {
            var a = document.CaretBegin;
            var b = document.CaretEnd;
            return ((a.row == b.row) and (a.column != b.column));
        }

        @cpp:Protected
        func GetMenuContainer() : (GraphicsComposition*)
        {
            return menuContainer;
        }

        @cpp:Protected
        func GetToolstripContainer() : (GraphicsComposition*)
        {
            return toolstripContainer;
        }

        @cpp:UserImpl
        func LoadAsPrivateFormat(fileName : string) : (void)
        {
            (dialogNotImpl.Text = (("You want to load from \"" & fileName) & "\" as private format, but this function is not implemented in Workflow script."));
            dialogNotImpl.ShowDialog();
        }

        @cpp:UserImpl
        func SaveAsPrivateFormat(fileName : string) : (void)
        {
            (dialogNotImpl.Text = (("You want to save to \"" & fileName) & "\" as private format, but this function is not implemented in Workflow script."));
            dialogNotImpl.ShowDialog();
        }

        @cpp:UserImpl
        func SaveAsRTF(fileName : string) : (void)
        {
            (dialogNotImpl.Text = (("You want to save to \"" & fileName) & "\" as RTF, but this function is not implemented in Workflow script."));
            dialogNotImpl.ShowDialog();
        }

        @cpp:UserImpl
        func SaveAsHTML(fileName : string) : (void)
        {
            (dialogNotImpl.Text = (("You want to save to \"" & fileName) & "\" as HTML, but this function is not implemented in Workflow script."));
            dialogNotImpl.ShowDialog();
        }

        @cpp:Private
        func SaveDocument() : (void)
        {
            if (dialogSaveDoc.ShowDialog())
            {
                {
                    var <switch>3 : ::system::Int32 = dialogSaveDoc.FilterIndex;
                    if ((<switch>3 == 0 of (::system::Int32)))
                    {
                        self.SaveAsPrivateFormat(dialogSaveDoc.FileName);
                        document.NotifyModificationSaved();
                    }
                    else if ((<switch>3 == 1 of (::system::Int32)))
                    {
                        self.SaveAsRTF(dialogSaveDoc.FileName);
                    }
                    else if ((<switch>3 == 2 of (::system::Int32)))
                    {
                        self.SaveAsHTML(dialogSaveDoc.FileName);
                    }
                }
            }
        }

        func CancelWindowClose() : (bool)
        {
            if (document.Modified)
            {
                {
                    var <switch>4 : ::presentation::INativeDialogService::MessageBoxButtonsOutput = dialogQueryClose.ShowDialog();
                    if ((<switch>4 == SelectYes of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                    {
                        if (dialogSaveDocPrivate.ShowDialog())
                        {
                            self.SaveAsPrivateFormat(dialogSaveDocPrivate.FileName);
                            return false;
                        }
                        else
                        {
                            return true;
                        }
                    }
                    else if ((<switch>4 == SelectNo of (::presentation::INativeDialogService::MessageBoxButtonsOutput)))
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
            }
            else
            {
                return false;
            }
        }

        prop MenuContainer : GraphicsComposition*{GetMenuContainer}

        prop ToolstripContainer : GraphicsComposition*{GetToolstripContainer}

        new* ()
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::DocumentEditorBase");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-DocumentEditorBase>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            SetEditMode(Editable);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(48/115)================================
module <constructor>demo::DocumentEditorRibbon;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class DocumentEditorRibbonConstructor
    {
        @cpp:Protected
        var self : ::demo::DocumentEditorRibbon* = null of (::demo::DocumentEditorRibbon*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::GuiToolstripGroupContainer* = null of (::presentation::controls::GuiToolstripGroupContainer*);

        @cpp:Protected
        var <precompile>1 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiRibbonTab* = null of (::presentation::controls::GuiRibbonTab*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::GuiRibbonTabPage* = null of (::presentation::controls::GuiRibbonTabPage*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::GuiRibbonGroup* = null of (::presentation::controls::GuiRibbonGroup*);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>14 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>15 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>16 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>17 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>19 : ::presentation::controls::GuiRibbonButtons* = null of (::presentation::controls::GuiRibbonButtons*);

        @cpp:Protected
        var <precompile>20 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>21 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>23 : ::presentation::controls::GuiRibbonGroup* = null of (::presentation::controls::GuiRibbonGroup*);

        @cpp:Protected
        var <precompile>24 : ::presentation::controls::GuiRibbonButtons* = null of (::presentation::controls::GuiRibbonButtons*);

        @cpp:Protected
        var <precompile>25 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>26 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>27 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>28 : ::presentation::controls::GuiRibbonButtons* = null of (::presentation::controls::GuiRibbonButtons*);

        @cpp:Protected
        var <precompile>29 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>30 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>31 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>32 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>33 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>34 : ::presentation::controls::GuiRibbonGroup* = null of (::presentation::controls::GuiRibbonGroup*);

        @cpp:Protected
        var <precompile>35 : ::presentation::controls::GuiRibbonToolstrips* = null of (::presentation::controls::GuiRibbonToolstrips*);

        @cpp:Protected
        var <precompile>36 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>37 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>38 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var dialogMessage : ::presentation::controls::GuiMessageDialog* = null of (::presentation::controls::GuiMessageDialog*);

        @cpp:Protected
        var toolstripHome : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var buttonHome : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var styleGallery : ::presentation::controls::GuiBindableRibbonGalleryList* = null of (::presentation::controls::GuiBindableRibbonGalleryList*);

        @cpp:Protected
        var <precompile>39 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>40 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>41 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>42 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>43 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>44 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>45 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>46 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>47 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>48 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>49 : ::presentation::controls::GuiRibbonGroup* = null of (::presentation::controls::GuiRibbonGroup*);

        @cpp:Protected
        var <precompile>50 : ::presentation::controls::GuiRibbonButtons* = null of (::presentation::controls::GuiRibbonButtons*);

        @cpp:Protected
        var <precompile>51 : ::presentation::controls::GuiRibbonIconLabel* = null of (::presentation::controls::GuiRibbonIconLabel*);

        @cpp:Protected
        var <precompile>52 : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var <precompile>53 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>54 : ::presentation::controls::GuiRibbonIconLabel* = null of (::presentation::controls::GuiRibbonIconLabel*);

        @cpp:Protected
        var <precompile>55 : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var <precompile>56 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>57 : ::presentation::controls::GuiRibbonIconLabel* = null of (::presentation::controls::GuiRibbonIconLabel*);

        @cpp:Protected
        var <precompile>58 : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var <precompile>59 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>60 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>61 : ::presentation::controls::GuiRibbonButtons* = null of (::presentation::controls::GuiRibbonButtons*);

        @cpp:Protected
        var <precompile>62 : ::presentation::controls::GuiRibbonIconLabel* = null of (::presentation::controls::GuiRibbonIconLabel*);

        @cpp:Protected
        var <precompile>63 : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var <precompile>64 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>65 : ::presentation::controls::GuiRibbonIconLabel* = null of (::presentation::controls::GuiRibbonIconLabel*);

        @cpp:Protected
        var <precompile>66 : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var <precompile>67 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>68 : ::presentation::controls::GuiRibbonIconLabel* = null of (::presentation::controls::GuiRibbonIconLabel*);

        @cpp:Protected
        var <precompile>69 : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var <precompile>70 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>71 : ::presentation::controls::GuiRibbonGroup* = null of (::presentation::controls::GuiRibbonGroup*);

        @cpp:Protected
        var <precompile>72 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>73 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>74 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>75 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>76 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>77 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>78 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>79 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>80 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>81 : ::presentation::controls::GuiRibbonTabPage* = null of (::presentation::controls::GuiRibbonTabPage*);

        @cpp:Protected
        var <precompile>82 : ::presentation::controls::GuiRibbonGroup* = null of (::presentation::controls::GuiRibbonGroup*);

        @cpp:Protected
        var <precompile>83 : ::presentation::controls::GuiRibbonButtons* = null of (::presentation::controls::GuiRibbonButtons*);

        @cpp:Protected
        var <precompile>84 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>85 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>86 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>87 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>88 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>89 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>90 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>91 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>92 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>93 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>94 : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var <precompile>95 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-DocumentEditorRibbon>Initialize(<this> : ::demo::DocumentEditorRibbon*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>7 = self.MenuContainer);
            {
                (<precompile>8 = new (::presentation::controls::GuiRibbonTab*)(::presentation::theme::ThemeName::RibbonTab));
            }
            (<precompile>89 = <precompile>8.AfterHeaders);
            (<precompile>90 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>90.Direction = Horizontal of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>90.AlignmentToParent = {left : 0; top : (-1); right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>90.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>91 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>92 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>92.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>92.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>92.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (<precompile>92.Text = "Search: ");
            }
            {
                (<precompile>91.OwnedElement = <precompile>92);
            }
            {
                <precompile>90.AddChild(<precompile>91);
            }
            (<precompile>93 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>94 = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
            }
            (<precompile>95 = <precompile>94.BoundsComposition);
            {
                (<precompile>95.PreferredMinSize = {x : 180;} of (::presentation::Size));
            }
            {
                (<precompile>95.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 1;} of (::presentation::Margin));
            }
            {
                (<precompile>94.Alt = "S");
            }
            {
                <precompile>93.AddChild(<precompile>94.BoundsComposition);
            }
            {
                <precompile>90.AddChild(<precompile>93);
            }
            {
                <precompile>89.AddChild(<precompile>90);
            }
            (<precompile>87 = <precompile>8.BeforeHeaders);
            {
                (buttonHome = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
                <this>.SetNamedObject("buttonHome", buttonHome);
            }
            (<precompile>88 = buttonHome.BoundsComposition);
            {
                (<precompile>88.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (buttonHome.Text = "  HOME  ");
            }
            {
                <precompile>87.AddChild(buttonHome.BoundsComposition);
            }
            {
                (<precompile>10 = new (::presentation::controls::GuiRibbonTabPage*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>12 = new (::presentation::controls::GuiRibbonGroup*)(::presentation::theme::ThemeName::RibbonGroup));
            }
            {
                (<precompile>12.Expandable = true);
            }
            {
                (<precompile>13 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::RibbonLargeDropdownButton));
            }
            {
                (<precompile>13.Alt = "E");
            }
            {
                (<precompile>13.Text = "Edit Mode");
            }
            (<precompile>14 = <precompile>13.EnsureToolstripSubMenu());
            {
                (<precompile>15 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>15.Alt = "V");
            }
            {
                <precompile>14.ToolstripItems.Add(<precompile>15);
            }
            {
                (<precompile>16 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>16.Alt = "S");
            }
            {
                <precompile>14.ToolstripItems.Add(<precompile>16);
            }
            {
                (<precompile>17 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>17.Alt = "E");
            }
            {
                <precompile>14.ToolstripItems.Add(<precompile>17);
            }
            {
                var <collection> = <precompile>12.Items;
                <collection>.Add(<precompile>13);
            }
            {
                (<precompile>18 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::RibbonSplitter));
            }
            {
                var <collection> = <precompile>12.Items;
                <collection>.Add(<precompile>18);
            }
            {
                (<precompile>19 = new (::presentation::controls::GuiRibbonButtons*)(::presentation::theme::ThemeName::RibbonButtons, Large of (::presentation::controls::RibbonButtonSize), Icon of (::presentation::controls::RibbonButtonSize)));
            }
            {
                (<precompile>20 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>20.Alt = "L");
            }
            {
                var <collection> = <precompile>19.Buttons;
                <collection>.Add(<precompile>20);
            }
            {
                (<precompile>21 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>21.Alt = "C");
            }
            {
                var <collection> = <precompile>19.Buttons;
                <collection>.Add(<precompile>21);
            }
            {
                (<precompile>22 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>22.Alt = "R");
            }
            {
                var <collection> = <precompile>19.Buttons;
                <collection>.Add(<precompile>22);
            }
            {
                var <collection> = <precompile>12.Items;
                <collection>.Add(<precompile>19);
            }
            {
                (<precompile>12.Alt = "A");
            }
            {
                (<precompile>12.Text = "Alignment");
            }
            {
                var <collection> = <precompile>10.Groups;
                <collection>.Add(<precompile>12);
            }
            {
                (<precompile>23 = new (::presentation::controls::GuiRibbonGroup*)(::presentation::theme::ThemeName::RibbonGroup));
            }
            {
                (<precompile>24 = new (::presentation::controls::GuiRibbonButtons*)(::presentation::theme::ThemeName::RibbonButtons, Large of (::presentation::controls::RibbonButtonSize), Icon of (::presentation::controls::RibbonButtonSize)));
            }
            {
                (<precompile>25 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>25.Alt = "U");
            }
            {
                var <collection> = <precompile>24.Buttons;
                <collection>.Add(<precompile>25);
            }
            {
                (<precompile>26 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>26.Alt = "R");
            }
            {
                var <collection> = <precompile>24.Buttons;
                <collection>.Add(<precompile>26);
            }
            {
                var <collection> = <precompile>23.Items;
                <collection>.Add(<precompile>24);
            }
            {
                (<precompile>27 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::RibbonSplitter));
            }
            {
                var <collection> = <precompile>23.Items;
                <collection>.Add(<precompile>27);
            }
            {
                (<precompile>28 = new (::presentation::controls::GuiRibbonButtons*)(::presentation::theme::ThemeName::RibbonButtons, Large of (::presentation::controls::RibbonButtonSize), Icon of (::presentation::controls::RibbonButtonSize)));
            }
            {
                (<precompile>29 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>29.Alt = "C");
            }
            {
                var <collection> = <precompile>28.Buttons;
                <collection>.Add(<precompile>29);
            }
            {
                (<precompile>30 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>30.Alt = "X");
            }
            {
                var <collection> = <precompile>28.Buttons;
                <collection>.Add(<precompile>30);
            }
            {
                (<precompile>31 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>31.Alt = "P");
            }
            {
                var <collection> = <precompile>28.Buttons;
                <collection>.Add(<precompile>31);
            }
            {
                var <collection> = <precompile>23.Items;
                <collection>.Add(<precompile>28);
            }
            {
                (<precompile>32 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::RibbonSplitter));
            }
            {
                var <collection> = <precompile>23.Items;
                <collection>.Add(<precompile>32);
            }
            {
                (<precompile>33 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::RibbonLargeButton));
            }
            {
                (<precompile>33.Alt = "D");
            }
            {
                var <collection> = <precompile>23.Items;
                <collection>.Add(<precompile>33);
            }
            {
                (<precompile>23.Alt = "E");
            }
            {
                (<precompile>23.Text = "Edit");
            }
            {
                var <collection> = <precompile>10.Groups;
                <collection>.Add(<precompile>23);
            }
            {
                (<precompile>34 = new (::presentation::controls::GuiRibbonGroup*)(::presentation::theme::ThemeName::RibbonGroup));
            }
            {
                (<precompile>35 = new (::presentation::controls::GuiRibbonToolstrips*)(::presentation::theme::ThemeName::RibbonToolstrips));
            }
            {
                (<precompile>36 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>37 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>37.Alt = "B");
            }
            {
                <precompile>36.ToolstripItems.Add(<precompile>37);
            }
            {
                (<precompile>38 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>38.Alt = "I");
            }
            {
                <precompile>36.ToolstripItems.Add(<precompile>38);
            }
            {
                var <collection> = <precompile>35.Groups;
                <collection>.Add(<precompile>36);
            }
            {
                (<precompile>39 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>40 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>40.Alt = "U");
            }
            {
                <precompile>39.ToolstripItems.Add(<precompile>40);
            }
            {
                (<precompile>41 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>41.Alt = "S");
            }
            {
                <precompile>39.ToolstripItems.Add(<precompile>41);
            }
            {
                var <collection> = <precompile>35.Groups;
                <collection>.Add(<precompile>39);
            }
            {
                (<precompile>42 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>43 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>43.Alt = "F");
            }
            {
                <precompile>42.ToolstripItems.Add(<precompile>43);
            }
            {
                (<precompile>44 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>44.Alt = "C");
            }
            {
                <precompile>42.ToolstripItems.Add(<precompile>44);
            }
            {
                (<precompile>45 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>45.Alt = "K");
            }
            {
                <precompile>42.ToolstripItems.Add(<precompile>45);
            }
            {
                var <collection> = <precompile>35.Groups;
                <collection>.Add(<precompile>42);
            }
            {
                (<precompile>46 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>47 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>47.Alt = "L");
            }
            {
                <precompile>46.ToolstripItems.Add(<precompile>47);
            }
            {
                (<precompile>48 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>48.Alt = "R");
            }
            {
                <precompile>46.ToolstripItems.Add(<precompile>48);
            }
            {
                var <collection> = <precompile>35.Groups;
                <collection>.Add(<precompile>46);
            }
            {
                var <collection> = <precompile>34.Items;
                <collection>.Add(<precompile>35);
            }
            {
                (<precompile>34.Alt = "T");
            }
            {
                (<precompile>34.Text = "Text");
            }
            {
                var <collection> = <precompile>10.Groups;
                <collection>.Add(<precompile>34);
            }
            {
                (<precompile>49 = new (::presentation::controls::GuiRibbonGroup*)(::presentation::theme::ThemeName::RibbonGroup));
            }
            {
                (<precompile>50 = new (::presentation::controls::GuiRibbonButtons*)(::presentation::theme::ThemeName::RibbonButtons, Small of (::presentation::controls::RibbonButtonSize), Icon of (::presentation::controls::RibbonButtonSize)));
            }
            {
                (<precompile>51 = new (::presentation::controls::GuiRibbonIconLabel*)(::presentation::theme::ThemeName::RibbonIconLabel));
            }
            {
                (<precompile>51.Text = "Left");
            }
            {
                (<precompile>52 = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
            }
            (<precompile>53 = <precompile>52.BoundsComposition);
            {
                (<precompile>53.PreferredMinSize = {x : 36;} of (::presentation::Size));
            }
            {
                (<precompile>53.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>52.Alt = "L");
            }
            {
                <precompile>51.AddChild(<precompile>52);
            }
            {
                var <collection> = <precompile>50.Buttons;
                <collection>.Add(<precompile>51);
            }
            {
                (<precompile>54 = new (::presentation::controls::GuiRibbonIconLabel*)(::presentation::theme::ThemeName::RibbonIconLabel));
            }
            {
                (<precompile>54.Text = "Center");
            }
            {
                (<precompile>55 = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
            }
            (<precompile>56 = <precompile>55.BoundsComposition);
            {
                (<precompile>56.PreferredMinSize = {x : 36;} of (::presentation::Size));
            }
            {
                (<precompile>56.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>55.Alt = "C");
            }
            {
                <precompile>54.AddChild(<precompile>55);
            }
            {
                var <collection> = <precompile>50.Buttons;
                <collection>.Add(<precompile>54);
            }
            {
                (<precompile>57 = new (::presentation::controls::GuiRibbonIconLabel*)(::presentation::theme::ThemeName::RibbonIconLabel));
            }
            {
                (<precompile>57.Text = "Right");
            }
            {
                (<precompile>58 = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
            }
            (<precompile>59 = <precompile>58.BoundsComposition);
            {
                (<precompile>59.PreferredMinSize = {x : 36;} of (::presentation::Size));
            }
            {
                (<precompile>59.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>58.Alt = "R");
            }
            {
                <precompile>57.AddChild(<precompile>58);
            }
            {
                var <collection> = <precompile>50.Buttons;
                <collection>.Add(<precompile>57);
            }
            {
                var <collection> = <precompile>49.Items;
                <collection>.Add(<precompile>50);
            }
            {
                (<precompile>60 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::RibbonSplitter));
            }
            {
                var <collection> = <precompile>49.Items;
                <collection>.Add(<precompile>60);
            }
            {
                (<precompile>61 = new (::presentation::controls::GuiRibbonButtons*)(::presentation::theme::ThemeName::RibbonButtons, Small of (::presentation::controls::RibbonButtonSize), Icon of (::presentation::controls::RibbonButtonSize)));
            }
            {
                (<precompile>62 = new (::presentation::controls::GuiRibbonIconLabel*)(::presentation::theme::ThemeName::RibbonIconLabel));
            }
            {
                (<precompile>62.Text = "Left");
            }
            {
                (<precompile>63 = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
            }
            (<precompile>64 = <precompile>63.BoundsComposition);
            {
                (<precompile>64.PreferredMinSize = {x : 36;} of (::presentation::Size));
            }
            {
                (<precompile>64.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>63.Alt = "L");
            }
            {
                <precompile>62.AddChild(<precompile>63);
            }
            {
                var <collection> = <precompile>61.Buttons;
                <collection>.Add(<precompile>62);
            }
            {
                (<precompile>65 = new (::presentation::controls::GuiRibbonIconLabel*)(::presentation::theme::ThemeName::RibbonIconLabel));
            }
            {
                (<precompile>65.Text = "Center");
            }
            {
                (<precompile>66 = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
            }
            (<precompile>67 = <precompile>66.BoundsComposition);
            {
                (<precompile>67.PreferredMinSize = {x : 36;} of (::presentation::Size));
            }
            {
                (<precompile>67.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>66.Alt = "C");
            }
            {
                <precompile>65.AddChild(<precompile>66);
            }
            {
                var <collection> = <precompile>61.Buttons;
                <collection>.Add(<precompile>65);
            }
            {
                (<precompile>68 = new (::presentation::controls::GuiRibbonIconLabel*)(::presentation::theme::ThemeName::RibbonIconLabel));
            }
            {
                (<precompile>68.Text = "Right");
            }
            {
                (<precompile>69 = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
            }
            (<precompile>70 = <precompile>69.BoundsComposition);
            {
                (<precompile>70.PreferredMinSize = {x : 36;} of (::presentation::Size));
            }
            {
                (<precompile>70.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>69.Alt = "R");
            }
            {
                <precompile>68.AddChild(<precompile>69);
            }
            {
                var <collection> = <precompile>61.Buttons;
                <collection>.Add(<precompile>68);
            }
            {
                var <collection> = <precompile>49.Items;
                <collection>.Add(<precompile>61);
            }
            {
                (<precompile>49.Alt = "I");
            }
            {
                (<precompile>49.Text = "Icon Labels");
            }
            {
                var <collection> = <precompile>10.Groups;
                <collection>.Add(<precompile>49);
            }
            {
                (<precompile>71 = new (::presentation::controls::GuiRibbonGroup*)(::presentation::theme::ThemeName::RibbonGroup));
            }
            {
                (styleGallery = new (::presentation::controls::GuiBindableRibbonGalleryList*)(::presentation::theme::ThemeName::RibbonGalleryList));
                <this>.SetNamedObject("styleGallery", styleGallery);
            }
            {
                (styleGallery.GroupChildrenProperty = func (<item> : ::system::Object) : (::system::Enumerable^)
                {
                    var item = (cast (demo::StyleGroup^) <item>);
                    return item.Items;
                });
            }
            {
                (styleGallery.GroupTitleProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::StyleGroup^) <item>);
                    return item.Name;
                });
            }
            {
                (styleGallery.VisibleItemCount = 5 of (::system::Int32));
            }
            {
                (styleGallery.MaxCount = 5 of (::system::Int32));
            }
            {
                (styleGallery.MinCount = 2 of (::system::Int32));
            }
            {
                (styleGallery.ItemTemplate = func (<viewModel> : ::system::Object) : (::presentation::templates::GuiListItemTemplate*)
                {
                    {
                        if (<viewModel> is (::demo::StyleItem^))
                        {
                            return new (::demo::StyleItemTemplate*)((cast (::demo::StyleItem^) <viewModel>));
                        }
                    }
                    raise "Cannot find a matched control template to create.";
                });
            }
            (<precompile>72 = styleGallery.SubMenu);
            {
                (<precompile>73 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::RibbonToolstripHeader));
            }
            {
                (<precompile>73.Text = "Header A");
            }
            {
                <precompile>72.ToolstripItems.Add(<precompile>73);
            }
            {
                (<precompile>74 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>74.Text = "Item A1");
            }
            {
                <precompile>72.ToolstripItems.Add(<precompile>74);
            }
            {
                (<precompile>75 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>75.Text = "Item A2");
            }
            {
                <precompile>72.ToolstripItems.Add(<precompile>75);
            }
            {
                (<precompile>76 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>76.Text = "Item A3");
            }
            {
                <precompile>72.ToolstripItems.Add(<precompile>76);
            }
            {
                (<precompile>77 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::RibbonToolstripHeader));
            }
            {
                (<precompile>77.Text = "Header B");
            }
            {
                <precompile>72.ToolstripItems.Add(<precompile>77);
            }
            {
                (<precompile>78 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>78.Text = "Item B1");
            }
            {
                <precompile>72.ToolstripItems.Add(<precompile>78);
            }
            {
                (<precompile>79 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>79.Text = "Item B2");
            }
            {
                <precompile>72.ToolstripItems.Add(<precompile>79);
            }
            {
                (<precompile>80 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>80.Text = "Item B3");
            }
            {
                <precompile>72.ToolstripItems.Add(<precompile>80);
            }
            {
                var <collection> = <precompile>71.Items;
                <collection>.Add(styleGallery);
            }
            {
                (<precompile>71.Alt = "S");
            }
            {
                (<precompile>71.Text = "Style");
            }
            {
                var <collection> = <precompile>10.Groups;
                <collection>.Add(<precompile>71);
            }
            (<precompile>11 = <precompile>10.ContainerComposition);
            {
                (<precompile>11.PreferredMinSize = {y : 110;} of (::presentation::Size));
            }
            {
                (<precompile>10.Alt = "E");
            }
            {
                (<precompile>10.Text = "Edit");
            }
            {
                var <collection> = <precompile>8.Pages;
                <collection>.Add(<precompile>10);
            }
            {
                (<precompile>81 = new (::presentation::controls::GuiRibbonTabPage*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>82 = new (::presentation::controls::GuiRibbonGroup*)(::presentation::theme::ThemeName::RibbonGroup));
            }
            {
                (<precompile>83 = new (::presentation::controls::GuiRibbonButtons*)(::presentation::theme::ThemeName::RibbonButtons, Large of (::presentation::controls::RibbonButtonSize), Small of (::presentation::controls::RibbonButtonSize)));
            }
            {
                (<precompile>84 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>84.Alt = "I");
            }
            {
                var <collection> = <precompile>83.Buttons;
                <collection>.Add(<precompile>84);
            }
            {
                (<precompile>85 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>85.Alt = "L");
            }
            {
                var <collection> = <precompile>83.Buttons;
                <collection>.Add(<precompile>85);
            }
            {
                (<precompile>86 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>86.Alt = "R");
            }
            {
                var <collection> = <precompile>83.Buttons;
                <collection>.Add(<precompile>86);
            }
            {
                var <collection> = <precompile>82.Items;
                <collection>.Add(<precompile>83);
            }
            {
                (<precompile>82.Text = "Object");
            }
            {
                var <collection> = <precompile>81.Groups;
                <collection>.Add(<precompile>82);
            }
            {
                (<precompile>81.Highlighted = true);
            }
            {
                (<precompile>81.Alt = "I");
            }
            {
                (<precompile>81.Text = "Insert");
            }
            {
                var <collection> = <precompile>8.Pages;
                <collection>.Add(<precompile>81);
            }
            (<precompile>9 = <precompile>8.BoundsComposition);
            {
                (<precompile>9.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                (self.Text = "Document Editor (Ribbon)");
            }
            (dialogMessage = new (::presentation::controls::GuiMessageDialog*)());
            <this>.SetNamedObject("dialogMessage", dialogMessage);
            {
                (dialogMessage.Title = "You Expanded a Group!");
            }
            {
                (dialogMessage.Text = "GuiRibbonGroup::ExpandButtonClicked is executed!");
            }
            {
                self.AddComponent(dialogMessage);
            }
            {
                (toolstripHome = new (::presentation::controls::GuiToolstripMenu*)(::presentation::theme::ThemeName::Menu, null));
                <this>.SetNamedObject("toolstripHome", toolstripHome);
            }
            {
                (<precompile>0 = new (::presentation::controls::GuiToolstripGroupContainer*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>1 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>2.Alt = "O");
            }
            {
                <precompile>1.ToolstripItems.Add(<precompile>2);
            }
            {
                <precompile>0.ToolstripItems.Add(<precompile>1);
            }
            {
                (<precompile>3 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>4.Alt = "P");
            }
            {
                <precompile>3.ToolstripItems.Add(<precompile>4);
            }
            {
                (<precompile>5 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>5.Alt = "R");
            }
            {
                <precompile>3.ToolstripItems.Add(<precompile>5);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>6.Alt = "H");
            }
            {
                <precompile>3.ToolstripItems.Add(<precompile>6);
            }
            {
                <precompile>0.ToolstripItems.Add(<precompile>3);
            }
            {
                toolstripHome.ToolstripItems.Add(<precompile>0);
            }
            {
                self.AddControlHostComponent(toolstripHome);
            }
            {
                (<precompile>2.Command = self.commandLoadPrivate);
            }
            {
                (<precompile>4.Command = self.commandSavePrivate);
            }
            {
                (<precompile>5.Command = self.commandSaveRtf);
            }
            {
                (<precompile>6.Command = self.commandSaveHtml);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (self.SelectAlignmentCommand() == self.commandAlignLeft) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self.document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.AlignLeftSelected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.AlignLeftSelected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (self.SelectAlignmentCommand() == self.commandAlignCenter) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self.document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.AlignCenterSelected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.AlignCenterSelected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (self.SelectAlignmentCommand() == self.commandAlignRight) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self.document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.AlignRightSelected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.AlignRightSelected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>15.Command = self.commandViewOnly);
            }
            {
                (<precompile>16.Command = self.commandSelectable);
            }
            {
                (<precompile>17.Command = self.commandEditable);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorRibbon* = null of (::demo::DocumentEditorRibbon*);

                    var <bind-cache>1 : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>1.LargeImage ?? null) of (::presentation::GuiImageData^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        if (<bind-handler>1_0 is not null)
                        {
                            detach(<bind-cache>1.DescriptionChanged, <bind-handler>1_0);
                            (<bind-handler>1_0 = null);
                        }
                        (<bind-cache>1 = (<bind-cache>0.EditModeCommand ?? null of (::presentation::controls::GuiToolstripCommand*)));
                        (<bind-handler>1_0 = (attach(<bind-cache>1.DescriptionChanged, <bind-callback>1_0) ?? null));
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorRibbon*)));
                            (<bind-cache>1 = (<bind-cache>0.EditModeCommand ?? null of (::presentation::controls::GuiToolstripCommand*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.EditModeCommandChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.DescriptionChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.EditModeCommandChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.DescriptionChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorRibbon*));
                            (<bind-cache>1 = null of (::presentation::controls::GuiToolstripCommand*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>13.LargeImage;
                    var <new> = (cast (::presentation::GuiImageData^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>13.LargeImage = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorRibbon* = null of (::demo::DocumentEditorRibbon*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.AlignLeftSelected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorRibbon*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.AlignLeftSelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.AlignLeftSelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorRibbon*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>20.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>20.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>20.Command = self.commandAlignLeft);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorRibbon* = null of (::demo::DocumentEditorRibbon*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.AlignCenterSelected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorRibbon*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.AlignCenterSelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.AlignCenterSelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorRibbon*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>21.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>21.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>21.Command = self.commandAlignCenter);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorRibbon* = null of (::demo::DocumentEditorRibbon*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.AlignRightSelected of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorRibbon*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.AlignRightSelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.AlignRightSelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorRibbon*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>22.Selected;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>22.Selected = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>22.Command = self.commandAlignRight);
            }
            {
                (<precompile>12.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/EditableLarge", true)));
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    dialogMessage.ShowDialog();
                };
                attach(<precompile>12.ExpandButtonClicked, <event-handler>);
            }
            {
                (<precompile>25.Command = self.commandUndo);
            }
            {
                (<precompile>26.Command = self.commandRedo);
            }
            {
                (<precompile>29.Command = self.commandCopy);
            }
            {
                (<precompile>30.Command = self.commandCut);
            }
            {
                (<precompile>31.Command = self.commandPaste);
            }
            {
                (<precompile>33.Command = self.commandDelete);
            }
            {
                (<precompile>23.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/PasteLarge", true)));
            }
            {
                (<precompile>37.Command = self.commandBold);
            }
            {
                (<precompile>38.Command = self.commandItalic);
            }
            {
                (<precompile>40.Command = self.commandUnderline);
            }
            {
                (<precompile>41.Command = self.commandStrike);
            }
            {
                (<precompile>43.Command = self.commandFont);
            }
            {
                (<precompile>44.Command = self.commandColor);
            }
            {
                (<precompile>45.Command = self.commandBackColor);
            }
            {
                (<precompile>47.Command = self.commandEditHyperlink);
            }
            {
                (<precompile>48.Command = self.commandRemoveHyperlink);
            }
            {
                (<precompile>51.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlignLeft", true)));
            }
            {
                (<precompile>54.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlignCenter", true)));
            }
            {
                (<precompile>57.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlignRight", true)));
            }
            {
                (<precompile>62.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlignLeft", true)));
            }
            {
                (<precompile>65.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlignCenter", true)));
            }
            {
                (<precompile>68.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/TextAlignRight", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorRibbon* = null of (::demo::DocumentEditorRibbon*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.StyleGroups of (::system::Enumerable^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorRibbon*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StyleGroupsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StyleGroupsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorRibbon*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = styleGallery.ItemSource;
                    var <new> = (cast (::system::Enumerable^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (styleGallery.ItemSource = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiItemEventArgs*) : (::system::Void)
                {
                    if ((arguments.itemIndex != (-1)))
                    {
                        var pos = styleGallery.IndexToGalleryPos(arguments.itemIndex);
                        self.document.ClearStyle(self.document.CaretBegin, self.document.CaretEnd);
                        self.document.EditStyleName(self.document.CaretBegin, self.document.CaretEnd, self.StyleGroups[pos.group].Items[pos.item].Name);
                    }
                };
                attach(styleGallery.ItemApplied, <event-handler>);
            }
            {
                (<precompile>71.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/EditableLarge", true)));
            }
            {
                (<precompile>84.Command = self.commandInsertImage);
            }
            {
                (<precompile>85.Command = self.commandEditHyperlink);
            }
            {
                (<precompile>86.Command = self.commandRemoveHyperlink);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    toolstripHome.ShowPopup(buttonHome, true);
                };
                attach(buttonHome.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorRibbon* = null of (::demo::DocumentEditorRibbon*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.DisplayFont of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorRibbon*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DisplayFontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DisplayFontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorRibbon*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>92.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>92.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(49/115)================================
module <instance>demo::DocumentEditorRibbon;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(DocumentEditorRibbonConstructor))
    class DocumentEditorRibbon : ::demo::DocumentEditorBase, DocumentEditorRibbonConstructor
    {
        @cpp:Private
        @cpp:Private
        var <prop>AlignLeftSelected : bool = true;

        func GetAlignLeftSelected() : (bool)
        {
            return <prop>AlignLeftSelected;
        }

        func SetAlignLeftSelected(<value> : bool) : (void)
        {
            if ((<prop>AlignLeftSelected != <value>))
            {
                (<prop>AlignLeftSelected = <value>);
                AlignLeftSelectedChanged();
            }
        }

        event AlignLeftSelectedChanged();

        prop AlignLeftSelected : bool{GetAlignLeftSelected, SetAlignLeftSelected : AlignLeftSelectedChanged}

        @cpp:Private
        @cpp:Private
        var <prop>AlignCenterSelected : bool = true;

        func GetAlignCenterSelected() : (bool)
        {
            return <prop>AlignCenterSelected;
        }

        func SetAlignCenterSelected(<value> : bool) : (void)
        {
            if ((<prop>AlignCenterSelected != <value>))
            {
                (<prop>AlignCenterSelected = <value>);
                AlignCenterSelectedChanged();
            }
        }

        event AlignCenterSelectedChanged();

        prop AlignCenterSelected : bool{GetAlignCenterSelected, SetAlignCenterSelected : AlignCenterSelectedChanged}

        @cpp:Private
        @cpp:Private
        var <prop>AlignRightSelected : bool = true;

        func GetAlignRightSelected() : (bool)
        {
            return <prop>AlignRightSelected;
        }

        func SetAlignRightSelected(<value> : bool) : (void)
        {
            if ((<prop>AlignRightSelected != <value>))
            {
                (<prop>AlignRightSelected = <value>);
                AlignRightSelectedChanged();
            }
        }

        event AlignRightSelectedChanged();

        prop AlignRightSelected : bool{GetAlignRightSelected, SetAlignRightSelected : AlignRightSelectedChanged}

        @cpp:Private
        @cpp:Private
        var <prop>StyleGroups : demo::StyleGroup^[] = null;

        func GetStyleGroups() : (demo::StyleGroup^[])
        {
            return <prop>StyleGroups;
        }

        func SetStyleGroups(<value> : demo::StyleGroup^[]) : (void)
        {
            if ((<prop>StyleGroups != <value>))
            {
                (<prop>StyleGroups = <value>);
                StyleGroupsChanged();
            }
        }

        event StyleGroupsChanged();

        prop StyleGroups : demo::StyleGroup^[]{GetStyleGroups, SetStyleGroups : StyleGroupsChanged}

        @cpp:Private
        func GenerateStyleGroups() : (demo::StyleGroup^[])
        {
            var group1 = new (StyleGroup^)();
            (group1.Name = "Headers");
            group1.Items.Add(new (StyleItem^)("Header 1", {size : 2; relative : true;}, (cast (Color) "#FF8000"), null, null, null, null));
            group1.Items.Add(new (StyleItem^)("Header 2", {size : 1.6; relative : true;}, (cast (Color) "#FF8000"), null, null, null, null));
            group1.Items.Add(new (StyleItem^)("Header 3", {size : 1.3; relative : true;}, null, null, null, null, null));
            var group2 = new (StyleGroup^)();
            (group2.Name = "Content");
            group2.Items.Add(new (StyleItem^)("Strong", null, null, true, null, null, null));
            group2.Items.Add(new (StyleItem^)("Quote", null, null, null, true, null, null));
            group2.Items.Add(new (StyleItem^)("Emphasis", null, null, null, true, true, null));
            group2.Items.Add(new (StyleItem^)("Intense Emphasis", null, (cast (Color) "#8080FF"), null, true, true, null));
            group2.Items.Add(new (StyleItem^)("Deleted", null, null, null, null, null, true));
            var styles = document.Document.styles;
            {
                var <for-enumerable>styleItem = group1.Items of (::system::Enumerable^);
                var <for-enumerator>styleItem = <for-enumerable>styleItem.CreateEnumerator();
                while (<for-enumerator>styleItem.Next())
                {
                    var styleItem = (cast (::demo::StyleItem^) <for-enumerator>styleItem.GetCurrent());
                    {
                        styles.Set(styleItem.Name, styleItem.Style);
                    }
                }
            }
            {
                var <for-enumerable>styleItem = group2.Items of (::system::Enumerable^);
                var <for-enumerator>styleItem = <for-enumerable>styleItem.CreateEnumerator();
                while (<for-enumerator>styleItem.Next())
                {
                    var styleItem = (cast (::demo::StyleItem^) <for-enumerator>styleItem.GetCurrent());
                    {
                        styles.Set(styleItem.Name, styleItem.Style);
                    }
                }
            }
            return {group1; group2;};
        }

        @cpp:Private
        func SelectStyleName(styleName : string?) : (void)
        {
            if (styleName is not null)
            {
                {
                    var <for-begin>groupIndex : ::system::Int32 = 0;
                    var <for-end>groupIndex : ::system::Int32 = (StyleGroups.Count - 1);
                    var groupIndex = <for-begin>groupIndex;
                    while ((groupIndex <= <for-end>groupIndex))
                    {
                        {
                            var group = StyleGroups[groupIndex];
                            {
                                var <for-begin>itemIndex : ::system::Int32 = 0;
                                var <for-end>itemIndex : ::system::Int32 = (group.Items.Count - 1);
                                var itemIndex = <for-begin>itemIndex;
                                while ((itemIndex <= <for-end>itemIndex))
                                {
                                    {
                                        if ((group.Items[itemIndex].Name == (cast (string) styleName)))
                                        {
                                            styleGallery.SelectItem(styleGallery.GalleryPosToIndex({group : groupIndex; item : itemIndex;}));
                                            return;
                                        }
                                    }
                                    (itemIndex = (itemIndex + 1));
                                }
                            }
                        }
                        (groupIndex = (groupIndex + 1));
                    }
                }
            }
            styleGallery.SelectItem((-1));
        }

        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::DocumentEditorRibbon");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-DocumentEditorRibbon>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            (StyleGroups = GenerateStyleGroups());
            attach(document.SelectionChanged, func (sender : GuiGraphicsComposition*, arguments : GuiEventArgs*) : (void)
            {
                SelectStyleName(document.SummarizeStyleName(document.CaretBegin, document.CaretEnd));
            });
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(50/115)================================
module <constructor>demo::StyleItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class StyleItemTemplateConstructor
    {
        @cpp:Protected
        var self : ::demo::StyleItemTemplate* = null of (::demo::StyleItemTemplate*);

        @cpp:Protected
        var ViewModel : ::demo::StyleItem^ = null of (::demo::StyleItem^);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::GuiCustomControl* = null of (::presentation::controls::GuiCustomControl*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var containerControl : ::presentation::controls::GuiCustomControl* = null of (::presentation::controls::GuiCustomControl*);

        @cpp:Protected
        var styleLabel : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <demo-StyleItemTemplate>Initialize(<this> : ::demo::StyleItemTemplate*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (self.PreferredMinSize = {x : 72;} of (::presentation::Size));
            }
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (containerControl = new (::presentation::controls::GuiCustomControl*)(::presentation::theme::ThemeName::CustomControl));
                <this>.SetNamedObject("containerControl", containerControl);
            }
            {
                (<precompile>5 = new (::presentation::controls::GuiCustomControl*)(::presentation::theme::ThemeName::CustomControl));
            }
            (<precompile>6 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>6.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>6.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>7 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>7.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (<precompile>6.OwnedElement = <precompile>7);
            }
            {
                <precompile>5.ContainerComposition.AddChild(<precompile>6);
            }
            {
                (containerControl.TooltipControl = <precompile>5);
            }
            (<precompile>4 = containerControl.BoundsComposition);
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 1);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            (styleLabel = new (::presentation::elements::GuiSolidLabelElement^)());
            <this>.SetNamedObject("styleLabel", styleLabel);
            {
                (styleLabel.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (styleLabel.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (styleLabel.Ellipse = true);
            }
            {
                (styleLabel.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (styleLabel.Text = "AaBbCc");
            }
            {
                (<precompile>1.OwnedElement = styleLabel);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(1, 0, 1, 1);
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>3.HorizontalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>3.Ellipse = true);
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            {
                containerControl.ContainerComposition.AddChild(<precompile>0);
            }
            {
                self.AddChild(containerControl.BoundsComposition);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ViewModel.Name of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::StyleItemTemplate* = null of (::demo::StyleItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (cast (Color) <bind-cache>0.Selected ? "#FFFFFF" : "#808080") of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::StyleItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectedChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectedChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::StyleItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>3.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>3.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>3.Font = containerControl.DisplayFont);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ViewModel.Name of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>7.Font = containerControl.DisplayFont);
            }
        }

        new ()
        {
        }
    }
}

================================(51/115)================================
module <instance>demo::StyleItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(StyleItemTemplateConstructor))
    class StyleItemTemplate : ::presentation::templates::GuiTextListItemTemplate, StyleItemTemplateConstructor
    {
        @cpp:Private
        var <parameter>ViewModel : demo::StyleItem^ = null of (::demo::StyleItem^);

        func GetViewModel() : (demo::StyleItem^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : demo::StyleItem^{GetViewModel}

        new* (<ctor-parameter>ViewModel : demo::StyleItem^)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::StyleItemTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-StyleItemTemplate>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            var styles = ViewModel.Style.styles;
            if (styles.color is not null)
            {
                (styleLabel.Color = (cast (Color) styles.color));
            }
            var font = containerControl.DisplayFont;
            var fontFamily = font.fontFamily;
            var bold = font.bold;
            var italic = font.italic;
            var underline = font.underline;
            var strikeline = font.strikeline;
            var size = font.size;
            if (styles.face is not null)
            {
                (fontFamily = (cast (string) styles.face));
            }
            if (styles.bold is not null)
            {
                (bold = (cast (bool) styles.bold));
            }
            if (styles.italic is not null)
            {
                (italic = (cast (bool) styles.italic));
            }
            if (styles.underline is not null)
            {
                (underline = (cast (bool) styles.underline));
            }
            if (styles.strikeline is not null)
            {
                (strikeline = (cast (bool) styles.strikeline));
            }
            if (styles.size is not null)
            {
                var dsize = styles.size;
                if (dsize.relative)
                {
                    (size = (cast (int) Math::Round((dsize.size * font.size))));
                }
                else
                {
                    (size = (cast (int) Math::Round(dsize.size)));
                }
            }
            (styleLabel.Font = {fontFamily : fontFamily; size : size; bold : bold; italic : italic; underline : underline; strikeline : strikeline; antialias : font.antialias; verticalAntialias : font.verticalAntialias;});
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(52/115)================================
module <constructor>demo::DocumentEditorToolstrip;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class DocumentEditorToolstripConstructor
    {
        @cpp:Protected
        var self : ::demo::DocumentEditorToolstrip* = null of (::demo::DocumentEditorToolstrip*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::controls::GuiToolstripMenuBar* = null of (::presentation::controls::GuiToolstripMenuBar*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::GuiToolstripGroupContainer* = null of (::presentation::controls::GuiToolstripGroupContainer*);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>14 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>15 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>16 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>17 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>19 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>20 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>21 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>23 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>24 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>25 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>26 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>27 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>28 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>29 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>30 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>31 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>32 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>33 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>34 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>35 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>36 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>37 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>38 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var buttonAlignment : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>39 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>40 : ::presentation::compositions::GuiGraphicsComposition* = null of (::presentation::compositions::GuiGraphicsComposition*);

        @cpp:Protected
        var <precompile>41 : ::presentation::controls::GuiToolstripToolBar* = null of (::presentation::controls::GuiToolstripToolBar*);

        @cpp:Protected
        var <precompile>42 : ::presentation::controls::GuiToolstripGroupContainer* = null of (::presentation::controls::GuiToolstripGroupContainer*);

        @cpp:Protected
        var <precompile>43 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>44 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>45 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>46 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>47 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>48 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>49 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>50 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>51 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>52 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>53 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>54 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>55 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>56 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>57 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>58 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>59 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>60 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>61 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>62 : ::presentation::controls::GuiToolstripGroup* = null of (::presentation::controls::GuiToolstripGroup*);

        @cpp:Protected
        var <precompile>63 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>64 : ::presentation::controls::GuiToolstripMenu* = null of (::presentation::controls::GuiToolstripMenu*);

        @cpp:Protected
        var <precompile>65 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>66 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>67 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>68 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>69 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>70 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>71 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>72 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>73 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>74 : ::presentation::controls::GuiToolstripButton* = null of (::presentation::controls::GuiToolstripButton*);

        @cpp:Protected
        var <precompile>75 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-DocumentEditorToolstrip>Initialize(<this> : ::demo::DocumentEditorToolstrip*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>40 = self.ToolstripContainer);
            {
                (<precompile>41 = new (::presentation::controls::GuiToolstripToolBar*)(::presentation::theme::ThemeName::ToolstripToolBar));
            }
            (<precompile>75 = <precompile>41.BoundsComposition);
            {
                (<precompile>75.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>42 = new (::presentation::controls::GuiToolstripGroupContainer*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>43 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>44 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripDropdownButton));
            }
            {
                (<precompile>44.Alt = "V");
            }
            (<precompile>45 = <precompile>44.EnsureToolstripSubMenu());
            {
                (<precompile>46 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>46.Alt = "V");
            }
            {
                <precompile>45.ToolstripItems.Add(<precompile>46);
            }
            {
                (<precompile>47 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>47.Alt = "S");
            }
            {
                <precompile>45.ToolstripItems.Add(<precompile>47);
            }
            {
                (<precompile>48 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>48.Alt = "E");
            }
            {
                <precompile>45.ToolstripItems.Add(<precompile>48);
            }
            {
                <precompile>43.ToolstripItems.Add(<precompile>44);
            }
            {
                (buttonAlignment = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripDropdownButton));
                <this>.SetNamedObject("buttonAlignment", buttonAlignment);
            }
            {
                (buttonAlignment.Alt = "P");
            }
            (<precompile>49 = buttonAlignment.EnsureToolstripSubMenu());
            {
                (<precompile>50 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>50.Alt = "D");
            }
            {
                <precompile>49.ToolstripItems.Add(<precompile>50);
            }
            {
                (<precompile>51 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>51.Alt = "L");
            }
            {
                <precompile>49.ToolstripItems.Add(<precompile>51);
            }
            {
                (<precompile>52 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>52.Alt = "C");
            }
            {
                <precompile>49.ToolstripItems.Add(<precompile>52);
            }
            {
                (<precompile>53 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>53.Alt = "R");
            }
            {
                <precompile>49.ToolstripItems.Add(<precompile>53);
            }
            {
                <precompile>43.ToolstripItems.Add(buttonAlignment);
            }
            {
                <precompile>42.ToolstripItems.Add(<precompile>43);
            }
            {
                (<precompile>54 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>55 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>55.Alt = "U");
            }
            {
                <precompile>54.ToolstripItems.Add(<precompile>55);
            }
            {
                (<precompile>56 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>56.Alt = "R");
            }
            {
                <precompile>54.ToolstripItems.Add(<precompile>56);
            }
            {
                <precompile>42.ToolstripItems.Add(<precompile>54);
            }
            {
                (<precompile>57 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>58 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>58.Alt = "C");
            }
            {
                <precompile>57.ToolstripItems.Add(<precompile>58);
            }
            {
                (<precompile>59 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>59.Alt = "X");
            }
            {
                <precompile>57.ToolstripItems.Add(<precompile>59);
            }
            {
                (<precompile>60 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>60.Alt = "P");
            }
            {
                <precompile>57.ToolstripItems.Add(<precompile>60);
            }
            {
                <precompile>42.ToolstripItems.Add(<precompile>57);
            }
            {
                (<precompile>61 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>61.Alt = "D");
            }
            {
                <precompile>42.ToolstripItems.Add(<precompile>61);
            }
            {
                (<precompile>62 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>63 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripSplitButton));
            }
            {
                (<precompile>63.Alt = "I");
            }
            (<precompile>64 = <precompile>63.EnsureToolstripSubMenu());
            {
                (<precompile>65 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>65.Alt = "I");
            }
            {
                <precompile>64.ToolstripItems.Add(<precompile>65);
            }
            {
                (<precompile>66 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>66.Alt = "L");
            }
            {
                <precompile>64.ToolstripItems.Add(<precompile>66);
            }
            {
                (<precompile>67 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>67.Alt = "R");
            }
            {
                <precompile>64.ToolstripItems.Add(<precompile>67);
            }
            {
                <precompile>62.ToolstripItems.Add(<precompile>63);
            }
            {
                (<precompile>68 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>68.Alt = "B");
            }
            {
                <precompile>62.ToolstripItems.Add(<precompile>68);
            }
            {
                (<precompile>69 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>69.Alt = "I");
            }
            {
                <precompile>62.ToolstripItems.Add(<precompile>69);
            }
            {
                (<precompile>70 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>70.Alt = "U");
            }
            {
                <precompile>62.ToolstripItems.Add(<precompile>70);
            }
            {
                (<precompile>71 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>71.Alt = "S");
            }
            {
                <precompile>62.ToolstripItems.Add(<precompile>71);
            }
            {
                (<precompile>72 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>72.Alt = "F");
            }
            {
                <precompile>62.ToolstripItems.Add(<precompile>72);
            }
            {
                (<precompile>73 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>73.Alt = "C");
            }
            {
                <precompile>62.ToolstripItems.Add(<precompile>73);
            }
            {
                (<precompile>74 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::ToolstripButton));
            }
            {
                (<precompile>74.Alt = "K");
            }
            {
                <precompile>62.ToolstripItems.Add(<precompile>74);
            }
            {
                <precompile>42.ToolstripItems.Add(<precompile>62);
            }
            {
                <precompile>41.ToolstripItems.Add(<precompile>42);
            }
            {
                <precompile>40.AddChild(<precompile>41.BoundsComposition);
            }
            (<precompile>0 = self.MenuContainer);
            {
                (<precompile>1 = new (::presentation::controls::GuiToolstripMenuBar*)(::presentation::theme::ThemeName::MenuBar));
            }
            (<precompile>39 = <precompile>1.BoundsComposition);
            {
                (<precompile>39.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuBarButton));
            }
            {
                (<precompile>2.Alt = "F");
            }
            {
                (<precompile>2.Text = "File");
            }
            (<precompile>3 = <precompile>2.EnsureToolstripSubMenu());
            {
                (<precompile>4 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>4.Alt = "O");
            }
            {
                <precompile>3.ToolstripItems.Add(<precompile>4);
            }
            {
                (<precompile>5 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>5.Alt = "S");
            }
            {
                (<precompile>5.Text = "Save as");
            }
            (<precompile>6 = <precompile>5.EnsureToolstripSubMenu());
            {
                (<precompile>7 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>7.Alt = "P");
            }
            {
                <precompile>6.ToolstripItems.Add(<precompile>7);
            }
            {
                (<precompile>8 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>8.Alt = "R");
            }
            {
                <precompile>6.ToolstripItems.Add(<precompile>8);
            }
            {
                (<precompile>9 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>9.Alt = "H");
            }
            {
                <precompile>6.ToolstripItems.Add(<precompile>9);
            }
            {
                <precompile>3.ToolstripItems.Add(<precompile>5);
            }
            {
                <precompile>1.ToolstripItems.Add(<precompile>2);
            }
            {
                (<precompile>10 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuBarButton));
            }
            {
                (<precompile>10.Alt = "E");
            }
            {
                (<precompile>10.Text = "Edit");
            }
            (<precompile>11 = <precompile>10.EnsureToolstripSubMenu());
            {
                (<precompile>12 = new (::presentation::controls::GuiToolstripGroupContainer*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>13 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>14 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>14.Alt = "U");
            }
            {
                <precompile>13.ToolstripItems.Add(<precompile>14);
            }
            {
                (<precompile>15 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>15.Alt = "R");
            }
            {
                <precompile>13.ToolstripItems.Add(<precompile>15);
            }
            {
                <precompile>12.ToolstripItems.Add(<precompile>13);
            }
            {
                (<precompile>16 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>17 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>17.Alt = "C");
            }
            {
                <precompile>16.ToolstripItems.Add(<precompile>17);
            }
            {
                (<precompile>18 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>18.Alt = "X");
            }
            {
                <precompile>16.ToolstripItems.Add(<precompile>18);
            }
            {
                (<precompile>19 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>19.Alt = "P");
            }
            {
                <precompile>16.ToolstripItems.Add(<precompile>19);
            }
            {
                <precompile>12.ToolstripItems.Add(<precompile>16);
            }
            {
                (<precompile>20 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>20.Alt = "D");
            }
            {
                <precompile>12.ToolstripItems.Add(<precompile>20);
            }
            {
                (<precompile>21 = new (::presentation::controls::GuiToolstripGroup*)(::presentation::theme::ThemeName::CustomControl));
            }
            {
                (<precompile>22 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>22.Alt = "A");
            }
            {
                <precompile>21.ToolstripItems.Add(<precompile>22);
            }
            {
                (<precompile>23 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>23.Alt = "O");
            }
            {
                (<precompile>23.Text = "Object");
            }
            (<precompile>24 = <precompile>23.EnsureToolstripSubMenu());
            {
                (<precompile>25 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>25.Alt = "I");
            }
            {
                <precompile>24.ToolstripItems.Add(<precompile>25);
            }
            {
                (<precompile>26 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>26.Alt = "L");
            }
            {
                <precompile>24.ToolstripItems.Add(<precompile>26);
            }
            {
                (<precompile>27 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>27.Alt = "R");
            }
            {
                <precompile>24.ToolstripItems.Add(<precompile>27);
            }
            {
                <precompile>21.ToolstripItems.Add(<precompile>23);
            }
            {
                (<precompile>28 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>28.Alt = "P");
            }
            {
                (<precompile>28.Text = "Paragram Alignment");
            }
            (<precompile>29 = <precompile>28.EnsureToolstripSubMenu());
            {
                (<precompile>30 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>30.Alt = "D");
            }
            {
                <precompile>29.ToolstripItems.Add(<precompile>30);
            }
            {
                (<precompile>31 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>31.Alt = "L");
            }
            {
                <precompile>29.ToolstripItems.Add(<precompile>31);
            }
            {
                (<precompile>32 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>32.Alt = "C");
            }
            {
                <precompile>29.ToolstripItems.Add(<precompile>32);
            }
            {
                (<precompile>33 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>33.Alt = "R");
            }
            {
                <precompile>29.ToolstripItems.Add(<precompile>33);
            }
            {
                <precompile>21.ToolstripItems.Add(<precompile>28);
            }
            {
                <precompile>12.ToolstripItems.Add(<precompile>21);
            }
            {
                <precompile>11.ToolstripItems.Add(<precompile>12);
            }
            {
                <precompile>1.ToolstripItems.Add(<precompile>10);
            }
            {
                (<precompile>34 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuBarButton));
            }
            {
                (<precompile>34.Alt = "V");
            }
            {
                (<precompile>34.Text = "View");
            }
            (<precompile>35 = <precompile>34.EnsureToolstripSubMenu());
            {
                (<precompile>36 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>36.Alt = "V");
            }
            {
                <precompile>35.ToolstripItems.Add(<precompile>36);
            }
            {
                (<precompile>37 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>37.Alt = "S");
            }
            {
                <precompile>35.ToolstripItems.Add(<precompile>37);
            }
            {
                (<precompile>38 = new (::presentation::controls::GuiToolstripButton*)(::presentation::theme::ThemeName::MenuItemButton));
            }
            {
                (<precompile>38.Alt = "E");
            }
            {
                <precompile>35.ToolstripItems.Add(<precompile>38);
            }
            {
                <precompile>1.ToolstripItems.Add(<precompile>34);
            }
            {
                <precompile>0.AddChild(<precompile>1.BoundsComposition);
            }
            {
                (self.Text = "Document Editor (Toolstrip)");
            }
            {
                (<precompile>4.Command = self.commandLoadPrivate);
            }
            {
                (<precompile>7.Command = self.commandSavePrivate);
            }
            {
                (<precompile>8.Command = self.commandSaveRtf);
            }
            {
                (<precompile>9.Command = self.commandSaveHtml);
            }
            {
                (<precompile>5.Image = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "ToolbarImages/FormatPrivate", true)));
            }
            {
                (<precompile>14.Command = self.commandUndo);
            }
            {
                (<precompile>15.Command = self.commandRedo);
            }
            {
                (<precompile>17.Command = self.commandCopy);
            }
            {
                (<precompile>18.Command = self.commandCut);
            }
            {
                (<precompile>19.Command = self.commandPaste);
            }
            {
                (<precompile>20.Command = self.commandDelete);
            }
            {
                (<precompile>22.Command = self.commandSelect);
            }
            {
                (<precompile>25.Command = self.commandInsertImage);
            }
            {
                (<precompile>26.Command = self.commandEditHyperlink);
            }
            {
                (<precompile>27.Command = self.commandRemoveHyperlink);
            }
            {
                (<precompile>30.Command = self.commandAlignDefault);
            }
            {
                (<precompile>31.Command = self.commandAlignLeft);
            }
            {
                (<precompile>32.Command = self.commandAlignCenter);
            }
            {
                (<precompile>33.Command = self.commandAlignRight);
            }
            {
                (<precompile>36.Command = self.commandViewOnly);
            }
            {
                (<precompile>37.Command = self.commandSelectable);
            }
            {
                (<precompile>38.Command = self.commandEditable);
            }
            {
                (<precompile>46.Command = self.commandViewOnly);
            }
            {
                (<precompile>47.Command = self.commandSelectable);
            }
            {
                (<precompile>48.Command = self.commandEditable);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentEditorToolstrip* = null of (::demo::DocumentEditorToolstrip*);

                    var <bind-cache>1 : ::presentation::controls::GuiToolstripCommand* = null of (::presentation::controls::GuiToolstripCommand*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-handler>1_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>1.Image ?? null) of (::presentation::GuiImageData^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        if (<bind-handler>1_0 is not null)
                        {
                            detach(<bind-cache>1.DescriptionChanged, <bind-handler>1_0);
                            (<bind-handler>1_0 = null);
                        }
                        (<bind-cache>1 = (<bind-cache>0.EditModeCommand ?? null of (::presentation::controls::GuiToolstripCommand*)));
                        (<bind-handler>1_0 = (attach(<bind-cache>1.DescriptionChanged, <bind-callback>1_0) ?? null));
                        <bind-activator>();
                    }

                    func <bind-callback>1_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentEditorToolstrip*)));
                            (<bind-cache>1 = (<bind-cache>0.EditModeCommand ?? null of (::presentation::controls::GuiToolstripCommand*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.EditModeCommandChanged, <bind-callback>0_0) ?? null));
                            (<bind-handler>1_0 = (attach(<bind-cache>1.DescriptionChanged, <bind-callback>1_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.EditModeCommandChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            if (<bind-handler>1_0 is not null)
                            {
                                detach(<bind-cache>1.DescriptionChanged, <bind-handler>1_0);
                                (<bind-handler>1_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentEditorToolstrip*));
                            (<bind-cache>1 = null of (::presentation::controls::GuiToolstripCommand*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            (<bind-handler>1_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>44.Image;
                    var <new> = (cast (::presentation::GuiImageData^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>44.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>50.Command = self.commandAlignDefault);
            }
            {
                (<precompile>51.Command = self.commandAlignLeft);
            }
            {
                (<precompile>52.Command = self.commandAlignCenter);
            }
            {
                (<precompile>53.Command = self.commandAlignRight);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.SelectAlignmentCommand().Image of (::presentation::GuiImageData^);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self.document ?? null of (::presentation::controls::GuiDocumentViewer*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.SelectionChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.SelectionChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentViewer*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = buttonAlignment.Image;
                    var <new> = (cast (::presentation::GuiImageData^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (buttonAlignment.Image = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>55.Command = self.commandUndo);
            }
            {
                (<precompile>56.Command = self.commandRedo);
            }
            {
                (<precompile>58.Command = self.commandCopy);
            }
            {
                (<precompile>59.Command = self.commandCut);
            }
            {
                (<precompile>60.Command = self.commandPaste);
            }
            {
                (<precompile>61.Command = self.commandDelete);
            }
            {
                (<precompile>65.Command = self.commandInsertImage);
            }
            {
                (<precompile>66.Command = self.commandEditHyperlink);
            }
            {
                (<precompile>67.Command = self.commandRemoveHyperlink);
            }
            {
                (<precompile>63.Command = self.commandInsertImage);
            }
            {
                (<precompile>68.Command = self.commandBold);
            }
            {
                (<precompile>69.Command = self.commandItalic);
            }
            {
                (<precompile>70.Command = self.commandUnderline);
            }
            {
                (<precompile>71.Command = self.commandStrike);
            }
            {
                (<precompile>72.Command = self.commandFont);
            }
            {
                (<precompile>73.Command = self.commandColor);
            }
            {
                (<precompile>74.Command = self.commandBackColor);
            }
        }

        new ()
        {
        }
    }
}

================================(53/115)================================
module <instance>demo::DocumentEditorToolstrip;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(DocumentEditorToolstripConstructor))
    class DocumentEditorToolstrip : ::demo::DocumentEditorBase, DocumentEditorToolstripConstructor
    {
        new* ()
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::DocumentEditorToolstrip");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-DocumentEditorToolstrip>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(54/115)================================
module <constructor>demo::LocaleSelector;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class LocaleSelectorConstructor
    {
        @cpp:Protected
        var self : ::demo::LocaleSelector* = null of (::demo::LocaleSelector*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>1 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var comboLocales : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        var listLocales : ::presentation::controls::GuiTextList* = null of (::presentation::controls::GuiTextList*);

        @cpp:Protected
        func <demo-LocaleSelector>Initialize(<this> : ::demo::LocaleSelector*) : (::system::Void)
        {
            (self = <this>);
            {
                (listLocales = new (::presentation::controls::GuiTextList*)(::presentation::theme::ThemeName::TextList));
                <this>.SetNamedObject("listLocales", listLocales);
            }
            (<precompile>0 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>0.Text = "en-US");
            }
            {
                var <collection> = listLocales.Items;
                <collection>.Add(<precompile>0);
            }
            (<precompile>1 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>1.Text = "zh-CN");
            }
            {
                var <collection> = listLocales.Items;
                <collection>.Add(<precompile>1);
            }
            {
                (listLocales.HorizontalAlwaysVisible = false);
            }
            {
                (listLocales.VerticalAlwaysVisible = false);
            }
            {
                (comboLocales = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, listLocales));
                <this>.SetNamedObject("comboLocales", comboLocales);
            }
            (<precompile>2 = comboLocales.BoundsComposition);
            {
                (<precompile>2.PreferredMinSize = {x : 120;} of (::presentation::Size));
            }
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(comboLocales);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = self.GetLocaleIndex(<bind-cache>0.Locale) of (::system::Int32);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (Application::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = comboLocales.SelectedIndex;
                    var <new> = (cast (::system::Int32) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (comboLocales.SelectedIndex = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var index = comboLocales.SelectedIndex;
                    if ((index == (-1)))
                    {
                        (index = 0);
                    }
                    (Application::GetApplication().Locale = (cast (Locale) listLocales.Items[index].Text));
                };
                attach(comboLocales.SelectedIndexChanged, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(55/115)================================
module <instance>demo::LocaleSelector;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(LocaleSelectorConstructor))
    class LocaleSelector : ::presentation::controls::GuiCustomControl, LocaleSelectorConstructor
    {
        func GetLocaleIndex(locale : Locale) : (int)
        {
            {
                var <for-begin>i : ::system::Int32 = (0 + 1);
                var <for-end>i : ::system::Int32 = (listLocales.Items.Count - 1);
                var i = <for-begin>i;
                while ((i <= <for-end>i))
                {
                    {
                        if ((listLocales.Items[i].Text == locale))
                        {
                            return i;
                        }
                    }
                    (i = (i + 1));
                }
            }
            return 0;
        }

        new* ()
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::LocaleSelector");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-LocaleSelector>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(56/115)================================
module <constructor>demo::LocalizedColorDialogTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class LocalizedColorDialogTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::LocalizedColorDialogTabPage* = null of (::demo::LocalizedColorDialogTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var dialog : ::presentation::controls::GuiColorDialog* = null of (::presentation::controls::GuiColorDialog*);

        @cpp:Protected
        var background : ::presentation::elements::GuiSolidBackgroundElement^ = null of (::presentation::elements::GuiSolidBackgroundElement^);

        @cpp:Protected
        func <demo-LocalizedColorDialogTabPage>Initialize(<this> : ::demo::LocalizedColorDialogTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "ColorDialog");
            }
            (dialog = new (::presentation::controls::GuiColorDialog*)());
            <this>.SetNamedObject("dialog", dialog);
            {
                (dialog.EnabledCustomColor = true);
            }
            {
                self.AddComponent(dialog);
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = true);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 2);
                <precompile>0.SetRowOption(0, {composeType : Absolute; absolute : 30;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Absolute; absolute : 100;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            (background = new (::presentation::elements::GuiSolidBackgroundElement^)());
            <this>.SetNamedObject("background", background);
            {
                (background.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (<precompile>1.OwnedElement = background);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>3 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>3.Text = "Show Dialog");
            }
            {
                <precompile>2.AddChild(<precompile>3.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (dialog.SelectedColor = background.Color);
                    if (dialog.ShowDialog())
                    {
                        (background.Color = dialog.SelectedColor);
                    }
                };
                attach(<precompile>3.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(57/115)================================
module <instance>demo::LocalizedColorDialogTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(LocalizedColorDialogTabPageConstructor))
    class LocalizedColorDialogTabPage : ::presentation::controls::GuiTabPage, LocalizedColorDialogTabPageConstructor
    {
        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::LocalizedColorDialogTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-LocalizedColorDialogTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(58/115)================================
module <constructor>demo::LocalizedDialogsTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class LocalizedDialogsTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::LocalizedDialogsTabPage* = null of (::demo::LocalizedDialogsTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::demo::LocaleSelector* = null of (::demo::LocaleSelector*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>9 : ::demo::LocalizedMessageDialogTabPage* = null of (::demo::LocalizedMessageDialogTabPage*);

        @cpp:Protected
        var <precompile>10 : ::demo::LocalizedColorDialogTabPage* = null of (::demo::LocalizedColorDialogTabPage*);

        @cpp:Protected
        var <precompile>11 : ::demo::LocalizedFontDialogTabPage* = null of (::demo::LocalizedFontDialogTabPage*);

        @cpp:Protected
        var <precompile>12 : ::demo::LocalizedFileDialogTabPage* = null of (::demo::LocalizedFileDialogTabPage*);

        @cpp:Protected
        func <demo-LocalizedDialogsTabPage>Initialize(<this> : ::demo::LocalizedDialogsTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "Dialogs");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 3);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>2.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (<precompile>2.Text = "Locale only works in FakeDialogService (default in Hosted Mode)");
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 1, 1, 1);
            }
            (<precompile>4 = new (::demo::LocaleSelector*)());
            (<precompile>5 = <precompile>4.BoundsComposition);
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(1, 0, 1, 3);
            }
            {
                (<precompile>7 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            (<precompile>9 = new (::demo::LocalizedMessageDialogTabPage*)());
            {
                (<precompile>9.Alt = "M");
            }
            {
                var <collection> = <precompile>7.Pages;
                <collection>.Add(<precompile>9);
            }
            (<precompile>10 = new (::demo::LocalizedColorDialogTabPage*)());
            {
                (<precompile>10.Alt = "C");
            }
            {
                var <collection> = <precompile>7.Pages;
                <collection>.Add(<precompile>10);
            }
            (<precompile>11 = new (::demo::LocalizedFontDialogTabPage*)());
            {
                (<precompile>11.Alt = "F");
            }
            {
                var <collection> = <precompile>7.Pages;
                <collection>.Add(<precompile>11);
            }
            (<precompile>12 = new (::demo::LocalizedFileDialogTabPage*)());
            {
                (<precompile>12.Alt = "F");
            }
            {
                var <collection> = <precompile>7.Pages;
                <collection>.Add(<precompile>12);
            }
            (<precompile>8 = <precompile>7.BoundsComposition);
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>6.AddChild(<precompile>7.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>6);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedDialogsTabPage* = null of (::demo::LocalizedDialogsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.DisplayFont of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::LocalizedDialogsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DisplayFontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DisplayFontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedDialogsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(59/115)================================
module <instance>demo::LocalizedDialogsTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(LocalizedDialogsTabPageConstructor))
    class LocalizedDialogsTabPage : ::presentation::controls::GuiTabPage, LocalizedDialogsTabPageConstructor
    {
        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::LocalizedDialogsTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-LocalizedDialogsTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(60/115)================================
module <constructor>demo::LocalizedFileDialogTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class LocalizedFileDialogTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::LocalizedFileDialogTabPage* = null of (::demo::LocalizedFileDialogTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>19 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>20 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>21 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>22 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>23 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>24 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>25 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>26 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>27 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>28 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>29 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>30 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>31 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>32 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>33 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>34 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>35 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>36 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>37 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>38 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var dialogOpen : ::presentation::controls::GuiOpenFileDialog* = null of (::presentation::controls::GuiOpenFileDialog*);

        @cpp:Protected
        var txtTitle : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var dialogSave : ::presentation::controls::GuiSaveFileDialog* = null of (::presentation::controls::GuiSaveFileDialog*);

        @cpp:Protected
        var txtDirectory : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var txtFileName : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var txtFilter : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var txtFilterIndex : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var txtDefaultExtension : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var chkFileDialogAllowMultipleSelection : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var chkFileDialogFileMustExist : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var chkFileDialogShowReadOnlyCheckBox : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var chkFileDialogDereferenceLinks : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var chkFileDialogShowNetworkButton : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var chkFileDialogPromptCreateFile : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var chkFileDialogPromptOverwriteFile : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var chkFileDialogDirectoryMustExist : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var chkFileDialogAddToRecent : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        var lstFiles : ::presentation::controls::GuiBindableTextList* = null of (::presentation::controls::GuiBindableTextList*);

        @cpp:Protected
        var <precompile>39 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>40 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>41 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>42 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>43 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>44 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>45 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>46 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>47 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        func <demo-LocalizedFileDialogTabPage>Initialize(<this> : ::demo::LocalizedFileDialogTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "Open/Save FileDialog");
            }
            (dialogOpen = new (::presentation::controls::GuiOpenFileDialog*)());
            <this>.SetNamedObject("dialogOpen", dialogOpen);
            {
                self.AddComponent(dialogOpen);
            }
            (dialogSave = new (::presentation::controls::GuiSaveFileDialog*)());
            <this>.SetNamedObject("dialogSave", dialogSave);
            {
                self.AddComponent(dialogSave);
            }
            (<precompile>0 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>0.Padding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>2 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>2.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>2.BorderVisible = false);
            }
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>2.SetRowsAndColumns(7, 4);
                <precompile>2.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(4, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(5, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetRowOption(6, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(1, {composeType : Absolute; absolute : 200;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>2.SetColumnOption(3, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>4.Text = "Title:");
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>6.Text = "Directory:");
            }
            {
                <precompile>5.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>5);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(2, 0, 1, 1);
            }
            {
                (<precompile>8 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>8.Text = "FileName:");
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>9.SetSite(3, 0, 1, 1);
            }
            {
                (<precompile>10 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>10.Text = "Filter:");
            }
            {
                <precompile>9.AddChild(<precompile>10.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>9);
            }
            (<precompile>11 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>11.SetSite(4, 0, 1, 1);
            }
            {
                (<precompile>12 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>12.Text = "FilterIndex:");
            }
            {
                <precompile>11.AddChild(<precompile>12.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>11);
            }
            (<precompile>13 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>13.SetSite(5, 0, 1, 1);
            }
            {
                (<precompile>14 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>14.Text = "DefaultExtension:");
            }
            {
                <precompile>13.AddChild(<precompile>14.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>13);
            }
            (<precompile>15 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>15.SetSite(0, 1, 1, 1);
            }
            {
                (txtTitle = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("txtTitle", txtTitle);
            }
            (<precompile>16 = txtTitle.BoundsComposition);
            {
                (<precompile>16.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (txtTitle.Text = "The Title");
            }
            {
                <precompile>15.AddChild(txtTitle.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>15);
            }
            (<precompile>17 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>17.SetSite(1, 1, 1, 1);
            }
            {
                (txtDirectory = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("txtDirectory", txtDirectory);
            }
            (<precompile>18 = txtDirectory.BoundsComposition);
            {
                (<precompile>18.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (txtDirectory.Text = "C:\\");
            }
            {
                <precompile>17.AddChild(txtDirectory.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>17);
            }
            (<precompile>19 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>19.SetSite(2, 1, 1, 1);
            }
            {
                (txtFileName = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("txtFileName", txtFileName);
            }
            (<precompile>20 = txtFileName.BoundsComposition);
            {
                (<precompile>20.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (txtFileName.Text = "C:\\File.txt");
            }
            {
                <precompile>19.AddChild(txtFileName.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>19);
            }
            (<precompile>21 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>21.SetSite(3, 1, 1, 1);
            }
            {
                (txtFilter = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("txtFilter", txtFilter);
            }
            (<precompile>22 = txtFilter.BoundsComposition);
            {
                (<precompile>22.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (txtFilter.Text = "Text Files (*.txt)|*.txt|XML Files (*.xml)|*.xml|All Files (*.*)|*.*");
            }
            {
                <precompile>21.AddChild(txtFilter.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>21);
            }
            (<precompile>23 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>23.SetSite(4, 1, 1, 1);
            }
            {
                (txtFilterIndex = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("txtFilterIndex", txtFilterIndex);
            }
            (<precompile>24 = txtFilterIndex.BoundsComposition);
            {
                (<precompile>24.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (txtFilterIndex.Text = "0");
            }
            {
                <precompile>23.AddChild(txtFilterIndex.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>23);
            }
            (<precompile>25 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>25.SetSite(5, 1, 1, 1);
            }
            {
                (txtDefaultExtension = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("txtDefaultExtension", txtDefaultExtension);
            }
            (<precompile>26 = txtDefaultExtension.BoundsComposition);
            {
                (<precompile>26.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (txtDefaultExtension.Text = "txt");
            }
            {
                <precompile>25.AddChild(txtDefaultExtension.BoundsComposition);
            }
            {
                <precompile>2.AddChild(<precompile>25);
            }
            (<precompile>27 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>27.SetSite(0, 2, 7, 1);
            }
            (<precompile>28 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>28.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>28.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>28.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>29 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (chkFileDialogAllowMultipleSelection = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("chkFileDialogAllowMultipleSelection", chkFileDialogAllowMultipleSelection);
            }
            {
                (chkFileDialogAllowMultipleSelection.Text = "FileDialogAllowMultipleSelection");
            }
            {
                <precompile>29.AddChild(chkFileDialogAllowMultipleSelection.BoundsComposition);
            }
            {
                <precompile>28.AddChild(<precompile>29);
            }
            (<precompile>30 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (chkFileDialogFileMustExist = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("chkFileDialogFileMustExist", chkFileDialogFileMustExist);
            }
            {
                (chkFileDialogFileMustExist.Text = "FileDialogFileMustExist");
            }
            {
                <precompile>30.AddChild(chkFileDialogFileMustExist.BoundsComposition);
            }
            {
                <precompile>28.AddChild(<precompile>30);
            }
            (<precompile>31 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (chkFileDialogShowReadOnlyCheckBox = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("chkFileDialogShowReadOnlyCheckBox", chkFileDialogShowReadOnlyCheckBox);
            }
            {
                (chkFileDialogShowReadOnlyCheckBox.Text = "FileDialogShowReadOnlyCheckBox");
            }
            {
                <precompile>31.AddChild(chkFileDialogShowReadOnlyCheckBox.BoundsComposition);
            }
            {
                <precompile>28.AddChild(<precompile>31);
            }
            (<precompile>32 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (chkFileDialogDereferenceLinks = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("chkFileDialogDereferenceLinks", chkFileDialogDereferenceLinks);
            }
            {
                (chkFileDialogDereferenceLinks.Text = "FileDialogDereferenceLinks");
            }
            {
                <precompile>32.AddChild(chkFileDialogDereferenceLinks.BoundsComposition);
            }
            {
                <precompile>28.AddChild(<precompile>32);
            }
            (<precompile>33 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (chkFileDialogShowNetworkButton = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("chkFileDialogShowNetworkButton", chkFileDialogShowNetworkButton);
            }
            {
                (chkFileDialogShowNetworkButton.Text = "FileDialogShowNetworkButton");
            }
            {
                <precompile>33.AddChild(chkFileDialogShowNetworkButton.BoundsComposition);
            }
            {
                <precompile>28.AddChild(<precompile>33);
            }
            (<precompile>34 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (chkFileDialogPromptCreateFile = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("chkFileDialogPromptCreateFile", chkFileDialogPromptCreateFile);
            }
            {
                (chkFileDialogPromptCreateFile.Text = "FileDialogPromptCreateFile");
            }
            {
                <precompile>34.AddChild(chkFileDialogPromptCreateFile.BoundsComposition);
            }
            {
                <precompile>28.AddChild(<precompile>34);
            }
            (<precompile>35 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (chkFileDialogPromptOverwriteFile = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("chkFileDialogPromptOverwriteFile", chkFileDialogPromptOverwriteFile);
            }
            {
                (chkFileDialogPromptOverwriteFile.Text = "FileDialogPromptOverwriteFile");
            }
            {
                <precompile>35.AddChild(chkFileDialogPromptOverwriteFile.BoundsComposition);
            }
            {
                <precompile>28.AddChild(<precompile>35);
            }
            (<precompile>36 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (chkFileDialogDirectoryMustExist = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("chkFileDialogDirectoryMustExist", chkFileDialogDirectoryMustExist);
            }
            {
                (chkFileDialogDirectoryMustExist.Text = "FileDialogDirectoryMustExist");
            }
            {
                <precompile>36.AddChild(chkFileDialogDirectoryMustExist.BoundsComposition);
            }
            {
                <precompile>28.AddChild(<precompile>36);
            }
            (<precompile>37 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (chkFileDialogAddToRecent = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("chkFileDialogAddToRecent", chkFileDialogAddToRecent);
            }
            {
                (chkFileDialogAddToRecent.Text = "FileDialogAddToRecent");
            }
            {
                <precompile>37.AddChild(chkFileDialogAddToRecent.BoundsComposition);
            }
            {
                <precompile>28.AddChild(<precompile>37);
            }
            {
                <precompile>27.AddChild(<precompile>28);
            }
            {
                <precompile>2.AddChild(<precompile>27);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>38 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>39 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>39.Text = "Selected Files:");
            }
            {
                <precompile>38.AddChild(<precompile>39.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>38);
            }
            (<precompile>40 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (lstFiles = new (::presentation::controls::GuiBindableTextList*)(::presentation::theme::ThemeName::TextList));
                <this>.SetNamedObject("lstFiles", lstFiles);
            }
            {
                (lstFiles.HorizontalAlwaysVisible = false);
            }
            {
                (lstFiles.VerticalAlwaysVisible = false);
            }
            (<precompile>41 = lstFiles.BoundsComposition);
            {
                (<precompile>41.PreferredMinSize = {y : 80;} of (::presentation::Size));
            }
            {
                (<precompile>41.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>40.AddChild(lstFiles.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>40);
            }
            (<precompile>42 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>43 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>43.Padding = 5 of (::system::Int32));
            }
            {
                (<precompile>43.Direction = Horizontal of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>43.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>43.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>44 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>45 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>45.Text = "Show Open File Dialog");
            }
            {
                <precompile>44.AddChild(<precompile>45.BoundsComposition);
            }
            {
                <precompile>43.AddChild(<precompile>44);
            }
            (<precompile>46 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>47 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>47.Text = "Show Save File Dialog");
            }
            {
                <precompile>46.AddChild(<precompile>47.BoundsComposition);
            }
            {
                <precompile>43.AddChild(<precompile>46);
            }
            {
                <precompile>42.AddChild(<precompile>43);
            }
            {
                <precompile>0.AddChild(<precompile>42);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                (lstFiles.TextProperty = [(cast (string) $1)]);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.SetDialogProperties(dialogOpen);
                    if (dialogOpen.ShowDialog())
                    {
                        (lstFiles.ItemSource = dialogOpen.FileNames);
                    }
                };
                attach(<precompile>45.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.SetDialogProperties(dialogSave);
                    if (dialogSave.ShowDialog())
                    {
                        (lstFiles.ItemSource = {dialogSave.FileName;} of (string[]));
                    }
                };
                attach(<precompile>47.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(61/115)================================
module <instance>demo::LocalizedFileDialogTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(LocalizedFileDialogTabPageConstructor))
    class LocalizedFileDialogTabPage : ::presentation::controls::GuiTabPage, LocalizedFileDialogTabPageConstructor
    {
        func SetDialogProperties(dialog : GuiFileDialogBase*) : (void)
        {
            (dialog.Title = txtTitle.Text);
            (dialog.Directory = txtDirectory.Text);
            (dialog.FileName = txtFileName.Text);
            (dialog.Filter = txtFilter.Text);
            (dialog.FilterIndex = ((cast (int) txtFilterIndex.Text) ?? 0));
            (dialog.DefaultExtension = txtDefaultExtension.Text);
            var options : INativeDialogService::FileDialogOptions = None;
            if (chkFileDialogAllowMultipleSelection.Selected)
            {
                (options = (options | INativeDialogService::FileDialogOptions::FileDialogAllowMultipleSelection));
            }
            if (chkFileDialogFileMustExist.Selected)
            {
                (options = (options | INativeDialogService::FileDialogOptions::FileDialogFileMustExist));
            }
            if (chkFileDialogShowReadOnlyCheckBox.Selected)
            {
                (options = (options | INativeDialogService::FileDialogOptions::FileDialogShowReadOnlyCheckBox));
            }
            if (chkFileDialogDereferenceLinks.Selected)
            {
                (options = (options | INativeDialogService::FileDialogOptions::FileDialogDereferenceLinks));
            }
            if (chkFileDialogShowNetworkButton.Selected)
            {
                (options = (options | INativeDialogService::FileDialogOptions::FileDialogShowNetworkButton));
            }
            if (chkFileDialogPromptCreateFile.Selected)
            {
                (options = (options | INativeDialogService::FileDialogOptions::FileDialogPromptCreateFile));
            }
            if (chkFileDialogPromptOverwriteFile.Selected)
            {
                (options = (options | INativeDialogService::FileDialogOptions::FileDialogPromptOverwriteFile));
            }
            if (chkFileDialogDirectoryMustExist.Selected)
            {
                (options = (options | INativeDialogService::FileDialogOptions::FileDialogDirectoryMustExist));
            }
            if (chkFileDialogAddToRecent.Selected)
            {
                (options = (options | INativeDialogService::FileDialogOptions::FileDialogAddToRecent));
            }
            (dialog.Options = options);
        }

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::LocalizedFileDialogTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-LocalizedFileDialogTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(62/115)================================
module <constructor>demo::LocalizedFontDialogTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class LocalizedFontDialogTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::LocalizedFontDialogTabPage* = null of (::demo::LocalizedFontDialogTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var dialog : ::presentation::controls::GuiFontDialog* = null of (::presentation::controls::GuiFontDialog*);

        @cpp:Protected
        var label : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var checkEffect : ::presentation::controls::GuiSelectableButton* = null of (::presentation::controls::GuiSelectableButton*);

        @cpp:Protected
        func <demo-LocalizedFontDialogTabPage>Initialize(<this> : ::demo::LocalizedFontDialogTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "FontDialog");
            }
            (dialog = new (::presentation::controls::GuiFontDialog*)());
            <this>.SetNamedObject("dialog", dialog);
            {
                (dialog.ForceFontExist = true);
            }
            {
                self.AddComponent(dialog);
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = true);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(3, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            (label = new (::presentation::elements::GuiSolidLabelElement^)());
            <this>.SetNamedObject("label", label);
            {
                (label.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (label.Text = "Sample Text");
            }
            {
                (<precompile>1.OwnedElement = label);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(1, 0, 1, 1);
            }
            {
                (checkEffect = new (::presentation::controls::GuiSelectableButton*)(::presentation::theme::ThemeName::CheckBox));
                <this>.SetNamedObject("checkEffect", checkEffect);
            }
            {
                (checkEffect.Selected = false);
            }
            {
                (checkEffect.Text = "Effect");
            }
            {
                <precompile>2.AddChild(checkEffect.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>2);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(2, 0, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>4.Text = "Show Dialog");
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                (label.Font = self.DisplayFont);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (dialog.ShowEffect = checkEffect.Selected);
                    (dialog.SelectedFont = label.Font);
                    (dialog.SelectedColor = label.Color);
                    if (dialog.ShowDialog())
                    {
                        (label.Font = dialog.SelectedFont);
                        (label.Color = dialog.SelectedColor);
                    }
                };
                attach(<precompile>4.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(63/115)================================
module <instance>demo::LocalizedFontDialogTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(LocalizedFontDialogTabPageConstructor))
    class LocalizedFontDialogTabPage : ::presentation::controls::GuiTabPage, LocalizedFontDialogTabPageConstructor
    {
        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::LocalizedFontDialogTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-LocalizedFontDialogTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(64/115)================================
module <constructor>demo::LocalizedMessageDialogTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class LocalizedMessageDialogTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::LocalizedMessageDialogTabPage* = null of (::demo::LocalizedMessageDialogTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::GuiBindableTextList* = null of (::presentation::controls::GuiBindableTextList*);

        @cpp:Protected
        var <precompile>19 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>20 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>21 : ::presentation::controls::GuiBindableTextList* = null of (::presentation::controls::GuiBindableTextList*);

        @cpp:Protected
        var <precompile>22 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>23 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>24 : ::presentation::controls::GuiBindableTextList* = null of (::presentation::controls::GuiBindableTextList*);

        @cpp:Protected
        var <precompile>25 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>26 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>27 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>28 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var dialog : ::presentation::controls::GuiMessageDialog* = null of (::presentation::controls::GuiMessageDialog*);

        @cpp:Protected
        var txtTitle : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var txtText : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var comboInput : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        var comboDefaultButton : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        var comboIcon : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        var lblOutput : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        func <demo-LocalizedMessageDialogTabPage>Initialize(<this> : ::demo::LocalizedMessageDialogTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "MessageDialog");
            }
            (dialog = new (::presentation::controls::GuiMessageDialog*)());
            <this>.SetNamedObject("dialog", dialog);
            {
                self.AddComponent(dialog);
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = true);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(7, 3);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(4, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(5, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(6, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Absolute; absolute : 200;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>2.Text = "Title:");
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>4.Text = "Text:");
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(2, 0, 1, 1);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>6.Text = "Input:");
            }
            {
                <precompile>5.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(3, 0, 1, 1);
            }
            {
                (<precompile>8 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>8.Text = "DefaultButton:");
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>9.SetSite(4, 0, 1, 1);
            }
            {
                (<precompile>10 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>10.Text = "Icon:");
            }
            {
                <precompile>9.AddChild(<precompile>10.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>9);
            }
            (<precompile>11 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>11.SetSite(5, 0, 1, 1);
            }
            {
                (<precompile>12 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>12.Text = "Output:");
            }
            {
                <precompile>11.AddChild(<precompile>12.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>11);
            }
            (<precompile>13 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>13.SetSite(0, 1, 1, 1);
            }
            {
                (txtTitle = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("txtTitle", txtTitle);
            }
            (<precompile>14 = txtTitle.BoundsComposition);
            {
                (<precompile>14.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (txtTitle.Text = "The Title");
            }
            {
                <precompile>13.AddChild(txtTitle.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>13);
            }
            (<precompile>15 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>15.SetSite(1, 1, 1, 1);
            }
            {
                (txtText = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
                <this>.SetNamedObject("txtText", txtText);
            }
            (<precompile>16 = txtText.BoundsComposition);
            {
                (<precompile>16.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (txtText.Text = "This is a message!");
            }
            {
                <precompile>15.AddChild(txtText.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>15);
            }
            (<precompile>17 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>17.SetSite(2, 1, 1, 1);
            }
            {
                (<precompile>18 = new (::presentation::controls::GuiBindableTextList*)(::presentation::theme::ThemeName::TextList));
            }
            {
                (<precompile>18.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>18.VerticalAlwaysVisible = false);
            }
            {
                (comboInput = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, <precompile>18));
                <this>.SetNamedObject("comboInput", comboInput);
            }
            (<precompile>19 = comboInput.BoundsComposition);
            {
                (<precompile>19.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>17.AddChild(comboInput.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>17);
            }
            (<precompile>20 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>20.SetSite(3, 1, 1, 1);
            }
            {
                (<precompile>21 = new (::presentation::controls::GuiBindableTextList*)(::presentation::theme::ThemeName::TextList));
            }
            {
                (<precompile>21.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>21.VerticalAlwaysVisible = false);
            }
            {
                (comboDefaultButton = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, <precompile>21));
                <this>.SetNamedObject("comboDefaultButton", comboDefaultButton);
            }
            (<precompile>22 = comboDefaultButton.BoundsComposition);
            {
                (<precompile>22.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>20.AddChild(comboDefaultButton.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>20);
            }
            (<precompile>23 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>23.SetSite(4, 1, 1, 1);
            }
            {
                (<precompile>24 = new (::presentation::controls::GuiBindableTextList*)(::presentation::theme::ThemeName::TextList));
            }
            {
                (<precompile>24.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>24.VerticalAlwaysVisible = false);
            }
            {
                (comboIcon = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, <precompile>24));
                <this>.SetNamedObject("comboIcon", comboIcon);
            }
            (<precompile>25 = comboIcon.BoundsComposition);
            {
                (<precompile>25.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>23.AddChild(comboIcon.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>23);
            }
            (<precompile>26 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>26.SetSite(5, 1, 1, 1);
            }
            {
                (lblOutput = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
                <this>.SetNamedObject("lblOutput", lblOutput);
            }
            {
                <precompile>26.AddChild(lblOutput.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>26);
            }
            (<precompile>27 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>27.SetSite(6, 1, 1, 1);
            }
            {
                (<precompile>28 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>28.Text = "Show Dialog");
            }
            {
                <precompile>27.AddChild(<precompile>28.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>27);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                (<precompile>18.ItemSource = self.inputTexts);
            }
            {
                (<precompile>18.TextProperty = [(cast (string) $1)]);
            }
            {
                (<precompile>21.ItemSource = self.defaultButtonTexts);
            }
            {
                (<precompile>21.TextProperty = [(cast (string) $1)]);
            }
            {
                (<precompile>24.ItemSource = self.iconTexts);
            }
            {
                (<precompile>24.TextProperty = [(cast (string) $1)]);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (dialog.Title = txtTitle.Text);
                    (dialog.Text = txtText.Text);
                    (dialog.Input = self.inputValues[comboInput.SelectedIndex]);
                    (dialog.DefaultButton = self.defaultButtonValues[comboDefaultButton.SelectedIndex]);
                    (dialog.Icon = self.iconValues[comboIcon.SelectedIndex]);
                    var result = dialog.ShowDialog();
                    (lblOutput.Text = self.outputTexts[self.outputValues.IndexOf(result)]);
                };
                attach(<precompile>28.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(65/115)================================
module <instance>demo::LocalizedMessageDialogTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(LocalizedMessageDialogTabPageConstructor))
    class LocalizedMessageDialogTabPage : ::presentation::controls::GuiTabPage, LocalizedMessageDialogTabPageConstructor
    {
        var inputValues : INativeDialogService::MessageBoxButtonsInput[] = {INativeDialogService::MessageBoxButtonsInput::DisplayOK; INativeDialogService::MessageBoxButtonsInput::DisplayOKCancel; INativeDialogService::MessageBoxButtonsInput::DisplayYesNo; INativeDialogService::MessageBoxButtonsInput::DisplayYesNoCancel; INativeDialogService::MessageBoxButtonsInput::DisplayRetryCancel; INativeDialogService::MessageBoxButtonsInput::DisplayAbortRetryIgnore; INativeDialogService::MessageBoxButtonsInput::DisplayCancelTryAgainContinue;};

        var inputTexts : string[] = {"DisplayOK"; "DisplayOKCancel"; "DisplayYesNo"; "DisplayYesNoCancel"; "DisplayRetryCancel"; "DisplayAbortRetryIgnore"; "DisplayCancelTryAgainContinue";};

        var defaultButtonValues : INativeDialogService::MessageBoxDefaultButton[] = {INativeDialogService::MessageBoxDefaultButton::DefaultFirst; INativeDialogService::MessageBoxDefaultButton::DefaultSecond; INativeDialogService::MessageBoxDefaultButton::DefaultThird;};

        var defaultButtonTexts : string[] = {"DefaultFirst"; "DefaultSecond"; "DefaultThird";};

        var iconValues : INativeDialogService::MessageBoxIcons[] = {INativeDialogService::MessageBoxIcons::IconNone; INativeDialogService::MessageBoxIcons::IconError; INativeDialogService::MessageBoxIcons::IconQuestion; INativeDialogService::MessageBoxIcons::IconWarning; INativeDialogService::MessageBoxIcons::IconInformation;};

        var iconTexts : string[] = {"IconNone"; "IconError"; "IconQuestion"; "IconWarning"; "IconInformation";};

        var outputValues : INativeDialogService::MessageBoxButtonsOutput[] = {INativeDialogService::MessageBoxButtonsOutput::SelectOK; INativeDialogService::MessageBoxButtonsOutput::SelectCancel; INativeDialogService::MessageBoxButtonsOutput::SelectYes; INativeDialogService::MessageBoxButtonsOutput::SelectNo; INativeDialogService::MessageBoxButtonsOutput::SelectRetry; INativeDialogService::MessageBoxButtonsOutput::SelectAbort; INativeDialogService::MessageBoxButtonsOutput::SelectIgnore; INativeDialogService::MessageBoxButtonsOutput::SelectTryAgain; INativeDialogService::MessageBoxButtonsOutput::SelectContinue;};

        var outputTexts : string[] = {"SelectOK"; "SelectCancel"; "SelectYes"; "SelectNo"; "SelectRetry"; "SelectAbort"; "SelectIgnore"; "SelectTryAgain"; "SelectContinue";};

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::LocalizedMessageDialogTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-LocalizedMessageDialogTabPage>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            (self.comboInput.SelectedIndex = 0);
            (self.comboDefaultButton.SelectedIndex = 0);
            (self.comboIcon.SelectedIndex = 0);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(66/115)================================
module <constructor>demo::LocalizedStringsTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class LocalizedStringsTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::demo::LocaleSelector* = null of (::demo::LocaleSelector*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::GuiTextList* = null of (::presentation::controls::GuiTextList*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>14 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>15 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>16 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>17 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>19 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>20 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        func <demo-LocalizedStringsTabPage>Initialize(<this> : ::demo::LocalizedStringsTabPage*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 3);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            (<precompile>2 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>2.VerticalAlignment = Center of (::presentation::Alignment));
            }
            {
                (<precompile>2.Color = (cast (::presentation::Color) "#FFFFFF"));
            }
            {
                (<precompile>1.OwnedElement = <precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 1, 1, 1);
            }
            (<precompile>4 = new (::demo::LocaleSelector*)());
            (<precompile>5 = <precompile>4.BoundsComposition);
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(1, 0, 1, 3);
            }
            {
                (<precompile>7 = new (::presentation::controls::GuiTextList*)(::presentation::theme::ThemeName::TextList));
            }
            (<precompile>9 = new (::presentation::controls::list::TextItem^)());
            {
                var <collection> = <precompile>7.Items;
                <collection>.Add(<precompile>9);
            }
            (<precompile>10 = new (::presentation::controls::list::TextItem^)());
            {
                var <collection> = <precompile>7.Items;
                <collection>.Add(<precompile>10);
            }
            (<precompile>11 = new (::presentation::controls::list::TextItem^)());
            {
                var <collection> = <precompile>7.Items;
                <collection>.Add(<precompile>11);
            }
            (<precompile>12 = new (::presentation::controls::list::TextItem^)());
            {
                var <collection> = <precompile>7.Items;
                <collection>.Add(<precompile>12);
            }
            (<precompile>13 = new (::presentation::controls::list::TextItem^)());
            {
                var <collection> = <precompile>7.Items;
                <collection>.Add(<precompile>13);
            }
            (<precompile>14 = new (::presentation::controls::list::TextItem^)());
            {
                var <collection> = <precompile>7.Items;
                <collection>.Add(<precompile>14);
            }
            (<precompile>15 = new (::presentation::controls::list::TextItem^)());
            {
                var <collection> = <precompile>7.Items;
                <collection>.Add(<precompile>15);
            }
            (<precompile>16 = new (::presentation::controls::list::TextItem^)());
            {
                var <collection> = <precompile>7.Items;
                <collection>.Add(<precompile>16);
            }
            (<precompile>17 = new (::presentation::controls::list::TextItem^)());
            {
                var <collection> = <precompile>7.Items;
                <collection>.Add(<precompile>17);
            }
            (<precompile>18 = new (::presentation::controls::list::TextItem^)());
            {
                var <collection> = <precompile>7.Items;
                <collection>.Add(<precompile>18);
            }
            (<precompile>19 = new (::presentation::controls::list::TextItem^)());
            {
                var <collection> = <precompile>7.Items;
                <collection>.Add(<precompile>19);
            }
            (<precompile>20 = new (::presentation::controls::list::TextItem^)());
            {
                var <collection> = <precompile>7.Items;
                <collection>.Add(<precompile>20);
            }
            {
                (<precompile>7.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>7.VerticalAlwaysVisible = false);
            }
            (<precompile>8 = <precompile>7.BoundsComposition);
            {
                (<precompile>8.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>6.AddChild(<precompile>7.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>6);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Label();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.DisplayFont of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DisplayFontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DisplayFontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.ShortDate(self.dateTime);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>9.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>9.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.LongDate(self.dateTime);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>10.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>10.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.YearMonthDate(self.dateTime);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>11.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>11.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.ShortTime(self.dateTime);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>12.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>12.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.LongTime(self.dateTime);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>13.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>13.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.DateFormat(self.dateTime);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>14.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>14.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.TimeFormat(self.dateTime);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>15.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>15.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Number(self.number);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>16.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>16.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Currency(self.currency);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>17.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>17.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Sentence("John Smith");
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>18.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>18.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Sentence("John Smith");
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>19.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>19.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.Strings.Sentence("John Smith") ?? "") of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>20.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>20.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::LocalizedStringsTabPage* = null of (::demo::LocalizedStringsTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Strings.Title();
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (<this> ?? null of (::demo::LocalizedStringsTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.StringsChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.StringsChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::LocalizedStringsTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiApplication* = null of (::presentation::controls::GuiApplication*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = demo::StringResource::Get(<bind-cache>0.Locale);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (presentation::controls::GuiApplication::GetApplication() ?? null of (::presentation::controls::GuiApplication*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LocaleChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LocaleChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiApplication*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = self.Strings;
                    var <new> = (cast (::demo::IStringResourceStrings^) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (self.Strings = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(67/115)================================
module <instance>demo::LocalizedStringsTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(LocalizedStringsTabPageConstructor))
    class LocalizedStringsTabPage : ::presentation::controls::GuiTabPage, LocalizedStringsTabPageConstructor
    {
        var dateTime : DateTime = Sys::GetLocalTime();

        var number : int = 2147483647;

        var currency : double = 1342177.28;

        @cpp:Private
        var <prop>Strings : ::demo::IStringResourceStrings^ = ::demo::StringResource::Get((cast (::system::Locale) "en-US"));

        func GetStrings() : (::demo::IStringResourceStrings^)
        {
            return <prop>Strings;
        }

        func SetStrings(<value> : ::demo::IStringResourceStrings^) : (void)
        {
            if ((<prop>Strings != <value>))
            {
                (<prop>Strings = <value>);
                StringsChanged();
            }
        }

        event StringsChanged();

        prop Strings : ::demo::IStringResourceStrings^{GetStrings, SetStrings : StringsChanged}

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::LocalizedStringsTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-LocalizedStringsTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(68/115)================================
module <constructor>demo::TestWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class TestWindowConstructor
    {
        @cpp:Protected
        var self : ::demo::TestWindow* = null of (::demo::TestWindow*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>2 : ::demo::RefreshTextListTabPage* = null of (::demo::RefreshTextListTabPage*);

        @cpp:Protected
        var <precompile>3 : ::demo::RefreshBindableTextListTabPage* = null of (::demo::RefreshBindableTextListTabPage*);

        @cpp:Protected
        var <precompile>4 : ::demo::RefreshListViewTabPage* = null of (::demo::RefreshListViewTabPage*);

        @cpp:Protected
        var <precompile>5 : ::demo::RefreshBindableListViewTabPage* = null of (::demo::RefreshBindableListViewTabPage*);

        @cpp:Protected
        var <precompile>6 : ::demo::RefreshTreeViewTabPage* = null of (::demo::RefreshTreeViewTabPage*);

        @cpp:Protected
        var <precompile>7 : ::demo::RefreshBindableTreeViewTabPage* = null of (::demo::RefreshBindableTreeViewTabPage*);

        @cpp:Protected
        var <precompile>8 : ::demo::RefreshBindableDataGridTabPage* = null of (::demo::RefreshBindableDataGridTabPage*);

        @cpp:Protected
        func <demo-TestWindow>Initialize(<this> : ::demo::TestWindow*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.ClientSize = {x : 640; y : 480;} of (::presentation::Size));
            }
            {
                (self.Text = "MainWindow");
            }
            {
                (<precompile>0 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            (<precompile>2 = new (::demo::RefreshTextListTabPage*)());
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>2);
            }
            (<precompile>3 = new (::demo::RefreshBindableTextListTabPage*)());
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>3);
            }
            (<precompile>4 = new (::demo::RefreshListViewTabPage*)());
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>4);
            }
            (<precompile>5 = new (::demo::RefreshBindableListViewTabPage*)());
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>5);
            }
            (<precompile>6 = new (::demo::RefreshTreeViewTabPage*)());
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>6);
            }
            (<precompile>7 = new (::demo::RefreshBindableTreeViewTabPage*)());
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>7);
            }
            (<precompile>8 = new (::demo::RefreshBindableDataGridTabPage*)());
            {
                var <collection> = <precompile>0.Pages;
                <collection>.Add(<precompile>8);
            }
            (<precompile>1 = <precompile>0.BoundsComposition);
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                self.AddChild(<precompile>0);
            }
        }

        new ()
        {
        }
    }
}

================================(69/115)================================
module <instance>demo::TestWindow;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(TestWindowConstructor))
    class TestWindow : ::presentation::controls::GuiWindow, TestWindowConstructor
    {
        new* ()
            :::presentation::controls::GuiWindow(::presentation::theme::ThemeName::Window)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::TestWindow");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-TestWindow>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiControlHost*));
        }
    }
}

================================(70/115)================================
module <constructor>demo::RefreshBindableDataGridTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class RefreshBindableDataGridTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::RefreshBindableDataGridTabPage* = null of (::demo::RefreshBindableDataGridTabPage*);

        @cpp:Protected
        var dataGrid : ::presentation::controls::GuiBindableDataGrid* = null of (::presentation::controls::GuiBindableDataGrid*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiTextList* = null of (::presentation::controls::GuiTextList*);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>19 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>20 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>21 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>23 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>24 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>25 : ::presentation::controls::list::DataColumn^ = null of (::presentation::controls::list::DataColumn^);

        @cpp:Protected
        var <precompile>26 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var comboView : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        func <demo-RefreshBindableDataGridTabPage>Initialize(<this> : ::demo::RefreshBindableDataGridTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "BindableDataGrid");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 7);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(4, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(5, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(6, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiTextList*)(::presentation::theme::ThemeName::TextList));
            }
            (<precompile>3 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>3.Text = "BigIcon");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>3);
            }
            (<precompile>4 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>4.Text = "SmallIcon");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>4);
            }
            (<precompile>5 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>5.Text = "List");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>5);
            }
            (<precompile>6 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>6.Text = "Tile");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>6);
            }
            (<precompile>7 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>7.Text = "Information");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>7);
            }
            (<precompile>8 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>8.Text = "Detail");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>8);
            }
            (<precompile>9 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>9.Text = "DataGrid");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>9);
            }
            {
                (<precompile>2.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>2.VerticalAlwaysVisible = false);
            }
            {
                (comboView = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, <precompile>2));
                <this>.SetNamedObject("comboView", comboView);
            }
            {
                (comboView.SelectedIndex = 6 of (::system::Int32));
            }
            (<precompile>10 = comboView.BoundsComposition);
            {
                (<precompile>10.PreferredMinSize = {x : 120;} of (::presentation::Size));
            }
            {
                (comboView.Alt = "V");
            }
            {
                <precompile>1.AddChild(comboView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>11 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>11.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>12 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>12.Text = "Use Name");
            }
            {
                <precompile>11.AddChild(<precompile>12.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>11);
            }
            (<precompile>13 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>13.SetSite(0, 2, 1, 1);
            }
            {
                (<precompile>14 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>14.Text = "Use Title");
            }
            {
                <precompile>13.AddChild(<precompile>14.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>13);
            }
            (<precompile>15 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>15.SetSite(0, 3, 1, 1);
            }
            {
                (<precompile>16 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>16.Text = "*Sub1");
            }
            {
                <precompile>15.AddChild(<precompile>16.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>15);
            }
            (<precompile>17 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>17.SetSite(0, 4, 1, 1);
            }
            {
                (<precompile>18 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>18.Text = "*DataColumn");
            }
            {
                <precompile>17.AddChild(<precompile>18.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>17);
            }
            (<precompile>19 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>19.SetSite(0, 5, 1, 1);
            }
            {
                (<precompile>20 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>20.Text = "*Column");
            }
            {
                <precompile>19.AddChild(<precompile>20.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>19);
            }
            (<precompile>21 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>21.SetSite(1, 0, 1, 7);
            }
            {
                (dataGrid = new (::presentation::controls::GuiBindableDataGrid*)(::presentation::theme::ThemeName::ListView));
                <this>.SetNamedObject("dataGrid", dataGrid);
            }
            {
                (dataGrid.LargeImageProperty = func (<item> : ::system::Object) : (::presentation::GuiImageData^)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.LargeImage;
                });
            }
            {
                var <collection> = dataGrid.DataColumns;
                <collection>.Add(0 of (::system::Int32));
            }
            {
                var <collection> = dataGrid.DataColumns;
                <collection>.Add(1 of (::system::Int32));
            }
            {
                var <collection> = dataGrid.DataColumns;
                <collection>.Add(2 of (::system::Int32));
            }
            {
                (dataGrid.SmallImageProperty = func (<item> : ::system::Object) : (::presentation::GuiImageData^)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.SmallImage;
                });
            }
            (<precompile>26 = dataGrid.BoundsComposition);
            {
                (<precompile>26.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>22 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>22.ValueProperty = func (<item> : ::system::Object, <value> : ::system::Object, <update> : ::system::Boolean) : (::system::Object)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    if (<update>)
                    {
                        (item.Name = (cast (::system::String) <value>));
                        return null of (::system::Object);
                    }
                    else
                    {
                        return item.Name;
                    }
                });
            }
            {
                (<precompile>22.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.Name;
                });
            }
            {
                (<precompile>22.Text = "Id");
            }
            {
                var <collection> = dataGrid.Columns;
                <collection>.Add(<precompile>22);
            }
            (<precompile>23 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>23.ValueProperty = func (<item> : ::system::Object, <value> : ::system::Object, <update> : ::system::Boolean) : (::system::Object)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    if (<update>)
                    {
                        (item.Sub1 = (cast (::system::String) <value>));
                        return null of (::system::Object);
                    }
                    else
                    {
                        return item.Sub1;
                    }
                });
            }
            {
                (<precompile>23.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.Sub1;
                });
            }
            {
                (<precompile>23.Text = "Category");
            }
            {
                var <collection> = dataGrid.Columns;
                <collection>.Add(<precompile>23);
            }
            (<precompile>24 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>24.ValueProperty = func (<item> : ::system::Object, <value> : ::system::Object, <update> : ::system::Boolean) : (::system::Object)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    if (<update>)
                    {
                        (item.Sub2 = (cast (::system::String) <value>));
                        return null of (::system::Object);
                    }
                    else
                    {
                        return item.Sub2;
                    }
                });
            }
            {
                (<precompile>24.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.Sub2;
                });
            }
            {
                (<precompile>24.Text = "Size");
            }
            {
                var <collection> = dataGrid.Columns;
                <collection>.Add(<precompile>24);
            }
            (<precompile>25 = new (::presentation::controls::list::DataColumn^)());
            {
                (<precompile>25.VisualizerFactory = new (::presentation::controls::list::DataVisualizerFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridVisualizerTemplate*)
                {
                    {
                        return new (::presentation::controls::list::CellBorderVisualizerTemplate*)();
                    }
                }, new (::presentation::controls::list::DataVisualizerFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridVisualizerTemplate*)
                {
                    {
                        return new (::presentation::controls::list::FocusRectangleVisualizerTemplate*)();
                    }
                }, new (::presentation::controls::list::DataVisualizerFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridVisualizerTemplate*)
                {
                    {
                        return new (::presentation::controls::list::HyperlinkVisualizerTemplate*)();
                    }
                }, null))));
            }
            {
                (<precompile>25.EditorFactory = new (::presentation::controls::list::DataEditorFactory^)(func (<viewModel> : ::system::Object) : (::presentation::templates::GuiGridEditorTemplate*)
                {
                    {
                        return new (::demo::TextEditor*)();
                    }
                }));
            }
            {
                (<precompile>25.ValueProperty = func (<item> : ::system::Object, <value> : ::system::Object, <update> : ::system::Boolean) : (::system::Object)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    if (<update>)
                    {
                        (item.Sub3 = (cast (::system::String) <value>));
                        return null of (::system::Object);
                    }
                    else
                    {
                        return item.Sub3;
                    }
                });
            }
            {
                (<precompile>25.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.Sub3;
                });
            }
            {
                (<precompile>25.Text = "File");
            }
            {
                var <collection> = dataGrid.Columns;
                <collection>.Add(<precompile>25);
            }
            {
                <precompile>21.AddChild(dataGrid.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>21);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    {
                        var <switch>5 : ::system::Int32 = comboView.SelectedIndex;
                        if ((<switch>5 == 0 of (::system::Int32)))
                        {
                            (dataGrid.View = BigIcon);
                        }
                        else if ((<switch>5 == 1 of (::system::Int32)))
                        {
                            (dataGrid.View = SmallIcon);
                        }
                        else if ((<switch>5 == 2 of (::system::Int32)))
                        {
                            (dataGrid.View = ListViewView::List);
                        }
                        else if ((<switch>5 == 3 of (::system::Int32)))
                        {
                            (dataGrid.View = Tile);
                        }
                        else if ((<switch>5 == 4 of (::system::Int32)))
                        {
                            (dataGrid.View = Information);
                        }
                        else if ((<switch>5 == 5 of (::system::Int32)))
                        {
                            (dataGrid.View = Detail);
                        }
                        else if ((<switch>5 == 6 of (::system::Int32)))
                        {
                            dataGrid.SetViewToDefault();
                        }
                    }
                };
                attach(comboView.SelectedIndexChanged, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (dataGrid.Columns[0].TextProperty = func (value : object) : (string)
                    {
                        return (cast (RefreshItem^) value).Name;
                    });
                };
                attach(<precompile>12.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (dataGrid.Columns[0].TextProperty = func (value : object) : (string)
                    {
                        return (cast (RefreshItem^) value).Title;
                    });
                };
                attach(<precompile>14.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var s = self.items[0].Sub1;
                    (self.items[0].Sub1 = (s == "One") ? "SubColumn" : "One");
                    dataGrid.NotifyItemDataModified(0, 1);
                };
                attach(<precompile>16.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var s = dataGrid.DataColumns[0];
                    var c = dataGrid.DataColumns.Count;
                    if ((c == 3))
                    {
                        if ((s == 0))
                        {
                            (dataGrid.DataColumns[0] = 1);
                        }
                        else
                        {
                            dataGrid.DataColumns.RemoveAt(2);
                        }
                    }
                    else
                    {
                        if ((s == 0))
                        {
                            dataGrid.DataColumns.Add(2);
                        }
                        else
                        {
                            (dataGrid.DataColumns[0] = 0);
                        }
                    }
                };
                attach(<precompile>18.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var s = dataGrid.Columns[1].Text;
                    var c = dataGrid.Columns.Count;
                    if ((c == 4))
                    {
                        if ((s == "Category"))
                        {
                            (dataGrid.Columns[1].Text = "What?");
                            (dataGrid.Columns[2].Text = "Wait?");
                        }
                        else
                        {
                            dataGrid.Columns.RemoveAt(1);
                        }
                    }
                    else
                    {
                        if ((s == "Size"))
                        {
                            var column = new (DataColumn^)();
                            (column.Text = "Category");
                            (column.TextProperty = func (value : object) : (string)
                            {
                                return (cast (RefreshItem^) value).Sub1;
                            });
                            (column.ValueProperty = func (value : object, field : object, update : bool) : (object)
                            {
                                var item = (cast (RefreshItem^) value);
                                if (update)
                                {
                                    (item.Sub1 = (cast (::system::String) field));
                                    return null;
                                }
                                else
                                {
                                    return item.Sub1;
                                }
                            });
                            dataGrid.Columns.Insert(1, column);
                        }
                        else
                        {
                            (dataGrid.Columns[1].Text = "Size");
                        }
                    }
                };
                attach(<precompile>20.Clicked, <event-handler>);
            }
            {
                (dataGrid.ItemSource = self.items);
            }
        }

        new ()
        {
        }
    }
}

================================(71/115)================================
module <instance>demo::RefreshBindableDataGridTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(RefreshBindableDataGridTabPageConstructor))
    class RefreshBindableDataGridTabPage : ::presentation::controls::GuiTabPage, RefreshBindableDataGridTabPageConstructor
    {
        var items : observe RefreshItem^[] = {new (RefreshItem^)("First", "1st"); new (RefreshItem^)("Second", "2nd"); new (RefreshItem^)("Third", "3rd"); new (RefreshItem^)("Fourth", "4th");};

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::RefreshBindableDataGridTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-RefreshBindableDataGridTabPage>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            (items[0].LargeImage = (cast (GuiImageData^) self.ResolveResource("res", "LargeImages/Task", true)));
            (items[0].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Task", true)));
            (items[1].LargeImage = (cast (GuiImageData^) self.ResolveResource("res", "LargeImages/Reminder", true)));
            (items[1].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Reminder", true)));
            (items[2].LargeImage = (cast (GuiImageData^) self.ResolveResource("res", "LargeImages/Tip", true)));
            (items[2].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Tip", true)));
            (items[3].LargeImage = (cast (GuiImageData^) self.ResolveResource("res", "LargeImages/Tip", true)));
            (items[3].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Tip", true)));
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(72/115)================================
module <constructor>demo::RefreshBindableListViewTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class RefreshBindableListViewTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::RefreshBindableListViewTabPage* = null of (::demo::RefreshBindableListViewTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiTextList* = null of (::presentation::controls::GuiTextList*);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>18 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>19 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>20 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>21 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>23 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>24 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>25 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var comboView : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        var listView : ::presentation::controls::GuiBindableListView* = null of (::presentation::controls::GuiBindableListView*);

        @cpp:Protected
        func <demo-RefreshBindableListViewTabPage>Initialize(<this> : ::demo::RefreshBindableListViewTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "BindableListView");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 7);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(4, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(5, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(6, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiTextList*)(::presentation::theme::ThemeName::TextList));
            }
            (<precompile>3 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>3.Text = "BigIcon");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>3);
            }
            (<precompile>4 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>4.Text = "SmallIcon");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>4);
            }
            (<precompile>5 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>5.Text = "List");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>5);
            }
            (<precompile>6 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>6.Text = "Tile");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>6);
            }
            (<precompile>7 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>7.Text = "Information");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>7);
            }
            (<precompile>8 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>8.Text = "Detail");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>8);
            }
            {
                (<precompile>2.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>2.VerticalAlwaysVisible = false);
            }
            {
                (comboView = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, <precompile>2));
                <this>.SetNamedObject("comboView", comboView);
            }
            {
                (comboView.SelectedIndex = 5 of (::system::Int32));
            }
            (<precompile>9 = comboView.BoundsComposition);
            {
                (<precompile>9.PreferredMinSize = {x : 120;} of (::presentation::Size));
            }
            {
                (comboView.Alt = "V");
            }
            {
                <precompile>1.AddChild(comboView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>10 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>10.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>11 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>11.Text = "Use Name");
            }
            {
                <precompile>10.AddChild(<precompile>11.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>10);
            }
            (<precompile>12 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>12.SetSite(0, 2, 1, 1);
            }
            {
                (<precompile>13 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>13.Text = "Use Title");
            }
            {
                <precompile>12.AddChild(<precompile>13.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>12);
            }
            (<precompile>14 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>14.SetSite(0, 3, 1, 1);
            }
            {
                (<precompile>15 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>15.Text = "*Sub1");
            }
            {
                <precompile>14.AddChild(<precompile>15.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>14);
            }
            (<precompile>16 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>16.SetSite(0, 4, 1, 1);
            }
            {
                (<precompile>17 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>17.Text = "*DataColumn");
            }
            {
                <precompile>16.AddChild(<precompile>17.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>16);
            }
            (<precompile>18 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>18.SetSite(0, 5, 1, 1);
            }
            {
                (<precompile>19 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>19.Text = "*Column");
            }
            {
                <precompile>18.AddChild(<precompile>19.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>18);
            }
            (<precompile>20 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>20.SetSite(1, 0, 1, 7);
            }
            {
                (listView = new (::presentation::controls::GuiBindableListView*)(::presentation::theme::ThemeName::ListView));
                <this>.SetNamedObject("listView", listView);
            }
            {
                (listView.LargeImageProperty = func (<item> : ::system::Object) : (::presentation::GuiImageData^)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.LargeImage;
                });
            }
            {
                var <collection> = listView.DataColumns;
                <collection>.Add(0 of (::system::Int32));
            }
            {
                var <collection> = listView.DataColumns;
                <collection>.Add(1 of (::system::Int32));
            }
            {
                var <collection> = listView.DataColumns;
                <collection>.Add(2 of (::system::Int32));
            }
            {
                (listView.SmallImageProperty = func (<item> : ::system::Object) : (::presentation::GuiImageData^)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.SmallImage;
                });
            }
            (<precompile>25 = listView.BoundsComposition);
            {
                (<precompile>25.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>21 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>21.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.Name;
                });
            }
            {
                (<precompile>21.Text = "Id");
            }
            {
                var <collection> = listView.Columns;
                <collection>.Add(<precompile>21);
            }
            (<precompile>22 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>22.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.Sub1;
                });
            }
            {
                (<precompile>22.Text = "Category");
            }
            {
                var <collection> = listView.Columns;
                <collection>.Add(<precompile>22);
            }
            (<precompile>23 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>23.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.Sub2;
                });
            }
            {
                (<precompile>23.Text = "Size");
            }
            {
                var <collection> = listView.Columns;
                <collection>.Add(<precompile>23);
            }
            (<precompile>24 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>24.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.Sub3;
                });
            }
            {
                (<precompile>24.Text = "File");
            }
            {
                var <collection> = listView.Columns;
                <collection>.Add(<precompile>24);
            }
            {
                <precompile>20.AddChild(listView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>20);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    {
                        var <switch>6 : ::system::Int32 = comboView.SelectedIndex;
                        if ((<switch>6 == 0 of (::system::Int32)))
                        {
                            (listView.View = BigIcon);
                        }
                        else if ((<switch>6 == 1 of (::system::Int32)))
                        {
                            (listView.View = SmallIcon);
                        }
                        else if ((<switch>6 == 2 of (::system::Int32)))
                        {
                            (listView.View = ListViewView::List);
                        }
                        else if ((<switch>6 == 3 of (::system::Int32)))
                        {
                            (listView.View = Tile);
                        }
                        else if ((<switch>6 == 4 of (::system::Int32)))
                        {
                            (listView.View = Information);
                        }
                        else if ((<switch>6 == 5 of (::system::Int32)))
                        {
                            (listView.View = Detail);
                        }
                    }
                };
                attach(comboView.SelectedIndexChanged, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (listView.Columns[0].TextProperty = func (value : object) : (string)
                    {
                        return (cast (RefreshItem^) value).Name;
                    });
                };
                attach(<precompile>11.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (listView.Columns[0].TextProperty = func (value : object) : (string)
                    {
                        return (cast (RefreshItem^) value).Title;
                    });
                };
                attach(<precompile>13.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var s = self.items[0].Sub1;
                    (self.items[0].Sub1 = (s == "One") ? "SubColumn" : "One");
                    listView.NotifyItemDataModified(0, 1);
                };
                attach(<precompile>15.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var s = listView.DataColumns[0];
                    var c = listView.DataColumns.Count;
                    if ((c == 3))
                    {
                        if ((s == 0))
                        {
                            (listView.DataColumns[0] = 1);
                        }
                        else
                        {
                            listView.DataColumns.RemoveAt(2);
                        }
                    }
                    else
                    {
                        if ((s == 0))
                        {
                            listView.DataColumns.Add(2);
                        }
                        else
                        {
                            (listView.DataColumns[0] = 0);
                        }
                    }
                };
                attach(<precompile>17.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var s = listView.Columns[1].Text;
                    var c = listView.Columns.Count;
                    if ((c == 4))
                    {
                        if ((s == "Category"))
                        {
                            (listView.Columns[1].Text = "What?");
                            (listView.Columns[2].Text = "Wait?");
                        }
                        else
                        {
                            listView.Columns.RemoveAt(1);
                        }
                    }
                    else
                    {
                        if ((s == "Size"))
                        {
                            var column = new (ListViewColumn^)();
                            (column.Text = "Category");
                            (column.TextProperty = func (value : object) : (string)
                            {
                                return (cast (RefreshItem^) value).Sub1;
                            });
                            listView.Columns.Insert(1, column);
                        }
                        else
                        {
                            (listView.Columns[1].Text = "Size");
                        }
                    }
                };
                attach(<precompile>19.Clicked, <event-handler>);
            }
            {
                (listView.ItemSource = self.items);
            }
        }

        new ()
        {
        }
    }
}

================================(73/115)================================
module <instance>demo::RefreshBindableListViewTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(RefreshBindableListViewTabPageConstructor))
    class RefreshBindableListViewTabPage : ::presentation::controls::GuiTabPage, RefreshBindableListViewTabPageConstructor
    {
        var items : observe RefreshItem^[] = {new (RefreshItem^)("First", "1st"); new (RefreshItem^)("Second", "2nd"); new (RefreshItem^)("Third", "3rd"); new (RefreshItem^)("Fourth", "4th");};

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::RefreshBindableListViewTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-RefreshBindableListViewTabPage>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            (items[0].LargeImage = (cast (GuiImageData^) self.ResolveResource("res", "LargeImages/Task", true)));
            (items[0].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Task", true)));
            (items[1].LargeImage = (cast (GuiImageData^) self.ResolveResource("res", "LargeImages/Reminder", true)));
            (items[1].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Reminder", true)));
            (items[2].LargeImage = (cast (GuiImageData^) self.ResolveResource("res", "LargeImages/Tip", true)));
            (items[2].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Tip", true)));
            (items[3].LargeImage = (cast (GuiImageData^) self.ResolveResource("res", "LargeImages/Tip", true)));
            (items[3].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Tip", true)));
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(74/115)================================
module <constructor>demo::RefreshBindableTextListTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class RefreshBindableTextListTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::RefreshBindableTextListTabPage* = null of (::demo::RefreshBindableTextListTabPage*);

        @cpp:Protected
        var textList : ::presentation::controls::GuiBindableTextList* = null of (::presentation::controls::GuiBindableTextList*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var buttonRead : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        func <demo-RefreshBindableTextListTabPage>Initialize(<this> : ::demo::RefreshBindableTextListTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "BindableTextList");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 6);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(4, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(5, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>2.Text = "Use Name");
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>4.Text = "Use Title");
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(0, 2, 1, 1);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>6.Text = "Check First");
            }
            {
                <precompile>5.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(0, 3, 1, 1);
            }
            {
                (<precompile>8 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>8.Text = "Uncheck First");
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>9.SetSite(0, 4, 1, 1);
            }
            {
                (buttonRead = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
                <this>.SetNamedObject("buttonRead", buttonRead);
            }
            {
                (buttonRead.Text = "Read (false)");
            }
            {
                <precompile>9.AddChild(buttonRead.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>9);
            }
            (<precompile>10 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>10.SetSite(1, 0, 1, 6);
            }
            {
                (textList = new (::presentation::controls::GuiBindableTextList*)(::presentation::theme::ThemeName::TextList));
                <this>.SetNamedObject("textList", textList);
            }
            {
                (textList.CheckedProperty = func (<item> : ::system::Object, <value> : ::system::Boolean, <update> : ::system::Boolean) : (::system::Boolean)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    if (<update>)
                    {
                        (item.Selected = <value>);
                        return false;
                    }
                    else
                    {
                        return item.Selected;
                    }
                });
            }
            {
                (textList.View = Check of (::presentation::controls::TextListView));
            }
            {
                (textList.MultiSelect = true);
            }
            {
                (textList.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.Name;
                });
            }
            (<precompile>11 = textList.BoundsComposition);
            {
                (<precompile>11.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>10.AddChild(textList.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>10);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (textList.TextProperty = func (value : object) : (string)
                    {
                        return (cast (RefreshItem^) value).Name;
                    });
                };
                attach(<precompile>2.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (textList.TextProperty = func (value : object) : (string)
                    {
                        return (cast (RefreshItem^) value).Title;
                    });
                };
                attach(<precompile>4.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (self.items[0].Selected = true);
                    textList.NotifyItemDataModified(0, 1);
                };
                attach(<precompile>6.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (self.items[0].Selected = false);
                    textList.NotifyItemDataModified(0, 1);
                };
                attach(<precompile>8.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (self.items[0].Selected)
                    {
                        (buttonRead.Text = "Read (true)");
                    }
                    else
                    {
                        (buttonRead.Text = "Read (false)");
                    }
                };
                attach(buttonRead.Clicked, <event-handler>);
            }
            {
                (textList.ItemSource = self.items);
            }
        }

        new ()
        {
        }
    }
}

================================(75/115)================================
module <instance>demo::RefreshBindableTextListTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(RefreshBindableTextListTabPageConstructor))
    class RefreshBindableTextListTabPage : ::presentation::controls::GuiTabPage, RefreshBindableTextListTabPageConstructor
    {
        var items : observe RefreshItem^[] = {new (RefreshItem^)("First", "1st"); new (RefreshItem^)("Second", "2nd"); new (RefreshItem^)("Third", "3rd");};

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::RefreshBindableTextListTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-RefreshBindableTextListTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(76/115)================================
module <constructor>demo::RefreshBindableTreeViewTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class RefreshBindableTreeViewTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::RefreshBindableTreeViewTabPage* = null of (::demo::RefreshBindableTreeViewTabPage*);

        @cpp:Protected
        var treeView : ::presentation::controls::GuiBindableTreeView* = null of (::presentation::controls::GuiBindableTreeView*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-RefreshBindableTreeViewTabPage>Initialize(<this> : ::demo::RefreshBindableTreeViewTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "BindableTreeView");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 5);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(4, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>2.Text = "Use Name");
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>4.Text = "Use Title");
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(0, 2, 1, 1);
            }
            {
                (<precompile>6 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>6.Text = "*First");
            }
            {
                <precompile>5.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(0, 3, 1, 1);
            }
            {
                (<precompile>8 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>8.Text = "*First/Second");
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>9.SetSite(1, 0, 1, 5);
            }
            {
                (treeView = new (::presentation::controls::GuiBindableTreeView*)(::presentation::theme::ThemeName::TreeView, func (<item> : ::system::Object, <value> : ::system::Object, <update> : ::system::Boolean) : (::system::Object)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    if (<update>)
                    {
                        (item.DoNotUse = (cast (::system::Object) <value>));
                        return null of (::system::Object);
                    }
                    else
                    {
                        return item.DoNotUse;
                    }
                }));
                <this>.SetNamedObject("treeView", treeView);
            }
            {
                (treeView.ImageProperty = func (<item> : ::system::Object) : (::presentation::GuiImageData^)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.SmallImage;
                });
            }
            {
                (treeView.ChildrenProperty = func (<item> : ::system::Object) : (::system::Enumerable^)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.Children;
                });
            }
            {
                (treeView.TextProperty = func (<item> : ::system::Object) : (::system::String)
                {
                    var item = (cast (demo::RefreshItem^) <item>);
                    return item.Name;
                });
            }
            (<precompile>10 = treeView.BoundsComposition);
            {
                (<precompile>10.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>9.AddChild(treeView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>9);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (treeView.TextProperty = func (value : object) : (string)
                    {
                        return (cast (RefreshItem^) value).Name;
                    });
                };
                attach(<precompile>2.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (treeView.TextProperty = func (value : object) : (string)
                    {
                        return (cast (RefreshItem^) value).Title;
                    });
                };
                attach(<precompile>4.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var data = self.rootItem.Children[0];
                    (data.Name = (data.Name == "First") ? "One" : "First");
                    (data.Title = (data.Title == "1st") ? "One" : "1st");
                    treeView.NotifyNodeDataModified(data);
                };
                attach(<precompile>6.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var data = self.rootItem.Children[0].Children[1];
                    (data.Name = (data.Name == "Second (1)") ? "Two (1)" : "Second (1)");
                    (data.Title = (data.Title == "2nd (1)") ? "Two (1)" : "2nd (1)");
                    treeView.NotifyNodeDataModified(data);
                };
                attach(<precompile>8.Clicked, <event-handler>);
            }
            {
                (treeView.ItemSource = self.rootItem);
            }
        }

        new ()
        {
        }
    }
}

================================(77/115)================================
module <instance>demo::RefreshBindableTreeViewTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(RefreshBindableTreeViewTabPageConstructor))
    class RefreshBindableTreeViewTabPage : ::presentation::controls::GuiTabPage, RefreshBindableTreeViewTabPageConstructor
    {
        var rootItem : RefreshItem^ = new (RefreshItem^)("", "", {new (RefreshItem^)("First", "1st", {new (RefreshItem^)("First (1)", "1st (1)"); new (RefreshItem^)("Second (1)", "2nd (1)"); new (RefreshItem^)("Third (1)", "3rd (1)");}); new (RefreshItem^)("Second", "2nd", {new (RefreshItem^)("First (2)", "1st (2)"); new (RefreshItem^)("Second (2)", "2nd (2)"); new (RefreshItem^)("Third (2)", "3rd (2)");}); new (RefreshItem^)("Third", "3rd"); new (RefreshItem^)("Fourth", "4th");});

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::RefreshBindableTreeViewTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-RefreshBindableTreeViewTabPage>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            (rootItem.Children[0].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Task", true)));
            (rootItem.Children[1].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Reminder", true)));
            (rootItem.Children[2].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Tip", true)));
            (rootItem.Children[3].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Tip", true)));
            (rootItem.Children[0].Children[0].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Task", true)));
            (rootItem.Children[0].Children[1].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Reminder", true)));
            (rootItem.Children[0].Children[2].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Tip", true)));
            (rootItem.Children[1].Children[0].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Task", true)));
            (rootItem.Children[1].Children[1].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Reminder", true)));
            (rootItem.Children[1].Children[2].SmallImage = (cast (GuiImageData^) self.ResolveResource("res", "SmallImages/Tip", true)));
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(78/115)================================
module <constructor>demo::RefreshListViewTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class RefreshListViewTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::RefreshListViewTabPage* = null of (::demo::RefreshListViewTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiTextList* = null of (::presentation::controls::GuiTextList*);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>18 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>19 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>20 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>21 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::list::ListViewColumn^ = null of (::presentation::controls::list::ListViewColumn^);

        @cpp:Protected
        var <precompile>23 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>24 : ::presentation::controls::list::ListViewItem^ = null of (::presentation::controls::list::ListViewItem^);

        @cpp:Protected
        var <precompile>25 : ::presentation::controls::list::ListViewItem^ = null of (::presentation::controls::list::ListViewItem^);

        @cpp:Protected
        var <precompile>26 : ::presentation::controls::list::ListViewItem^ = null of (::presentation::controls::list::ListViewItem^);

        @cpp:Protected
        var <precompile>27 : ::presentation::controls::list::ListViewItem^ = null of (::presentation::controls::list::ListViewItem^);

        @cpp:Protected
        var comboView : ::presentation::controls::GuiComboBoxListControl* = null of (::presentation::controls::GuiComboBoxListControl*);

        @cpp:Protected
        var listView : ::presentation::controls::GuiListView* = null of (::presentation::controls::GuiListView*);

        @cpp:Protected
        func <demo-RefreshListViewTabPage>Initialize(<this> : ::demo::RefreshListViewTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "ListView");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 6);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(4, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(5, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiTextList*)(::presentation::theme::ThemeName::TextList));
            }
            (<precompile>3 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>3.Text = "BigIcon");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>3);
            }
            (<precompile>4 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>4.Text = "SmallIcon");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>4);
            }
            (<precompile>5 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>5.Text = "List");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>5);
            }
            (<precompile>6 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>6.Text = "Tile");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>6);
            }
            (<precompile>7 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>7.Text = "Information");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>7);
            }
            (<precompile>8 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>8.Text = "Detail");
            }
            {
                var <collection> = <precompile>2.Items;
                <collection>.Add(<precompile>8);
            }
            {
                (<precompile>2.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>2.VerticalAlwaysVisible = false);
            }
            {
                (comboView = new (::presentation::controls::GuiComboBoxListControl*)(::presentation::theme::ThemeName::ComboBox, <precompile>2));
                <this>.SetNamedObject("comboView", comboView);
            }
            {
                (comboView.SelectedIndex = 5 of (::system::Int32));
            }
            (<precompile>9 = comboView.BoundsComposition);
            {
                (<precompile>9.PreferredMinSize = {x : 120;} of (::presentation::Size));
            }
            {
                (comboView.Alt = "V");
            }
            {
                <precompile>1.AddChild(comboView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>10 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>10.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>11 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>11.Text = "*MainColumn");
            }
            {
                <precompile>10.AddChild(<precompile>11.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>10);
            }
            (<precompile>12 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>12.SetSite(0, 2, 1, 1);
            }
            {
                (<precompile>13 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>13.Text = "*SubColumn");
            }
            {
                <precompile>12.AddChild(<precompile>13.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>12);
            }
            (<precompile>14 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>14.SetSite(0, 3, 1, 1);
            }
            {
                (<precompile>15 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>15.Text = "*DataColumn");
            }
            {
                <precompile>14.AddChild(<precompile>15.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>14);
            }
            (<precompile>16 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>16.SetSite(0, 4, 1, 1);
            }
            {
                (<precompile>17 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>17.Text = "*Column");
            }
            {
                <precompile>16.AddChild(<precompile>17.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>16);
            }
            (<precompile>18 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>18.SetSite(1, 0, 1, 6);
            }
            {
                (listView = new (::presentation::controls::GuiListView*)(::presentation::theme::ThemeName::ListView));
                <this>.SetNamedObject("listView", listView);
            }
            {
                var <collection> = listView.DataColumns;
                <collection>.Add(0 of (::system::Int32));
            }
            {
                var <collection> = listView.DataColumns;
                <collection>.Add(1 of (::system::Int32));
            }
            {
                var <collection> = listView.DataColumns;
                <collection>.Add(2 of (::system::Int32));
            }
            (<precompile>24 = new (::presentation::controls::list::ListViewItem^)());
            {
                var <collection> = <precompile>24.SubItems;
                <collection>.Add("One");
            }
            {
                var <collection> = <precompile>24.SubItems;
                <collection>.Add("Two");
            }
            {
                var <collection> = <precompile>24.SubItems;
                <collection>.Add("Three");
            }
            {
                (<precompile>24.Text = "First");
            }
            {
                var <collection> = listView.Items;
                <collection>.Add(<precompile>24);
            }
            (<precompile>25 = new (::presentation::controls::list::ListViewItem^)());
            {
                var <collection> = <precompile>25.SubItems;
                <collection>.Add("One");
            }
            {
                var <collection> = <precompile>25.SubItems;
                <collection>.Add("Two");
            }
            {
                var <collection> = <precompile>25.SubItems;
                <collection>.Add("Three");
            }
            {
                (<precompile>25.Text = "Second");
            }
            {
                var <collection> = listView.Items;
                <collection>.Add(<precompile>25);
            }
            (<precompile>26 = new (::presentation::controls::list::ListViewItem^)());
            {
                var <collection> = <precompile>26.SubItems;
                <collection>.Add("One");
            }
            {
                var <collection> = <precompile>26.SubItems;
                <collection>.Add("Two");
            }
            {
                var <collection> = <precompile>26.SubItems;
                <collection>.Add("Three");
            }
            {
                (<precompile>26.Text = "Third");
            }
            {
                var <collection> = listView.Items;
                <collection>.Add(<precompile>26);
            }
            (<precompile>27 = new (::presentation::controls::list::ListViewItem^)());
            {
                var <collection> = <precompile>27.SubItems;
                <collection>.Add("One");
            }
            {
                var <collection> = <precompile>27.SubItems;
                <collection>.Add("Two");
            }
            {
                var <collection> = <precompile>27.SubItems;
                <collection>.Add("Three");
            }
            {
                (<precompile>27.Text = "Fourth");
            }
            {
                var <collection> = listView.Items;
                <collection>.Add(<precompile>27);
            }
            (<precompile>23 = listView.BoundsComposition);
            {
                (<precompile>23.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>19 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>19.Text = "Id");
            }
            {
                var <collection> = listView.Columns;
                <collection>.Add(<precompile>19);
            }
            (<precompile>20 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>20.Text = "Category");
            }
            {
                var <collection> = listView.Columns;
                <collection>.Add(<precompile>20);
            }
            (<precompile>21 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>21.Text = "Size");
            }
            {
                var <collection> = listView.Columns;
                <collection>.Add(<precompile>21);
            }
            (<precompile>22 = new (::presentation::controls::list::ListViewColumn^)());
            {
                (<precompile>22.Text = "File");
            }
            {
                var <collection> = listView.Columns;
                <collection>.Add(<precompile>22);
            }
            {
                <precompile>18.AddChild(listView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>18);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    {
                        var <switch>7 : ::system::Int32 = comboView.SelectedIndex;
                        if ((<switch>7 == 0 of (::system::Int32)))
                        {
                            (listView.View = BigIcon);
                        }
                        else if ((<switch>7 == 1 of (::system::Int32)))
                        {
                            (listView.View = SmallIcon);
                        }
                        else if ((<switch>7 == 2 of (::system::Int32)))
                        {
                            (listView.View = ListViewView::List);
                        }
                        else if ((<switch>7 == 3 of (::system::Int32)))
                        {
                            (listView.View = Tile);
                        }
                        else if ((<switch>7 == 4 of (::system::Int32)))
                        {
                            (listView.View = Information);
                        }
                        else if ((<switch>7 == 5 of (::system::Int32)))
                        {
                            (listView.View = Detail);
                        }
                    }
                };
                attach(comboView.SelectedIndexChanged, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var s = listView.Items[0].Text;
                    (listView.Items[0].Text = (s == "First") ? "MainColumn" : "First");
                };
                attach(<precompile>11.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var s = listView.Items[0].SubItems[0];
                    (listView.Items[0].SubItems[0] = (s == "One") ? "SubColumn" : "One");
                };
                attach(<precompile>13.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var s = listView.DataColumns[0];
                    var c = listView.DataColumns.Count;
                    if ((c == 3))
                    {
                        if ((s == 0))
                        {
                            (listView.DataColumns[0] = 1);
                        }
                        else
                        {
                            listView.DataColumns.RemoveAt(2);
                        }
                    }
                    else
                    {
                        if ((s == 0))
                        {
                            listView.DataColumns.Add(2);
                        }
                        else
                        {
                            (listView.DataColumns[0] = 0);
                        }
                    }
                };
                attach(<precompile>15.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var s = listView.Columns[1].Text;
                    var c = listView.Columns.Count;
                    if ((c == 4))
                    {
                        if ((s == "Category"))
                        {
                            (listView.Columns[1].Text = "What?");
                            (listView.Columns[2].Text = "Wait?");
                        }
                        else
                        {
                            listView.Columns.RemoveAt(1);
                        }
                    }
                    else
                    {
                        if ((s == "Size"))
                        {
                            var column = new (ListViewColumn^)();
                            (column.Text = "Category");
                            listView.Columns.Insert(1, column);
                        }
                        else
                        {
                            (listView.Columns[1].Text = "Size");
                        }
                    }
                };
                attach(<precompile>17.Clicked, <event-handler>);
            }
            {
                (<precompile>24.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "LargeImages/Task", true)));
            }
            {
                (<precompile>24.SmallImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Task", true)));
            }
            {
                (<precompile>25.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "LargeImages/Reminder", true)));
            }
            {
                (<precompile>25.SmallImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Reminder", true)));
            }
            {
                (<precompile>26.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "LargeImages/Tip", true)));
            }
            {
                (<precompile>26.SmallImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Tip", true)));
            }
            {
                (<precompile>27.LargeImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "LargeImages/Tip", true)));
            }
            {
                (<precompile>27.SmallImage = (cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Tip", true)));
            }
        }

        new ()
        {
        }
    }
}

================================(79/115)================================
module <instance>demo::RefreshListViewTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(RefreshListViewTabPageConstructor))
    class RefreshListViewTabPage : ::presentation::controls::GuiTabPage, RefreshListViewTabPageConstructor
    {
        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::RefreshListViewTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-RefreshListViewTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(80/115)================================
module <constructor>demo::RefreshTextListTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class RefreshTextListTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::RefreshTextListTabPage* = null of (::demo::RefreshTextListTabPage*);

        @cpp:Protected
        var textList : ::presentation::controls::GuiTextList* = null of (::presentation::controls::GuiTextList*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::list::TextItem^ = null of (::presentation::controls::list::TextItem^);

        @cpp:Protected
        var buttonRead : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        func <demo-RefreshTextListTabPage>Initialize(<this> : ::demo::RefreshTextListTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "TextList");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 4);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(3, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>2.Text = "Check First");
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>4.Text = "Uncheck First");
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(0, 2, 1, 1);
            }
            {
                (buttonRead = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
                <this>.SetNamedObject("buttonRead", buttonRead);
            }
            {
                (buttonRead.Text = "Read (false)");
            }
            {
                <precompile>5.AddChild(buttonRead.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(1, 0, 1, 4);
            }
            {
                (textList = new (::presentation::controls::GuiTextList*)(::presentation::theme::ThemeName::TextList));
                <this>.SetNamedObject("textList", textList);
            }
            (<precompile>8 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>8.Text = "First");
            }
            {
                var <collection> = textList.Items;
                <collection>.Add(<precompile>8);
            }
            (<precompile>9 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>9.Text = "Second");
            }
            {
                var <collection> = textList.Items;
                <collection>.Add(<precompile>9);
            }
            (<precompile>10 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>10.Text = "Third");
            }
            {
                var <collection> = textList.Items;
                <collection>.Add(<precompile>10);
            }
            (<precompile>11 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>11.Text = "Fourth");
            }
            {
                var <collection> = textList.Items;
                <collection>.Add(<precompile>11);
            }
            (<precompile>12 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>12.Text = "Fifth");
            }
            {
                var <collection> = textList.Items;
                <collection>.Add(<precompile>12);
            }
            (<precompile>13 = new (::presentation::controls::list::TextItem^)());
            {
                (<precompile>13.Text = "Sixth");
            }
            {
                var <collection> = textList.Items;
                <collection>.Add(<precompile>13);
            }
            {
                (textList.View = Check of (::presentation::controls::TextListView));
            }
            {
                (textList.MultiSelect = true);
            }
            (<precompile>7 = textList.BoundsComposition);
            {
                (<precompile>7.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>6.AddChild(textList.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>6);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (textList.Items[0].Checked = true);
                };
                attach(<precompile>2.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (textList.Items[0].Checked = false);
                };
                attach(<precompile>4.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    if (textList.Items[0].Checked)
                    {
                        (buttonRead.Text = "Read (true)");
                    }
                    else
                    {
                        (buttonRead.Text = "Read (false)");
                    }
                };
                attach(buttonRead.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(81/115)================================
module <instance>demo::RefreshTextListTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(RefreshTextListTabPageConstructor))
    class RefreshTextListTabPage : ::presentation::controls::GuiTabPage, RefreshTextListTabPageConstructor
    {
        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::RefreshTextListTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-RefreshTextListTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(82/115)================================
module <constructor>demo::RefreshTreeViewTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class RefreshTreeViewTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::RefreshTreeViewTabPage* = null of (::demo::RefreshTreeViewTabPage*);

        @cpp:Protected
        var treeView : ::presentation::controls::GuiTreeView* = null of (::presentation::controls::GuiTreeView*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>11 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>14 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>15 : ::presentation::controls::tree::MemoryNodeProvider^ = null of (::presentation::controls::tree::MemoryNodeProvider^);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-RefreshTreeViewTabPage>Initialize(<this> : ::demo::RefreshTreeViewTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "TreeView");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 5; top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 3);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>2.Text = "*First");
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>3 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>3.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>4 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>4.Text = "*First/Second");
            }
            {
                <precompile>3.AddChild(<precompile>4.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>3);
            }
            (<precompile>5 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>5.SetSite(1, 0, 1, 3);
            }
            {
                (treeView = new (::presentation::controls::GuiTreeView*)(::presentation::theme::ThemeName::TreeView));
                <this>.SetNamedObject("treeView", treeView);
            }
            (<precompile>16 = treeView.BoundsComposition);
            {
                (<precompile>16.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            (<precompile>6 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Task", true)), "First")));
            (<precompile>7 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Task", true)), "First (1)")));
            {
                <precompile>6.Children.Add(<precompile>7);
            }
            (<precompile>8 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Reminder", true)), "Second (1)")));
            {
                <precompile>6.Children.Add(<precompile>8);
            }
            (<precompile>9 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Tip", true)), "Third (1)")));
            {
                <precompile>6.Children.Add(<precompile>9);
            }
            {
                treeView.Nodes.Children.Add(<precompile>6);
            }
            (<precompile>10 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Reminder", true)), "Second")));
            (<precompile>11 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Task", true)), "First (2)")));
            {
                <precompile>10.Children.Add(<precompile>11);
            }
            (<precompile>12 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Reminder", true)), "Second (2)")));
            {
                <precompile>10.Children.Add(<precompile>12);
            }
            (<precompile>13 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Tip", true)), "Third (2)")));
            {
                <precompile>10.Children.Add(<precompile>13);
            }
            {
                treeView.Nodes.Children.Add(<precompile>10);
            }
            (<precompile>14 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Tip", true)), "Third")));
            {
                treeView.Nodes.Children.Add(<precompile>14);
            }
            (<precompile>15 = new (::presentation::controls::tree::MemoryNodeProvider^)(new (::presentation::controls::tree::TreeViewItem^)((cast (::presentation::GuiImageData^) <this>.ResolveResource("res", "SmallImages/Tip", true)), "Fourth")));
            {
                treeView.Nodes.Children.Add(<precompile>15);
            }
            {
                <precompile>5.AddChild(treeView.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>5);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var node = treeView.Nodes.RootNode.GetChild(0);
                    var data = treeView.Nodes.GetTreeViewData((cast (::presentation::controls::tree::INodeProvider*) node));
                    (data.text = (data.text == "First") ? "One" : "First");
                    treeView.Nodes.UpdateTreeViewData((cast (::presentation::controls::tree::INodeProvider*) node));
                };
                attach(<precompile>2.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var node = treeView.Nodes.RootNode.GetChild(0).GetChild(1);
                    var data = treeView.Nodes.GetTreeViewData((cast (::presentation::controls::tree::INodeProvider*) node));
                    (data.text = (data.text == "Second (1)") ? "Two (1)" : "Second (1)");
                    treeView.Nodes.UpdateTreeViewData((cast (::presentation::controls::tree::INodeProvider*) node));
                };
                attach(<precompile>4.Clicked, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(83/115)================================
module <instance>demo::RefreshTreeViewTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(RefreshTreeViewTabPageConstructor))
    class RefreshTreeViewTabPage : ::presentation::controls::GuiTabPage, RefreshTreeViewTabPageConstructor
    {
        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::RefreshTreeViewTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-RefreshTreeViewTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(84/115)================================
module <constructor>demo::EnglishNumbersController;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class EnglishNumbersControllerConstructor
    {
        @cpp:Protected
        var self : ::demo::EnglishNumbersController* = null of (::demo::EnglishNumbersController*);

        @cpp:Protected
        var <precompile>0 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-EnglishNumbersController>Initialize(<this> : ::demo::EnglishNumbersController*) : (::system::Void)
        {
            (self = <this>);
            {
                (<precompile>0 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>17 = <precompile>0.BoundsComposition);
            {
                (<precompile>17.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : (-1);} of (::presentation::Margin));
            }
            (<precompile>1 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>1.Padding = 5 of (::system::Int32));
            }
            {
                (<precompile>1.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>1.AlignmentToParent = {left : 5; top : 0; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>2 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>3 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>4 = <precompile>3.BoundsComposition);
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>3.Alt = "A");
            }
            {
                (<precompile>3.Text = "Add 10 items");
            }
            {
                <precompile>2.AddChild(<precompile>3.BoundsComposition);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            (<precompile>5 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>6 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>7 = <precompile>6.BoundsComposition);
            {
                (<precompile>7.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>6.Alt = "O");
            }
            {
                (<precompile>6.Text = "Remove odd items");
            }
            {
                <precompile>5.AddChild(<precompile>6.BoundsComposition);
            }
            {
                <precompile>1.AddChild(<precompile>5);
            }
            (<precompile>8 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>9 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>10 = <precompile>9.BoundsComposition);
            {
                (<precompile>10.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>9.Alt = "E");
            }
            {
                (<precompile>9.Text = "Remove even items");
            }
            {
                <precompile>8.AddChild(<precompile>9.BoundsComposition);
            }
            {
                <precompile>1.AddChild(<precompile>8);
            }
            (<precompile>11 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>12 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>13 = <precompile>12.BoundsComposition);
            {
                (<precompile>13.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>12.Alt = "C");
            }
            {
                (<precompile>12.Text = "Clear");
            }
            {
                <precompile>11.AddChild(<precompile>12.BoundsComposition);
            }
            {
                <precompile>1.AddChild(<precompile>11);
            }
            (<precompile>14 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>15 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>16 = <precompile>15.BoundsComposition);
            {
                (<precompile>16.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>15.Alt = "R");
            }
            {
                (<precompile>15.Text = "Reset Counter");
            }
            {
                <precompile>14.AddChild(<precompile>15.BoundsComposition);
            }
            {
                <precompile>1.AddChild(<precompile>14);
            }
            {
                <precompile>0.ContainerComposition.AddChild(<precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    {
                        var <for-begin>i : ::system::Int32 = 0;
                        var <for-end>i : ::system::Int32 = 9;
                        var i = <for-begin>i;
                        while ((i <= <for-end>i))
                        {
                            {
                                var textItem = new (demo::MyTextItem^)();
                                (textItem.Name = self.NumberToText((self.counter + i)));
                                self.ItemsToBind.Add(textItem);
                            }
                            (i = (i + 1));
                        }
                    }
                    (self.counter = (self.counter + 10));
                };
                attach(<precompile>3.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var i = 0;
                    while ((i < self.ItemsToBind.Count))
                    {
                        self.ItemsToBind.RemoveAt(i);
                        (i = (i + 1));
                    }
                };
                attach(<precompile>6.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    var i = 1;
                    while ((i < self.ItemsToBind.Count))
                    {
                        self.ItemsToBind.RemoveAt(i);
                        (i = (i + 1));
                    }
                };
                attach(<precompile>9.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.ItemsToBind.Clear();
                };
                attach(<precompile>12.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    (self.counter = 0);
                };
                attach(<precompile>15.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::EnglishNumbersController* = null of (::demo::EnglishNumbersController*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Text of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::EnglishNumbersController*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::EnglishNumbersController*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>0.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>0.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(85/115)================================
module <instance>demo::EnglishNumbersController;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(EnglishNumbersControllerConstructor))
    class EnglishNumbersController : ::presentation::controls::GuiCustomControl, EnglishNumbersControllerConstructor
    {
        @cpp:Private
        var counter : int = 0;

        @cpp:Private
        var <prop>ItemsToBind : observe MyTextItem^[] = {};

        func GetItemsToBind() : (observe MyTextItem^[])
        {
            return <prop>ItemsToBind;
        }

        @cpp:Protected
        func SetItemsToBind(<value> : observe MyTextItem^[]) : (void)
        {
            (<prop>ItemsToBind = <value>);
        }

        prop ItemsToBind : observe MyTextItem^[]{GetItemsToBind}

        @cpp:Private
        func ToText_1to9(i : int) : (string)
        {
            {
                var <switch>8 : ::system::Int32 = i;
                if ((<switch>8 == 1 of (::system::Int32)))
                {
                    return "one";
                }
                else if ((<switch>8 == 2 of (::system::Int32)))
                {
                    return "two";
                }
                else if ((<switch>8 == 3 of (::system::Int32)))
                {
                    return "three";
                }
                else if ((<switch>8 == 4 of (::system::Int32)))
                {
                    return "four";
                }
                else if ((<switch>8 == 5 of (::system::Int32)))
                {
                    return "five";
                }
                else if ((<switch>8 == 6 of (::system::Int32)))
                {
                    return "six";
                }
                else if ((<switch>8 == 7 of (::system::Int32)))
                {
                    return "seven";
                }
                else if ((<switch>8 == 8 of (::system::Int32)))
                {
                    return "eight";
                }
                else if ((<switch>8 == 9 of (::system::Int32)))
                {
                    return "nine";
                }
            }
            raise "ToText_1to9: Number out of range.";
        }

        @cpp:Private
        func ToText_11to19(i : int) : (string)
        {
            {
                var <switch>9 : ::system::Int32 = i;
                if ((<switch>9 == 1 of (::system::Int32)))
                {
                    return "eleven";
                }
                else if ((<switch>9 == 2 of (::system::Int32)))
                {
                    return "twelve";
                }
                else if ((<switch>9 == 3 of (::system::Int32)))
                {
                    return "thirteen";
                }
                else if ((<switch>9 == 4 of (::system::Int32)))
                {
                    return "fourteen";
                }
                else if ((<switch>9 == 5 of (::system::Int32)))
                {
                    return "fifteen";
                }
                else if ((<switch>9 == 6 of (::system::Int32)))
                {
                    return "sixteen";
                }
                else if ((<switch>9 == 7 of (::system::Int32)))
                {
                    return "seventeen";
                }
                else if ((<switch>9 == 8 of (::system::Int32)))
                {
                    return "eightteen";
                }
                else if ((<switch>9 == 9 of (::system::Int32)))
                {
                    return "nineteen";
                }
            }
            raise "ToText_11to19: Number out of range.";
        }

        @cpp:Private
        func NumberToText_1To99(i : int) : (string)
        {
            {
                var <switch>10 : ::system::Int32 = (i / 10);
                if ((<switch>10 == 0 of (::system::Int32)))
                {
                    return ToText_1to9((i % 10));
                }
                else if ((<switch>10 == 1 of (::system::Int32)))
                {
                    return (i == 10) ? "ten" : ToText_11to19((i % 10));
                }
                else if ((<switch>10 == 2 of (::system::Int32)))
                {
                    return ((i % 10) == 0) ? "twenty" : ("twenty-" & ToText_1to9((i % 10)));
                }
                else if ((<switch>10 == 3 of (::system::Int32)))
                {
                    return ((i % 10) == 0) ? "thirty" : ("thirty-" & ToText_1to9((i % 10)));
                }
                else if ((<switch>10 == 4 of (::system::Int32)))
                {
                    return ((i % 10) == 0) ? "fourty" : ("fourty-" & ToText_1to9((i % 10)));
                }
                else if ((<switch>10 == 5 of (::system::Int32)))
                {
                    return ((i % 10) == 0) ? "fifty" : ("fifty-" & ToText_1to9((i % 10)));
                }
                else if ((<switch>10 == 6 of (::system::Int32)))
                {
                    return ((i % 10) == 0) ? "sixty" : ("sixty-" & ToText_1to9((i % 10)));
                }
                else if ((<switch>10 == 7 of (::system::Int32)))
                {
                    return ((i % 10) == 0) ? "seventy" : ("seventy-" & ToText_1to9((i % 10)));
                }
                else if ((<switch>10 == 8 of (::system::Int32)))
                {
                    return ((i % 10) == 0) ? "eighty" : ("eighty-" & ToText_1to9((i % 10)));
                }
                else if ((<switch>10 == 9 of (::system::Int32)))
                {
                    return ((i % 10) == 0) ? "ninety" : ("ninety-" & ToText_1to9((i % 10)));
                }
            }
            raise "NumberToText_1To99: Number out of range.";
        }

        @cpp:Private
        func NumberToText_0to999(i : int) : (string)
        {
            if ((i < 100))
            {
                return NumberToText_1To99(i);
            }
            return ((ToText_1to9((i / 100)) & " hundred") & ((i % 100) == 0) ? "" : (" and " & NumberToText_1To99((i % 100))));
        }

        @cpp:Private
        func NumberToText(i : int) : (string)
        {
            if ((i == 0))
            {
                return "zero";
            }
            if ((i < 1000))
            {
                return NumberToText_0to999(i);
            }
            return ("Number too large: " & i);
        }

        new* ()
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::EnglishNumbersController");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-EnglishNumbersController>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(86/115)================================
module <constructor>demo::EnglishNumbersControllerTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class EnglishNumbersControllerTabPageConstructor
    {
        @cpp:Protected
        var <precompile>0 : ::demo::EnglishNumbersControllerTabPage* = null of (::demo::EnglishNumbersControllerTabPage*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var content : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var controller : ::demo::EnglishNumbersController* = null of (::demo::EnglishNumbersController*);

        @cpp:Protected
        func <demo-EnglishNumbersControllerTabPage>Initialize(<this> : ::demo::EnglishNumbersControllerTabPage*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            (<precompile>1 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>1.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>1.SetRowsAndColumns(1, 2);
                <precompile>1.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>1.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (content = new (::presentation::compositions::GuiCellComposition*)());
            <this>.SetNamedObject("content", content);
            {
                content.SetSite(0, 0, 1, 1);
            }
            {
                <precompile>1.AddChild(content);
            }
            (<precompile>2 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>2.SetSite(0, 1, 1, 1);
            }
            (controller = new (::demo::EnglishNumbersController*)());
            <this>.SetNamedObject("controller", controller);
            (<precompile>3 = controller.BoundsComposition);
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (controller.Text = "Operations");
            }
            {
                <precompile>2.AddChild(controller.BoundsComposition);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            {
                <precompile>0.ContainerComposition.AddChild(<precompile>1);
            }
        }

        new ()
        {
        }
    }
}

================================(87/115)================================
module <instance>demo::EnglishNumbersControllerTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(EnglishNumbersControllerTabPageConstructor))
    class EnglishNumbersControllerTabPage : ::presentation::controls::GuiTabPage, EnglishNumbersControllerTabPageConstructor
    {
        @cpp:Private
        var <prop>ItemsToBind : observe MyTextItem^[] = {};

        func GetItemsToBind() : (observe MyTextItem^[])
        {
            return <prop>ItemsToBind;
        }

        @cpp:Protected
        func SetItemsToBind(<value> : observe MyTextItem^[]) : (void)
        {
            (<prop>ItemsToBind = <value>);
        }

        prop ItemsToBind : observe MyTextItem^[]{GetItemsToBind}

        @cpp:Private
        var <prop>ContentComposition : GuiGraphicsComposition* = null;

        func GetContentComposition() : (GuiGraphicsComposition*)
        {
            return <prop>ContentComposition;
        }

        @cpp:Protected
        func SetContentComposition(<value> : GuiGraphicsComposition*) : (void)
        {
            (<prop>ContentComposition = <value>);
        }

        prop ContentComposition : GuiGraphicsComposition*{GetContentComposition}

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::EnglishNumbersControllerTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-EnglishNumbersControllerTabPage>Initialize(this);
            <instance-ctor>();
        }

        func <instance-ctor>() : (::system::Void)
        {
            SetItemsToBind(controller.ItemsToBind);
            SetContentComposition(content);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(88/115)================================
module <constructor>demo::RepeatItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class RepeatItemTemplateConstructor
    {
        @cpp:Protected
        var ViewModel : ::demo::MyTextItem^ = null of (::demo::MyTextItem^);

        @cpp:Protected
        var <precompile>0 : ::demo::RepeatItemTemplate* = null of (::demo::RepeatItemTemplate*);

        @cpp:Protected
        var <precompile>1 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-RepeatItemTemplate>Initialize(<this> : ::demo::RepeatItemTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                (<precompile>1 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>2 = <precompile>1.BoundsComposition);
            {
                (<precompile>2.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>0.AddChild(<precompile>1.BoundsComposition);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ViewModel.Name of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(89/115)================================
module <instance>demo::RepeatItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(RepeatItemTemplateConstructor))
    class RepeatItemTemplate : ::presentation::templates::GuiControlTemplate, RepeatItemTemplateConstructor
    {
        @cpp:Private
        var <parameter>ViewModel : demo::MyTextItem^ = null of (::demo::MyTextItem^);

        func GetViewModel() : (demo::MyTextItem^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : demo::MyTextItem^{GetViewModel}

        new* (<ctor-parameter>ViewModel : demo::MyTextItem^)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::RepeatItemTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-RepeatItemTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(90/115)================================
module <constructor>demo::SharedSizeItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class SharedSizeItemTemplateConstructor
    {
        @cpp:Protected
        var ViewModel : ::demo::MyTextItem^ = null of (::demo::MyTextItem^);

        @cpp:Protected
        var <precompile>0 : ::demo::SharedSizeItemTemplate* = null of (::demo::SharedSizeItemTemplate*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiSharedSizeItemComposition* = null of (::presentation::compositions::GuiSharedSizeItemComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-SharedSizeItemTemplate>Initialize(<this> : ::demo::SharedSizeItemTemplate*) : (::system::Void)
        {
            (<precompile>0 = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>1 = new (::presentation::compositions::GuiSharedSizeItemComposition*)());
            {
                (<precompile>1.SharedWidth = true);
            }
            {
                (<precompile>1.Group = "EnglishNumber");
            }
            {
                (<precompile>1.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            (<precompile>3 = <precompile>2.BoundsComposition);
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ViewModel.Name of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(91/115)================================
module <instance>demo::SharedSizeItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(SharedSizeItemTemplateConstructor))
    class SharedSizeItemTemplate : ::presentation::templates::GuiControlTemplate, SharedSizeItemTemplateConstructor
    {
        @cpp:Private
        var <parameter>ViewModel : demo::MyTextItem^ = null of (::demo::MyTextItem^);

        func GetViewModel() : (demo::MyTextItem^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : demo::MyTextItem^{GetViewModel}

        new* (<ctor-parameter>ViewModel : demo::MyTextItem^)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::SharedSizeItemTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-SharedSizeItemTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(92/115)================================
module <constructor>demo::SharedSizeTextItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class SharedSizeTextItemTemplateConstructor
    {
        @cpp:Protected
        var self : ::demo::SharedSizeTextItemTemplate* = null of (::demo::SharedSizeTextItemTemplate*);

        @cpp:Protected
        var ViewModel : ::demo::MyTextItem^ = null of (::demo::MyTextItem^);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiSharedSizeItemComposition* = null of (::presentation::compositions::GuiSharedSizeItemComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::elements::GuiSolidLabelElement^ = null of (::presentation::elements::GuiSolidLabelElement^);

        @cpp:Protected
        func <demo-SharedSizeTextItemTemplate>Initialize(<this> : ::demo::SharedSizeTextItemTemplate*) : (::system::Void)
        {
            (self = <this>);
            (ViewModel = <this>.ViewModel);
            {
                (self.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>0 = new (::presentation::compositions::GuiSharedSizeItemComposition*)());
            {
                (<precompile>0.SharedWidth = true);
            }
            {
                (<precompile>0.Group = "EnglishNumber");
            }
            {
                (<precompile>0.AlignmentToParent = {left : (-1); top : 5; right : 5; bottom : 5;} of (::presentation::Margin));
            }
            (<precompile>1 = new (::presentation::elements::GuiSolidLabelElement^)());
            {
                (<precompile>0.OwnedElement = <precompile>1);
            }
            {
                self.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ViewModel.Name of (::system::String);
                        ValueChanged(<bind-activator-result>);
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::SharedSizeTextItemTemplate* = null of (::demo::SharedSizeTextItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.TextColor of (::presentation::Color);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::SharedSizeTextItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextColorChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextColorChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::SharedSizeTextItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Color;
                    var <new> = (cast (::presentation::Color) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Color = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::SharedSizeTextItemTemplate* = null of (::demo::SharedSizeTextItemTemplate*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.Font of (::presentation::FontProperties);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::SharedSizeTextItemTemplate*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.FontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.FontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::SharedSizeTextItemTemplate*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>1.Font;
                    var <new> = (cast (::presentation::FontProperties) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>1.Font = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(93/115)================================
module <instance>demo::SharedSizeTextItemTemplate;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(SharedSizeTextItemTemplateConstructor))
    class SharedSizeTextItemTemplate : ::presentation::templates::GuiTextListItemTemplate, SharedSizeTextItemTemplateConstructor
    {
        @cpp:Private
        var <parameter>ViewModel : demo::MyTextItem^ = null of (::demo::MyTextItem^);

        func GetViewModel() : (demo::MyTextItem^)
        {
            return <parameter>ViewModel;
        }

        prop ViewModel : demo::MyTextItem^{GetViewModel}

        new* (<ctor-parameter>ViewModel : demo::MyTextItem^)
        {
            (<parameter>ViewModel = <ctor-parameter>ViewModel);
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::SharedSizeTextItemTemplate");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-SharedSizeTextItemTemplate>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::templates::GuiTemplate*));
        }
    }
}

================================(94/115)================================
module <constructor>demo::ResponsiveGroupControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class ResponsiveGroupControlConstructor
    {
        @cpp:Protected
        var self : ::demo::ResponsiveGroupControl* = null of (::demo::ResponsiveGroupControl*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiResponsiveViewComposition* = null of (::presentation::compositions::GuiResponsiveViewComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiResponsiveViewComposition* = null of (::presentation::compositions::GuiResponsiveViewComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>19 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>20 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>21 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>23 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>24 : ::presentation::compositions::GuiResponsiveViewComposition* = null of (::presentation::compositions::GuiResponsiveViewComposition*);

        @cpp:Protected
        var <precompile>25 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>26 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>27 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>28 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>29 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>30 : ::presentation::compositions::GuiResponsiveViewComposition* = null of (::presentation::compositions::GuiResponsiveViewComposition*);

        @cpp:Protected
        var <precompile>31 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>32 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>33 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>34 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>35 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>36 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>37 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>38 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var responsive : ::presentation::compositions::GuiResponsiveGroupComposition* = null of (::presentation::compositions::GuiResponsiveGroupComposition*);

        @cpp:Protected
        var <precompile>39 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>40 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        func <demo-ResponsiveGroupControl>Initialize(<this> : ::demo::ResponsiveGroupControl*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(5, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(4, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 5, 1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>3.Color = (cast (::presentation::Color) "#00FF00"));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (responsive = new (::presentation::compositions::GuiResponsiveGroupComposition*)());
            <this>.SetNamedObject("responsive", responsive);
            {
                (responsive.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            (<precompile>4 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>4.Padding = 10 of (::system::Int32));
            }
            {
                (<precompile>4.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>4.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>5 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>6 = new (::presentation::compositions::GuiResponsiveViewComposition*)());
            (<precompile>7 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>8 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>8.Text = "Pen Pineapple Apple Pen");
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                var <collection> = <precompile>6.Views;
                <collection>.Add(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>10 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>10.Text = "Pineapple Pen");
            }
            {
                <precompile>9.AddChild(<precompile>10.BoundsComposition);
            }
            {
                var <collection> = <precompile>6.Views;
                <collection>.Add(<precompile>9);
            }
            (<precompile>11 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>12 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>12.Text = "Apple");
            }
            {
                <precompile>11.AddChild(<precompile>12.BoundsComposition);
            }
            {
                var <collection> = <precompile>6.Views;
                <collection>.Add(<precompile>11);
            }
            (<precompile>13 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>14 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>14.Text = "Pen");
            }
            {
                <precompile>13.AddChild(<precompile>14.BoundsComposition);
            }
            {
                var <collection> = <precompile>6.Views;
                <collection>.Add(<precompile>13);
            }
            {
                <precompile>5.AddChild(<precompile>6);
            }
            {
                <precompile>4.AddChild(<precompile>5);
            }
            (<precompile>15 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>16 = new (::presentation::compositions::GuiResponsiveViewComposition*)());
            (<precompile>17 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>18 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>18.Text = "Pineapple Pen");
            }
            {
                <precompile>17.AddChild(<precompile>18.BoundsComposition);
            }
            {
                var <collection> = <precompile>16.Views;
                <collection>.Add(<precompile>17);
            }
            (<precompile>19 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>20 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>20.Text = "Apple");
            }
            {
                <precompile>19.AddChild(<precompile>20.BoundsComposition);
            }
            {
                var <collection> = <precompile>16.Views;
                <collection>.Add(<precompile>19);
            }
            (<precompile>21 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>22 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>22.Text = "Pen");
            }
            {
                <precompile>21.AddChild(<precompile>22.BoundsComposition);
            }
            {
                var <collection> = <precompile>16.Views;
                <collection>.Add(<precompile>21);
            }
            {
                <precompile>15.AddChild(<precompile>16);
            }
            {
                <precompile>4.AddChild(<precompile>15);
            }
            (<precompile>23 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>24 = new (::presentation::compositions::GuiResponsiveViewComposition*)());
            (<precompile>25 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>26 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>26.Text = "Apple");
            }
            {
                <precompile>25.AddChild(<precompile>26.BoundsComposition);
            }
            {
                var <collection> = <precompile>24.Views;
                <collection>.Add(<precompile>25);
            }
            (<precompile>27 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>28 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>28.Text = "Pen");
            }
            {
                <precompile>27.AddChild(<precompile>28.BoundsComposition);
            }
            {
                var <collection> = <precompile>24.Views;
                <collection>.Add(<precompile>27);
            }
            {
                <precompile>23.AddChild(<precompile>24);
            }
            {
                <precompile>4.AddChild(<precompile>23);
            }
            (<precompile>29 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>30 = new (::presentation::compositions::GuiResponsiveViewComposition*)());
            (<precompile>31 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>32 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>32.Text = "Pen");
            }
            {
                <precompile>31.AddChild(<precompile>32.BoundsComposition);
            }
            {
                var <collection> = <precompile>30.Views;
                <collection>.Add(<precompile>31);
            }
            {
                <precompile>29.AddChild(<precompile>30);
            }
            {
                <precompile>4.AddChild(<precompile>29);
            }
            {
                responsive.AddChild(<precompile>4);
            }
            {
                <precompile>2.AddChild(responsive);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>33 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>33.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>34 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>34.Text = "LevelUp();");
            }
            {
                <precompile>33.AddChild(<precompile>34.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>33);
            }
            (<precompile>35 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>35.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>36 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>36.Text = "LevelDown();");
            }
            {
                <precompile>35.AddChild(<precompile>36.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>35);
            }
            (<precompile>37 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>37.SetSite(2, 1, 1, 1);
            }
            {
                (<precompile>38 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>37.AddChild(<precompile>38.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>37);
            }
            (<precompile>39 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>39.SetSite(3, 1, 1, 1);
            }
            {
                (<precompile>40 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>39.AddChild(<precompile>40.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>39);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    responsive.LevelUp();
                };
                attach(<precompile>34.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    responsive.LevelDown();
                };
                attach(<precompile>36.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::compositions::GuiResponsiveGroupComposition* = null of (::presentation::compositions::GuiResponsiveGroupComposition*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("LevelCount: " & <bind-cache>0.LevelCount);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (responsive ?? null of (::presentation::compositions::GuiResponsiveGroupComposition*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LevelCountChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LevelCountChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::compositions::GuiResponsiveGroupComposition*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>38.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>38.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::compositions::GuiResponsiveGroupComposition* = null of (::presentation::compositions::GuiResponsiveGroupComposition*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("CurrentLevel: " & <bind-cache>0.CurrentLevel);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (responsive ?? null of (::presentation::compositions::GuiResponsiveGroupComposition*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CurrentLevelChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CurrentLevelChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::compositions::GuiResponsiveGroupComposition*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>40.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>40.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(95/115)================================
module <instance>demo::ResponsiveGroupControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(ResponsiveGroupControlConstructor))
    class ResponsiveGroupControl : ::presentation::controls::GuiCustomControl, ResponsiveGroupControlConstructor
    {
        new* ()
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::ResponsiveGroupControl");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-ResponsiveGroupControl>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(96/115)================================
module <constructor>demo::ResponsiveStackControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class ResponsiveStackControlConstructor
    {
        @cpp:Protected
        var self : ::demo::ResponsiveStackControl* = null of (::demo::ResponsiveStackControl*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiResponsiveViewComposition* = null of (::presentation::compositions::GuiResponsiveViewComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>13 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>14 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiResponsiveViewComposition* = null of (::presentation::compositions::GuiResponsiveViewComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>19 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>20 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>21 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>22 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>23 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>24 : ::presentation::compositions::GuiResponsiveViewComposition* = null of (::presentation::compositions::GuiResponsiveViewComposition*);

        @cpp:Protected
        var <precompile>25 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>26 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>27 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>28 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>29 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>30 : ::presentation::compositions::GuiResponsiveViewComposition* = null of (::presentation::compositions::GuiResponsiveViewComposition*);

        @cpp:Protected
        var <precompile>31 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>32 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>33 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>34 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>35 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>36 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>37 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>38 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var responsive : ::presentation::compositions::GuiResponsiveStackComposition* = null of (::presentation::compositions::GuiResponsiveStackComposition*);

        @cpp:Protected
        var <precompile>39 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>40 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        func <demo-ResponsiveStackControl>Initialize(<this> : ::demo::ResponsiveStackControl*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(5, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(4, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 5, 1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>3.Color = (cast (::presentation::Color) "#00FF00"));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (responsive = new (::presentation::compositions::GuiResponsiveStackComposition*)());
            <this>.SetNamedObject("responsive", responsive);
            {
                (responsive.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            (<precompile>4 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>4.Padding = 10 of (::system::Int32));
            }
            {
                (<precompile>4.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>4.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>4.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>5 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>6 = new (::presentation::compositions::GuiResponsiveViewComposition*)());
            (<precompile>7 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>8 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>8.Text = "Pen Pineapple Apple Pen");
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                var <collection> = <precompile>6.Views;
                <collection>.Add(<precompile>7);
            }
            (<precompile>9 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>10 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>10.Text = "Pineapple Pen");
            }
            {
                <precompile>9.AddChild(<precompile>10.BoundsComposition);
            }
            {
                var <collection> = <precompile>6.Views;
                <collection>.Add(<precompile>9);
            }
            (<precompile>11 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>12 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>12.Text = "Apple");
            }
            {
                <precompile>11.AddChild(<precompile>12.BoundsComposition);
            }
            {
                var <collection> = <precompile>6.Views;
                <collection>.Add(<precompile>11);
            }
            (<precompile>13 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>14 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>14.Text = "Pen");
            }
            {
                <precompile>13.AddChild(<precompile>14.BoundsComposition);
            }
            {
                var <collection> = <precompile>6.Views;
                <collection>.Add(<precompile>13);
            }
            {
                <precompile>5.AddChild(<precompile>6);
            }
            {
                <precompile>4.AddChild(<precompile>5);
            }
            (<precompile>15 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>16 = new (::presentation::compositions::GuiResponsiveViewComposition*)());
            (<precompile>17 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>18 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>18.Text = "Pineapple Pen");
            }
            {
                <precompile>17.AddChild(<precompile>18.BoundsComposition);
            }
            {
                var <collection> = <precompile>16.Views;
                <collection>.Add(<precompile>17);
            }
            (<precompile>19 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>20 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>20.Text = "Apple");
            }
            {
                <precompile>19.AddChild(<precompile>20.BoundsComposition);
            }
            {
                var <collection> = <precompile>16.Views;
                <collection>.Add(<precompile>19);
            }
            (<precompile>21 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>22 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>22.Text = "Pen");
            }
            {
                <precompile>21.AddChild(<precompile>22.BoundsComposition);
            }
            {
                var <collection> = <precompile>16.Views;
                <collection>.Add(<precompile>21);
            }
            {
                <precompile>15.AddChild(<precompile>16);
            }
            {
                <precompile>4.AddChild(<precompile>15);
            }
            (<precompile>23 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>24 = new (::presentation::compositions::GuiResponsiveViewComposition*)());
            (<precompile>25 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>26 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>26.Text = "Apple");
            }
            {
                <precompile>25.AddChild(<precompile>26.BoundsComposition);
            }
            {
                var <collection> = <precompile>24.Views;
                <collection>.Add(<precompile>25);
            }
            (<precompile>27 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>28 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>28.Text = "Pen");
            }
            {
                <precompile>27.AddChild(<precompile>28.BoundsComposition);
            }
            {
                var <collection> = <precompile>24.Views;
                <collection>.Add(<precompile>27);
            }
            {
                <precompile>23.AddChild(<precompile>24);
            }
            {
                <precompile>4.AddChild(<precompile>23);
            }
            (<precompile>29 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>30 = new (::presentation::compositions::GuiResponsiveViewComposition*)());
            (<precompile>31 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            {
                (<precompile>32 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                (<precompile>32.Text = "Pen");
            }
            {
                <precompile>31.AddChild(<precompile>32.BoundsComposition);
            }
            {
                var <collection> = <precompile>30.Views;
                <collection>.Add(<precompile>31);
            }
            {
                <precompile>29.AddChild(<precompile>30);
            }
            {
                <precompile>4.AddChild(<precompile>29);
            }
            {
                responsive.AddChild(<precompile>4);
            }
            {
                <precompile>2.AddChild(responsive);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>33 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>33.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>34 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>34.Text = "LevelUp();");
            }
            {
                <precompile>33.AddChild(<precompile>34.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>33);
            }
            (<precompile>35 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>35.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>36 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>36.Text = "LevelDown();");
            }
            {
                <precompile>35.AddChild(<precompile>36.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>35);
            }
            (<precompile>37 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>37.SetSite(2, 1, 1, 1);
            }
            {
                (<precompile>38 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>37.AddChild(<precompile>38.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>37);
            }
            (<precompile>39 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>39.SetSite(3, 1, 1, 1);
            }
            {
                (<precompile>40 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>39.AddChild(<precompile>40.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>39);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    responsive.LevelUp();
                };
                attach(<precompile>34.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    responsive.LevelDown();
                };
                attach(<precompile>36.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::compositions::GuiResponsiveStackComposition* = null of (::presentation::compositions::GuiResponsiveStackComposition*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("LevelCount: " & <bind-cache>0.LevelCount);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (responsive ?? null of (::presentation::compositions::GuiResponsiveStackComposition*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LevelCountChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LevelCountChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::compositions::GuiResponsiveStackComposition*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>38.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>38.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::compositions::GuiResponsiveStackComposition* = null of (::presentation::compositions::GuiResponsiveStackComposition*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("CurrentLevel: " & <bind-cache>0.CurrentLevel);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (responsive ?? null of (::presentation::compositions::GuiResponsiveStackComposition*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CurrentLevelChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CurrentLevelChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::compositions::GuiResponsiveStackComposition*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>40.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>40.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(97/115)================================
module <instance>demo::ResponsiveStackControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(ResponsiveStackControlConstructor))
    class ResponsiveStackControl : ::presentation::controls::GuiCustomControl, ResponsiveStackControlConstructor
    {
        new* ()
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::ResponsiveStackControl");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-ResponsiveStackControl>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(98/115)================================
module <constructor>demo::ResponsiveTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class ResponsiveTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::ResponsiveTabPage* = null of (::demo::ResponsiveTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>3 : ::demo::ResponsiveViewControl* = null of (::demo::ResponsiveViewControl*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>8 : ::demo::ResponsiveStackControl* = null of (::demo::ResponsiveStackControl*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::controls::GuiControl* = null of (::presentation::controls::GuiControl*);

        @cpp:Protected
        var <precompile>13 : ::demo::ResponsiveGroupControl* = null of (::demo::ResponsiveGroupControl*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-ResponsiveTabPage>Initialize(<this> : ::demo::ResponsiveTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "Responsive");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>0.SetRowsAndColumns(4, 1);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(3, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>5 = <precompile>2.BoundsComposition);
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2.Text = "GuiResponsiveViewComposition");
            }
            (<precompile>3 = new (::demo::ResponsiveViewControl*)());
            (<precompile>4 = <precompile>3.BoundsComposition);
            {
                (<precompile>4.AlignmentToParent = {left : 10; top : 10; right : 10; bottom : 10;} of (::presentation::Margin));
            }
            {
                <precompile>2.AddChild(<precompile>3);
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>7 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>10 = <precompile>7.BoundsComposition);
            {
                (<precompile>10.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>7.Text = "GuiResponsiveStackComposition");
            }
            (<precompile>8 = new (::demo::ResponsiveStackControl*)());
            (<precompile>9 = <precompile>8.BoundsComposition);
            {
                (<precompile>9.AlignmentToParent = {left : 10; top : 10; right : 10; bottom : 10;} of (::presentation::Margin));
            }
            {
                <precompile>7.AddChild(<precompile>8);
            }
            {
                <precompile>6.AddChild(<precompile>7.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>6);
            }
            (<precompile>11 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>11.SetSite(2, 0, 1, 1);
            }
            {
                (<precompile>12 = new (::presentation::controls::GuiControl*)(::presentation::theme::ThemeName::GroupBox));
            }
            (<precompile>15 = <precompile>12.BoundsComposition);
            {
                (<precompile>15.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>12.Text = "GuiResponsiveGroupComposition");
            }
            (<precompile>13 = new (::demo::ResponsiveGroupControl*)());
            (<precompile>14 = <precompile>13.BoundsComposition);
            {
                (<precompile>14.AlignmentToParent = {left : 10; top : 10; right : 10; bottom : 10;} of (::presentation::Margin));
            }
            {
                <precompile>12.AddChild(<precompile>13);
            }
            {
                <precompile>11.AddChild(<precompile>12.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>11);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
        }

        new ()
        {
        }
    }
}

================================(99/115)================================
module <instance>demo::ResponsiveTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(ResponsiveTabPageConstructor))
    class ResponsiveTabPage : ::presentation::controls::GuiTabPage, ResponsiveTabPageConstructor
    {
        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::ResponsiveTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-ResponsiveTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(100/115)================================
module <constructor>demo::ResponsiveViewControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class ResponsiveViewControlConstructor
    {
        @cpp:Protected
        var self : ::demo::ResponsiveViewControl* = null of (::demo::ResponsiveViewControl*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>3 : ::presentation::elements::GuiSolidBorderElement^ = null of (::presentation::elements::GuiSolidBorderElement^);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>8 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiResponsiveSharedComposition* = null of (::presentation::compositions::GuiResponsiveSharedComposition*);

        @cpp:Protected
        var <precompile>10 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>11 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>12 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>13 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>14 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>15 : ::presentation::compositions::GuiResponsiveSharedComposition* = null of (::presentation::compositions::GuiResponsiveSharedComposition*);

        @cpp:Protected
        var <precompile>16 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>17 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>18 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>19 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>20 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>21 : ::presentation::compositions::GuiResponsiveSharedComposition* = null of (::presentation::compositions::GuiResponsiveSharedComposition*);

        @cpp:Protected
        var <precompile>22 : ::presentation::compositions::GuiResponsiveFixedComposition* = null of (::presentation::compositions::GuiResponsiveFixedComposition*);

        @cpp:Protected
        var <precompile>23 : ::presentation::compositions::GuiStackComposition* = null of (::presentation::compositions::GuiStackComposition*);

        @cpp:Protected
        var <precompile>24 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>25 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>26 : ::presentation::compositions::GuiStackItemComposition* = null of (::presentation::compositions::GuiStackItemComposition*);

        @cpp:Protected
        var <precompile>27 : ::presentation::compositions::GuiResponsiveSharedComposition* = null of (::presentation::compositions::GuiResponsiveSharedComposition*);

        @cpp:Protected
        var <precompile>28 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>29 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>30 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>31 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>32 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>33 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var <precompile>34 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>35 : ::presentation::controls::GuiLabel* = null of (::presentation::controls::GuiLabel*);

        @cpp:Protected
        var responsive : ::presentation::compositions::GuiResponsiveViewComposition* = null of (::presentation::compositions::GuiResponsiveViewComposition*);

        @cpp:Protected
        var documentBox : ::presentation::controls::GuiDocumentLabel* = null of (::presentation::controls::GuiDocumentLabel*);

        @cpp:Protected
        func <demo-ResponsiveViewControl>Initialize(<this> : ::demo::ResponsiveViewControl*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.BorderVisible = false);
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(5, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(3, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(4, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 5, 1);
            }
            (<precompile>2 = new (::presentation::compositions::GuiBoundsComposition*)());
            {
                (<precompile>2.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>3 = new (::presentation::elements::GuiSolidBorderElement^)());
            {
                (<precompile>3.Color = (cast (::presentation::Color) "#00FF00"));
            }
            {
                (<precompile>2.OwnedElement = <precompile>3);
            }
            (responsive = new (::presentation::compositions::GuiResponsiveViewComposition*)());
            <this>.SetNamedObject("responsive", responsive);
            (<precompile>4 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            (<precompile>5 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>5.Padding = 5 of (::system::Int32));
            }
            {
                (<precompile>5.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>5.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>5.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>6 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>7 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>6.AddChild(<precompile>7.BoundsComposition);
            }
            {
                <precompile>5.AddChild(<precompile>6);
            }
            (<precompile>8 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>9 = new (::presentation::compositions::GuiResponsiveSharedComposition*)());
            {
                (<precompile>9.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>8.AddChild(<precompile>9);
            }
            {
                <precompile>5.AddChild(<precompile>8);
            }
            {
                <precompile>4.AddChild(<precompile>5);
            }
            {
                var <collection> = responsive.Views;
                <collection>.Add(<precompile>4);
            }
            (<precompile>10 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            (<precompile>11 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>11.Padding = 5 of (::system::Int32));
            }
            {
                (<precompile>11.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>11.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>11.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>12 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>13 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>12.AddChild(<precompile>13.BoundsComposition);
            }
            {
                <precompile>11.AddChild(<precompile>12);
            }
            (<precompile>14 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>15 = new (::presentation::compositions::GuiResponsiveSharedComposition*)());
            {
                (<precompile>15.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>14.AddChild(<precompile>15);
            }
            {
                <precompile>11.AddChild(<precompile>14);
            }
            {
                <precompile>10.AddChild(<precompile>11);
            }
            {
                var <collection> = responsive.Views;
                <collection>.Add(<precompile>10);
            }
            (<precompile>16 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            (<precompile>17 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>17.Padding = 5 of (::system::Int32));
            }
            {
                (<precompile>17.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>17.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>17.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>18 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>19 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>18.AddChild(<precompile>19.BoundsComposition);
            }
            {
                <precompile>17.AddChild(<precompile>18);
            }
            (<precompile>20 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>21 = new (::presentation::compositions::GuiResponsiveSharedComposition*)());
            {
                (<precompile>21.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>20.AddChild(<precompile>21);
            }
            {
                <precompile>17.AddChild(<precompile>20);
            }
            {
                <precompile>16.AddChild(<precompile>17);
            }
            {
                var <collection> = responsive.Views;
                <collection>.Add(<precompile>16);
            }
            (<precompile>22 = new (::presentation::compositions::GuiResponsiveFixedComposition*)());
            (<precompile>23 = new (::presentation::compositions::GuiStackComposition*)());
            {
                (<precompile>23.Padding = 5 of (::system::Int32));
            }
            {
                (<precompile>23.Direction = Vertical of (::presentation::compositions::GuiStackComposition::Direction));
            }
            {
                (<precompile>23.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>23.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            (<precompile>24 = new (::presentation::compositions::GuiStackItemComposition*)());
            {
                (<precompile>25 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>24.AddChild(<precompile>25.BoundsComposition);
            }
            {
                <precompile>23.AddChild(<precompile>24);
            }
            (<precompile>26 = new (::presentation::compositions::GuiStackItemComposition*)());
            (<precompile>27 = new (::presentation::compositions::GuiResponsiveSharedComposition*)());
            {
                (<precompile>27.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>26.AddChild(<precompile>27);
            }
            {
                <precompile>23.AddChild(<precompile>26);
            }
            {
                <precompile>22.AddChild(<precompile>23);
            }
            {
                var <collection> = responsive.Views;
                <collection>.Add(<precompile>22);
            }
            {
                (documentBox = new (::presentation::controls::GuiDocumentLabel*)(::presentation::theme::ThemeName::DocumentTextBox));
                <this>.SetNamedObject("documentBox", documentBox);
            }
            {
                (documentBox.EditMode = Editable of (::presentation::controls::GuiDocumentCommonInterface::EditMode));
            }
            {
                (documentBox.Text = "Edit me!");
            }
            {
                var <collection> = responsive.SharedControls;
                <collection>.Add(documentBox);
            }
            {
                (responsive.AlignmentToParent = {left : 1; top : 1; right : 1; bottom : 1;} of (::presentation::Margin));
            }
            {
                <precompile>2.AddChild(responsive);
            }
            {
                <precompile>1.AddChild(<precompile>2);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>28 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>28.SetSite(0, 1, 1, 1);
            }
            {
                (<precompile>29 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>29.Text = "LevelUp();");
            }
            {
                <precompile>28.AddChild(<precompile>29.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>28);
            }
            (<precompile>30 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>30.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>31 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>31.Text = "LevelDown();");
            }
            {
                <precompile>30.AddChild(<precompile>31.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>30);
            }
            (<precompile>32 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>32.SetSite(2, 1, 1, 1);
            }
            {
                (<precompile>33 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>32.AddChild(<precompile>33.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>32);
            }
            (<precompile>34 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>34.SetSite(3, 1, 1, 1);
            }
            {
                (<precompile>35 = new (::presentation::controls::GuiLabel*)(::presentation::theme::ThemeName::Label));
            }
            {
                <precompile>34.AddChild(<precompile>35.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>34);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentLabel* = null of (::presentation::controls::GuiDocumentLabel*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("Pen Pineapple Apple Pen: " & <bind-cache>0.Text);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (documentBox ?? null of (::presentation::controls::GuiDocumentLabel*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentLabel*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>9.Shared = documentBox);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentLabel* = null of (::presentation::controls::GuiDocumentLabel*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("Pineapple Pen: " & <bind-cache>0.Text);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (documentBox ?? null of (::presentation::controls::GuiDocumentLabel*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentLabel*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>13.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>13.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>15.Shared = documentBox);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentLabel* = null of (::presentation::controls::GuiDocumentLabel*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("Apple: " & <bind-cache>0.Text);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (documentBox ?? null of (::presentation::controls::GuiDocumentLabel*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentLabel*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>19.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>19.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>21.Shared = documentBox);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::controls::GuiDocumentLabel* = null of (::presentation::controls::GuiDocumentLabel*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("Pen: " & <bind-cache>0.Text);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (documentBox ?? null of (::presentation::controls::GuiDocumentLabel*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::controls::GuiDocumentLabel*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>25.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>25.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>27.Shared = documentBox);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    responsive.LevelUp();
                };
                attach(<precompile>29.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    responsive.LevelDown();
                };
                attach(<precompile>31.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::compositions::GuiResponsiveViewComposition* = null of (::presentation::compositions::GuiResponsiveViewComposition*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("LevelCount: " & <bind-cache>0.LevelCount);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (responsive ?? null of (::presentation::compositions::GuiResponsiveViewComposition*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.LevelCountChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.LevelCountChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::compositions::GuiResponsiveViewComposition*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>33.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>33.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::presentation::compositions::GuiResponsiveViewComposition* = null of (::presentation::compositions::GuiResponsiveViewComposition*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = ("CurrentLevel: " & <bind-cache>0.CurrentLevel);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (responsive ?? null of (::presentation::compositions::GuiResponsiveViewComposition*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.CurrentLevelChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.CurrentLevelChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::presentation::compositions::GuiResponsiveViewComposition*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>35.Text;
                    var <new> = (cast (::system::String) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>35.Text = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(101/115)================================
module <instance>demo::ResponsiveViewControl;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(ResponsiveViewControlConstructor))
    class ResponsiveViewControl : ::presentation::controls::GuiCustomControl, ResponsiveViewControlConstructor
    {
        new* ()
            :::presentation::controls::GuiCustomControl(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::ResponsiveViewControl");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-ResponsiveViewControl>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(102/115)================================
module <constructor>demo::DocumentBoxSubTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class DocumentBoxSubTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::DocumentBoxSubTabPage* = null of (::demo::DocumentBoxSubTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiDocumentLabel* = null of (::presentation::controls::GuiDocumentLabel*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::GuiDocumentViewer* = null of (::presentation::controls::GuiDocumentViewer*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>8 : ::presentation::controls::GuiDocumentLabel* = null of (::presentation::controls::GuiDocumentLabel*);

        @cpp:Protected
        var <precompile>9 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-DocumentBoxSubTabPage>Initialize(<this> : ::demo::DocumentBoxSubTabPage*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 2);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : Percentage; percentage : 0.5;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 2);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiDocumentLabel*)(::presentation::theme::ThemeName::DocumentTextBox));
            }
            {
                (<precompile>2.EditMode = Editable of (::presentation::controls::GuiDocumentCommonInterface::EditMode));
            }
            (<precompile>3 = <precompile>2.BoundsComposition);
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2.Alt = "T");
            }
            {
                (<precompile>2.Text = "Archer");
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>5 = new (::presentation::controls::GuiDocumentViewer*)(::presentation::theme::ThemeName::DocumentViewer));
            }
            {
                (<precompile>5.EditMode = Editable of (::presentation::controls::GuiDocumentCommonInterface::EditMode));
            }
            (<precompile>6 = <precompile>5.BoundsComposition);
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>5.Alt = "V");
            }
            {
                <precompile>4.AddChild(<precompile>5.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>4);
            }
            (<precompile>7 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>7.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>8 = new (::presentation::controls::GuiDocumentLabel*)(::presentation::theme::ThemeName::DocumentLabel));
            }
            {
                (<precompile>8.EditMode = Editable of (::presentation::controls::GuiDocumentCommonInterface::EditMode));
            }
            (<precompile>9 = <precompile>8.BoundsComposition);
            {
                (<precompile>9.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>8.Alt = "L");
            }
            {
                <precompile>7.AddChild(<precompile>8.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>7);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentBoxSubTabPage* = null of (::demo::DocumentBoxSubTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.TextBoxAcceptTabInput of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentBoxSubTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextBoxAcceptTabInputChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextBoxAcceptTabInputChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentBoxSubTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.AcceptTabInput;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.AcceptTabInput = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentBoxSubTabPage* = null of (::demo::DocumentBoxSubTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.TextBoxAcceptTabInput of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentBoxSubTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextBoxAcceptTabInputChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextBoxAcceptTabInputChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentBoxSubTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.AcceptTabInput;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.AcceptTabInput = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>5.Document = (cast (::presentation::DocumentModel^) <this>.ResolveResource("res", "TextBoxComponents/DocFixed", true)));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::DocumentBoxSubTabPage* = null of (::demo::DocumentBoxSubTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.TextBoxAcceptTabInput of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::DocumentBoxSubTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextBoxAcceptTabInputChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextBoxAcceptTabInputChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::DocumentBoxSubTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>8.AcceptTabInput;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>8.AcceptTabInput = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>8.Document = (cast (::presentation::DocumentModel^) <this>.ResolveResource("res", "TextBoxComponents/DocRelative", true)));
            }
        }

        new ()
        {
        }
    }
}

================================(103/115)================================
module <instance>demo::DocumentBoxSubTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(DocumentBoxSubTabPageConstructor))
    class DocumentBoxSubTabPage : ::presentation::controls::GuiTabPage, DocumentBoxSubTabPageConstructor
    {
        @cpp:Private
        var <prop>TextBoxAcceptTabInput : bool = true;

        func GetTextBoxAcceptTabInput() : (bool)
        {
            return <prop>TextBoxAcceptTabInput;
        }

        func SetTextBoxAcceptTabInput(<value> : bool) : (void)
        {
            if ((<prop>TextBoxAcceptTabInput != <value>))
            {
                (<prop>TextBoxAcceptTabInput = <value>);
                TextBoxAcceptTabInputChanged();
            }
        }

        event TextBoxAcceptTabInputChanged();

        prop TextBoxAcceptTabInput : bool{GetTextBoxAcceptTabInput, SetTextBoxAcceptTabInput : TextBoxAcceptTabInputChanged}

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::DocumentBoxSubTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-DocumentBoxSubTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(104/115)================================
module <constructor>demo::TextBoxSubTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class TextBoxSubTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::TextBoxSubTabPage* = null of (::demo::TextBoxSubTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiSinglelineTextBox* = null of (::presentation::controls::GuiSinglelineTextBox*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::GuiMultilineTextBox* = null of (::presentation::controls::GuiMultilineTextBox*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        func <demo-TextBoxSubTabPage>Initialize(<this> : ::demo::TextBoxSubTabPage*) : (::system::Void)
        {
            (self = <this>);
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 1);
                <precompile>0.SetRowOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 1);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiSinglelineTextBox*)(::presentation::theme::ThemeName::SinglelineTextBox));
            }
            (<precompile>3 = <precompile>2.BoundsComposition);
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>2.Alt = "S");
            }
            {
                (<precompile>2.Text = "Archer");
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>5 = new (::presentation::controls::GuiMultilineTextBox*)(::presentation::theme::ThemeName::MultilineTextBox));
            }
            {
                (<precompile>5.HorizontalAlwaysVisible = false);
            }
            {
                (<precompile>5.VerticalAlwaysVisible = false);
            }
            (<precompile>6 = <precompile>5.BoundsComposition);
            {
                (<precompile>6.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>5.Alt = "M");
            }
            {
                <precompile>4.AddChild(<precompile>5.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>4);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::TextBoxSubTabPage* = null of (::demo::TextBoxSubTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.TextBoxAcceptTabInput of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::TextBoxSubTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextBoxAcceptTabInputChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextBoxAcceptTabInputChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::TextBoxSubTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>2.AcceptTabInput;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>2.AcceptTabInput = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                (<precompile>5.Text = (cast (::system::String) (cast (::presentation::GuiTextData^) <this>.ResolveResource("res", "TextBoxComponents/Text", true)).Text));
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::TextBoxSubTabPage* = null of (::demo::TextBoxSubTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = <bind-cache>0.TextBoxAcceptTabInput of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0() : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (self ?? null of (::demo::TextBoxSubTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.TextBoxAcceptTabInputChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.TextBoxAcceptTabInputChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::TextBoxSubTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>5.AcceptTabInput;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>5.AcceptTabInput = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
        }

        new ()
        {
        }
    }
}

================================(105/115)================================
module <instance>demo::TextBoxSubTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(TextBoxSubTabPageConstructor))
    class TextBoxSubTabPage : ::presentation::controls::GuiTabPage, TextBoxSubTabPageConstructor
    {
        @cpp:Private
        var <prop>TextBoxAcceptTabInput : bool = true;

        func GetTextBoxAcceptTabInput() : (bool)
        {
            return <prop>TextBoxAcceptTabInput;
        }

        func SetTextBoxAcceptTabInput(<value> : bool) : (void)
        {
            if ((<prop>TextBoxAcceptTabInput != <value>))
            {
                (<prop>TextBoxAcceptTabInput = <value>);
                TextBoxAcceptTabInputChanged();
            }
        }

        event TextBoxAcceptTabInputChanged();

        prop TextBoxAcceptTabInput : bool{GetTextBoxAcceptTabInput, SetTextBoxAcceptTabInput : TextBoxAcceptTabInputChanged}

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::TextBoxSubTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-TextBoxSubTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(106/115)================================
module <constructor>demo::TextBoxTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    class TextBoxTabPageConstructor
    {
        @cpp:Protected
        var self : ::demo::TextBoxTabPage* = null of (::demo::TextBoxTabPage*);

        @cpp:Protected
        var <precompile>0 : ::presentation::compositions::GuiTableComposition* = null of (::presentation::compositions::GuiTableComposition*);

        @cpp:Protected
        var <precompile>1 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>2 : ::presentation::controls::GuiTab* = null of (::presentation::controls::GuiTab*);

        @cpp:Protected
        var <precompile>3 : ::presentation::compositions::GuiBoundsComposition* = null of (::presentation::compositions::GuiBoundsComposition*);

        @cpp:Protected
        var <precompile>4 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>5 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var <precompile>6 : ::presentation::compositions::GuiCellComposition* = null of (::presentation::compositions::GuiCellComposition*);

        @cpp:Protected
        var <precompile>7 : ::presentation::controls::GuiButton* = null of (::presentation::controls::GuiButton*);

        @cpp:Protected
        var t1 : ::demo::TextBoxSubTabPage* = null of (::demo::TextBoxSubTabPage*);

        @cpp:Protected
        var t2 : ::demo::TextBoxSubTabPage* = null of (::demo::TextBoxSubTabPage*);

        @cpp:Protected
        var d1 : ::demo::DocumentBoxSubTabPage* = null of (::demo::DocumentBoxSubTabPage*);

        @cpp:Protected
        var d2 : ::demo::DocumentBoxSubTabPage* = null of (::demo::DocumentBoxSubTabPage*);

        @cpp:Protected
        func <demo-TextBoxTabPage>Initialize(<this> : ::demo::TextBoxTabPage*) : (::system::Void)
        {
            (self = <this>);
            {
                (self.Text = "TextBox");
            }
            (<precompile>0 = new (::presentation::compositions::GuiTableComposition*)());
            {
                (<precompile>0.CellPadding = 5 of (::system::Int32));
            }
            {
                (<precompile>0.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                (<precompile>0.MinSizeLimitation = LimitToElementAndChildren of (::presentation::compositions::GuiGraphicsComposition::MinSizeLimitation));
            }
            {
                <precompile>0.SetRowsAndColumns(2, 4);
                <precompile>0.SetRowOption(0, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetRowOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(0, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(1, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(2, {composeType : MinSize;} of (::presentation::compositions::GuiCellOption));
                <precompile>0.SetColumnOption(3, {composeType : Percentage; percentage : 1.0;} of (::presentation::compositions::GuiCellOption));
            }
            (<precompile>1 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>1.SetSite(0, 0, 1, 4);
            }
            {
                (<precompile>2 = new (::presentation::controls::GuiTab*)(::presentation::theme::ThemeName::Tab));
            }
            (t1 = new (::demo::TextBoxSubTabPage*)());
            <this>.SetNamedObject("t1", t1);
            {
                (t1.Alt = "T");
            }
            {
                (t1.Text = "TextBox");
            }
            {
                var <collection> = <precompile>2.Pages;
                <collection>.Add(t1);
            }
            (t2 = new (::demo::TextBoxSubTabPage*)());
            <this>.SetNamedObject("t2", t2);
            {
                (t2.TextBoxAcceptTabInput = false);
            }
            {
                (t2.Alt = "T");
            }
            {
                (t2.Text = "TextBox (No Tab)");
            }
            {
                var <collection> = <precompile>2.Pages;
                <collection>.Add(t2);
            }
            (d1 = new (::demo::DocumentBoxSubTabPage*)());
            <this>.SetNamedObject("d1", d1);
            {
                (d1.Alt = "D");
            }
            {
                (d1.Text = "Document");
            }
            {
                var <collection> = <precompile>2.Pages;
                <collection>.Add(d1);
            }
            (d2 = new (::demo::DocumentBoxSubTabPage*)());
            <this>.SetNamedObject("d2", d2);
            {
                (d2.TextBoxAcceptTabInput = false);
            }
            {
                (d2.Alt = "D");
            }
            {
                (d2.Text = "Document (No Tab)");
            }
            {
                var <collection> = <precompile>2.Pages;
                <collection>.Add(d2);
            }
            (<precompile>3 = <precompile>2.BoundsComposition);
            {
                (<precompile>3.AlignmentToParent = {left : 0; top : 0; right : 0; bottom : 0;} of (::presentation::Margin));
            }
            {
                <precompile>1.AddChild(<precompile>2.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>1);
            }
            (<precompile>4 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>4.SetSite(1, 0, 1, 1);
            }
            {
                (<precompile>5 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>5.Alt = "L");
            }
            {
                (<precompile>5.Text = "Make Font Larger");
            }
            {
                <precompile>4.AddChild(<precompile>5.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>4);
            }
            (<precompile>6 = new (::presentation::compositions::GuiCellComposition*)());
            {
                <precompile>6.SetSite(1, 1, 1, 1);
            }
            {
                (<precompile>7 = new (::presentation::controls::GuiButton*)(::presentation::theme::ThemeName::Button));
            }
            {
                (<precompile>7.Alt = "S");
            }
            {
                (<precompile>7.Text = "Make Font Smaller");
            }
            {
                <precompile>6.AddChild(<precompile>7.BoundsComposition);
            }
            {
                <precompile>0.AddChild(<precompile>6);
            }
            {
                self.ContainerComposition.AddChild(<precompile>0);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.OnMakeFontLarger();
                };
                attach(<precompile>5.Clicked, <event-handler>);
            }
            {
                var <created-subscription> = new (::system::Subscription^)
                {
                    var <bind-cache>0 : ::demo::TextBoxSubTabPage* = null of (::demo::TextBoxSubTabPage*);

                    var <bind-handler>0_0 : ::system::reflection::EventHandler^ = null of (::system::reflection::EventHandler^);

                    var <bind-opened> : ::system::Boolean = false;

                    var <bind-closed> : ::system::Boolean = false;

                    func <bind-activator>() : (::system::Void)
                    {
                        var <bind-activator-result> = (<bind-cache>0.DisplayFont.size > 5) of (::system::Boolean);
                        ValueChanged(<bind-activator-result>);
                    }

                    func <bind-callback>0_0(<bind-callback-argument>0 : ::presentation::compositions::GuiGraphicsComposition*, <bind-callback-argument>1 : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                    {
                        <bind-activator>();
                    }

                    override func Open() : (::system::Boolean)
                    {
                        if ((!<bind-opened>))
                        {
                            (<bind-opened> = true);
                            (<bind-cache>0 = (t1 ?? null of (::demo::TextBoxSubTabPage*)));
                            (<bind-handler>0_0 = (attach(<bind-cache>0.DisplayFontChanged, <bind-callback>0_0) ?? null));
                            return true;
                        }
                        return false;
                    }

                    override func Update() : (::system::Boolean)
                    {
                        if ((<bind-opened> and (!<bind-closed>)))
                        {
                            <bind-activator>();
                            return true;
                        }
                        return false;
                    }

                    override func Close() : (::system::Boolean)
                    {
                        if ((!<bind-closed>))
                        {
                            (<bind-closed> = true);
                            if (<bind-handler>0_0 is not null)
                            {
                                detach(<bind-cache>0.DisplayFontChanged, <bind-handler>0_0);
                                (<bind-handler>0_0 = null);
                            }
                            (<bind-cache>0 = null of (::demo::TextBoxSubTabPage*));
                            (<bind-handler>0_0 = null of (::system::reflection::EventHandler^));
                            return true;
                        }
                        return false;
                    }
                };
                attach(<created-subscription>.ValueChanged, func (<value> : ::system::Object) : (::system::Void)
                {
                    var <old> = <precompile>7.Enabled;
                    var <new> = (cast (::system::Boolean) <value>);
                    if ((<old> == <new>))
                    {
                        return;
                    }
                    (<precompile>7.Enabled = <new>);
                });
                <this>.AddSubscription(<created-subscription>);
            }
            {
                var <event-handler> = func (sender : ::presentation::compositions::GuiGraphicsComposition*, arguments : ::presentation::compositions::GuiEventArgs*) : (::system::Void)
                {
                    self.OnMakeFontSmaller();
                };
                attach(<precompile>7.Clicked, <event-handler>);
            }
            {
                var <event-handler> = func () : (::system::Void)
                {
                    self.UpdateFont(ChangeFontSize(t1.DisplayFont, 5));
                };
                attach(self.OnMakeFontLarger, <event-handler>);
            }
            {
                var <event-handler> = func () : (::system::Void)
                {
                    self.UpdateFont(ChangeFontSize(t1.DisplayFont, (-5)));
                };
                attach(self.OnMakeFontSmaller, <event-handler>);
            }
        }

        new ()
        {
        }
    }
}

================================(107/115)================================
module <instance>demo::TextBoxTabPage;
using presentation::controls::Gui*;
using presentation::elements::Gui*Element;
using presentation::compositions::Gui*Composition;
using presentation::compositions::Gui*;
using presentation::templates::Gui*;
using system::*;
using system::reflection::*;
using presentation::*;
using presentation::Gui*;
using presentation::controls::*;
using presentation::controls::list::*;
using presentation::controls::tree::*;
using presentation::elements::*;
using presentation::elements::Gui*;
using presentation::elements::text::*;
using presentation::compositions::*;
using presentation::templates::*;
using presentation::theme::*;

namespace demo
{
    @cpp:Friend(typeof(TextBoxTabPageConstructor))
    class TextBoxTabPage : ::presentation::controls::GuiTabPage, TextBoxTabPageConstructor
    {
        @cpp:Protected
        var flag : bool = false;

        event OnMakeFontLarger();

        event OnMakeFontSmaller();

        @cpp:Protected
        func UpdateFont(newFont : FontProperties) : (void)
        {
            (t1.Font = newFont);
            (t2.Font = newFont);
            (d1.Font = newFont);
            (d2.Font = newFont);
        }

        new* ()
            :::presentation::controls::GuiTabPage(::presentation::theme::ThemeName::CustomControl)
        {
            var <resource> = ::presentation::IGuiResourceManager::GetResourceManager().GetResourceFromClassName("demo::TextBoxTabPage");
            var <resolver> = new (::presentation::GuiResourcePathResolver^)(<resource>, <resource>.WorkingDirectory);
            this.SetResourceResolver(<resolver>);
            this.<demo-TextBoxTabPage>Initialize(this);
        }

        delete
        {
            FinalizeInstanceRecursively(this of (::presentation::controls::GuiCustomControl*));
        }
    }
}

================================(108/115)================================
module <localized-strings-injection>demo::DialogStringsInjection;

namespace demo
{
    class DialogStringsInjection
    {
        static func <ls_zh-CN>BuildStrings(<ls>locale : ::system::Locale) : (::gaclib_controls::IDialogStringsStrings^)
        {
            return new (::gaclib_controls::IDialogStringsStrings^)
            {
                override func Abort() : (::system::String)
                {
                    return "关于";
                }

                override func Blue() : (::system::String)
                {
                    return "蓝色：";
                }

                override func Bold() : (::system::String)
                {
                    return "粗体";
                }

                override func Cancel() : (::system::String)
                {
                    return "取消";
                }

                override func Color() : (::system::String)
                {
                    return "颜色：";
                }

                override func ColorDialogTitle() : (::system::String)
                {
                    return "选择颜色";
                }

                override func Continue() : (::system::String)
                {
                    return "继续";
                }

                override func FileDialogAskCreateFile() : (::system::String)
                {
                    return "你确定想要创建下列文件吗？";
                }

                override func FileDialogAskOverrideFile() : (::system::String)
                {
                    return "你确定想要覆盖下列文件吗？";
                }

                override func FileDialogErrorEmptySelection() : (::system::String)
                {
                    return "应该选中至少一个文件。";
                }

                override func FileDialogErrorFileExpected() : (::system::String)
                {
                    return "下列文件夹不应该被选中：";
                }

                override func FileDialogErrorFileNotExist() : (::system::String)
                {
                    return "下列文件不存在：";
                }

                override func FileDialogErrorFolderNotExist() : (::system::String)
                {
                    return "文件夹不存在：";
                }

                override func FileDialogErrorMultipleSelectionNotEnabled() : (::system::String)
                {
                    return "本对话框不支持多选。";
                }

                override func FileDialogFileName() : (::system::String)
                {
                    return "文件名：";
                }

                override func FileDialogOpen() : (::system::String)
                {
                    return "打开";
                }

                override func FileDialogSave() : (::system::String)
                {
                    return "保存";
                }

                override func FileDialogTextLoadingFiles() : (::system::String)
                {
                    return "(正在加载文件夹和文件……)";
                }

                override func FileDialogTextLoadingFolders() : (::system::String)
                {
                    return "（正在加载……）";
                }

                override func FontColorGroup() : (::system::String)
                {
                    return "颜色：";
                }

                override func FontColorGroup2() : (::system::String)
                {
                    return "选择颜色：";
                }

                override func FontDialogTitle() : (::system::String)
                {
                    return "选择字体";
                }

                override func FontEffectGroup() : (::system::String)
                {
                    return "效果：";
                }

                override func FontNameGroup() : (::system::String)
                {
                    return "字体：";
                }

                override func FontPreviewGroup() : (::system::String)
                {
                    return "预览：";
                }

                override func FontSizeGroup() : (::system::String)
                {
                    return "尺寸：";
                }

                override func Green() : (::system::String)
                {
                    return "绿色：";
                }

                override func HAA() : (::system::String)
                {
                    return "水平抗锯齿";
                }

                override func Ignore() : (::system::String)
                {
                    return "忽略";
                }

                override func Italic() : (::system::String)
                {
                    return "斜体";
                }

                override func No() : (::system::String)
                {
                    return "否";
                }

                override func OK() : (::system::String)
                {
                    return "确定";
                }

                override func Red() : (::system::String)
                {
                    return "红色：";
                }

                override func Retry() : (::system::String)
                {
                    return "重试";
                }

                override func Strikeline() : (::system::String)
                {
                    return "删除线";
                }

                override func TryAgain() : (::system::String)
                {
                    return "再试一次";
                }

                override func Underline() : (::system::String)
                {
                    return "下划线";
                }

                override func VAA() : (::system::String)
                {
                    return "垂直抗锯齿";
                }

                override func Yes() : (::system::String)
                {
                    return "是";
                }
            };
        }

        new ()
        {
        }
    }
}

namespace demo
{
    static
    {
        ::gaclib_controls::DialogStrings::Install((cast (::system::Locale) "zh-CN"), DialogStringsInjection::<ls_zh-CN>BuildStrings((cast (::system::Locale) "zh-CN")));
    }
}

================================(109/115)================================
module imageloader;
using presentation::*;
using presentation::controls::*;
using presentation::controls::list::*;

func LoadListView(root : GuiInstanceRootObject*, callback : (func (ListViewItem^) : (void))) : (void)
{
    {
        var item = new (ListViewItem^)();
        (item.Text = "Task");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/Task", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/Task", true)));
        item.SubItems.Add("005");
        item.SubItems.Add("16x16");
        item.SubItems.Add("005_Task_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "Reminder");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/Reminder", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/Reminder", true)));
        item.SubItems.Add("008");
        item.SubItems.Add("16x16");
        item.SubItems.Add("008_Reminder_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "Tip");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/Tip", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/Tip", true)));
        item.SubItems.Add("023");
        item.SubItems.Add("16x16");
        item.SubItems.Add("023_Tip_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "ArrowCurve_Blue_Left");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/ArrowCurve_Blue_Left", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/ArrowCurve_Blue_Left", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_ArrowCurve_Blue_Left_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "ArrowCurve_Blue_Right");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/ArrowCurve_Blue_Right", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/ArrowCurve_Blue_Right", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_ArrowCurve_Blue_Right_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "DownArrowLong_Blue");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/DownArrowLong_Blue", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/DownArrowLong_Blue", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_DownArrowLong_Blue_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "DownArrowLong_Green");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/DownArrowLong_Green", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/DownArrowLong_Green", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_DownArrowLong_Green_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "DownArrowLong_Grey");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/DownArrowLong_Grey", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/DownArrowLong_Grey", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_DownArrowLong_Grey_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "DownArrowLong_Orange");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/DownArrowLong_Orange", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/DownArrowLong_Orange", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_DownArrowLong_Orange_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "LeftArrowLong_Blue");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/LeftArrowLong_Blue", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/LeftArrowLong_Blue", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_LeftArrowLong_Blue_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "LeftArrowLong_Green");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/LeftArrowLong_Green", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/LeftArrowLong_Green", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_LeftArrowLong_Green_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "LeftArrowLong_Grey");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/LeftArrowLong_Grey", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/LeftArrowLong_Grey", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_LeftArrowLong_Grey_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "LeftArrowLong_Orange");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/LeftArrowLong_Orange", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/LeftArrowLong_Orange", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_LeftArrowLong_Orange_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "Minus_Blue");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/Minus_Blue", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/Minus_Blue", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_Minus_Blue_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "Minus_Green");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/Minus_Green", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/Minus_Green", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_Minus_Green_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "Minus_Grey");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/Minus_Grey", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/Minus_Grey", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_Minus_Grey_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "Minus_Orange");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/Minus_Orange", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/Minus_Orange", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_Minus_Orange_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "Plus_Blue");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/Plus_Blue", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/Plus_Blue", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_Plus_Blue_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "Plus_Green");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/Plus_Green", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/Plus_Green", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_Plus_Green_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "Plus_Grey");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/Plus_Grey", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/Plus_Grey", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_Plus_Grey_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "Plus_Orange");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/Plus_Orange", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/Plus_Orange", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_Plus_Orange_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "RightArrowLong_Blue");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/RightArrowLong_Blue", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/RightArrowLong_Blue", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_RightArrowLong_Blue_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "RightArrowLong_Green");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/RightArrowLong_Green", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/RightArrowLong_Green", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_RightArrowLong_Green_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "RightArrowLong_Grey");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/RightArrowLong_Grey", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/RightArrowLong_Grey", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_RightArrowLong_Grey_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "RightArrowLong_Orange");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/RightArrowLong_Orange", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/RightArrowLong_Orange", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_RightArrowLong_Orange_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "UpArrowLong_Blue");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/UpArrowLong_Blue", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/UpArrowLong_Blue", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_UpArrowLong_Blue_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "UpArrowLong_Green");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/UpArrowLong_Green", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/UpArrowLong_Green", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_UpArrowLong_Green_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "UpArrowLong_Grey");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/UpArrowLong_Grey", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/UpArrowLong_Grey", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_UpArrowLong_Grey_16x16_72.png");
        callback(item);
    }
    {
        var item = new (ListViewItem^)();
        (item.Text = "UpArrowLong_Orange");
        (item.LargeImage = (cast (GuiImageData^) root.ResolveResource("res", "LargeImages/UpArrowLong_Orange", true)));
        (item.SmallImage = (cast (GuiImageData^) root.ResolveResource("res", "SmallImages/UpArrowLong_Orange", true)));
        item.SubItems.Add("112");
        item.SubItems.Add("16x16");
        item.SubItems.Add("112_UpArrowLong_Orange_16x16_72.png");
        callback(item);
    }
}

================================(110/115)================================
module viewmodel;
using system::*;
using presentation::*;

namespace demo
{
    class MyTextItem
    {
        @cpp:Private
        var <prop>Name : string = "";

        func GetName() : (string)
        {
            return <prop>Name;
        }

        func SetName(<value> : string) : (void)
        {
            (<prop>Name = <value>);
        }

        prop Name : string{GetName, SetName}

        @cpp:Private
        var <prop>Checked : bool = false;

        func GetChecked() : (bool)
        {
            return <prop>Checked;
        }

        func SetChecked(<value> : bool) : (void)
        {
            (<prop>Checked = <value>);
        }

        prop Checked : bool{GetChecked, SetChecked}

        new ()
        {
        }
    }

    enum MyCategory
    {
        Black = 0,
        Red = 1,
        Lime = 2,
        Blue = 3,
        White = 4,
    }

    enum MyGender
    {
        Male = 0,
        Female = 1,
    }

    class MyDataItem
    {
        @cpp:Private
        var <prop>Name : string = "";

        func GetName() : (string)
        {
            return <prop>Name;
        }

        func SetName(<value> : string) : (void)
        {
            (<prop>Name = <value>);
        }

        prop Name : string{GetName, SetName}

        @cpp:Private
        var <prop>Gender : MyGender = Male;

        func GetGender() : (MyGender)
        {
            return <prop>Gender;
        }

        func SetGender(<value> : MyGender) : (void)
        {
            (<prop>Gender = <value>);
        }

        prop Gender : MyGender{GetGender, SetGender}

        @cpp:Private
        var <prop>Category : MyCategory = White;

        func GetCategory() : (MyCategory)
        {
            return <prop>Category;
        }

        func SetCategory(<value> : MyCategory) : (void)
        {
            (<prop>Category = <value>);
        }

        prop Category : MyCategory{GetCategory, SetCategory}

        @cpp:Private
        var <prop>Birthday : DateTime = (cast (DateTime) "2000-01-01 00:00:00.000");

        func GetBirthday() : (DateTime)
        {
            return <prop>Birthday;
        }

        func SetBirthday(<value> : DateTime) : (void)
        {
            (<prop>Birthday = <value>);
        }

        prop Birthday : DateTime{GetBirthday, SetBirthday}

        @cpp:Private
        var <prop>Website : string = "";

        func GetWebsite() : (string)
        {
            return <prop>Website;
        }

        func SetWebsite(<value> : string) : (void)
        {
            (<prop>Website = <value>);
        }

        prop Website : string{GetWebsite, SetWebsite}

        @cpp:Private
        var <prop>LargeImage : GuiImageData^ = null;

        func GetLargeImage() : (GuiImageData^)
        {
            return <prop>LargeImage;
        }

        func SetLargeImage(<value> : GuiImageData^) : (void)
        {
            (<prop>LargeImage = <value>);
        }

        prop LargeImage : GuiImageData^{GetLargeImage, SetLargeImage}

        @cpp:Private
        var <prop>SmallImage : GuiImageData^ = null;

        func GetSmallImage() : (GuiImageData^)
        {
            return <prop>SmallImage;
        }

        func SetSmallImage(<value> : GuiImageData^) : (void)
        {
            (<prop>SmallImage = <value>);
        }

        prop SmallImage : GuiImageData^{GetSmallImage, SetSmallImage}

        new ()
        {
        }

        new (name : string, gender : MyGender, category : MyCategory, birthday : DateTime, website : string)
        {
            (Name = name);
            (Gender = gender);
            (Category = category);
            (Birthday = birthday);
            (Website = website);
        }
    }

    func ToString(value : MyCategory) : (string)
    {
        {
            var <switch>0 : ::demo::MyCategory = value;
            if ((<switch>0 == Black of (::demo::MyCategory)))
            {
                return "Black";
            }
            else if ((<switch>0 == Red of (::demo::MyCategory)))
            {
                return "Red";
            }
            else if ((<switch>0 == Lime of (::demo::MyCategory)))
            {
                return "Lime";
            }
            else if ((<switch>0 == Blue of (::demo::MyCategory)))
            {
                return "Blue";
            }
            else if ((<switch>0 == White of (::demo::MyCategory)))
            {
                return "White";
            }
        }
        return "";
    }

    func ToColor(value : MyCategory) : (Color)
    {
        {
            var <switch>1 : ::demo::MyCategory = value;
            if ((<switch>1 == Red of (::demo::MyCategory)))
            {
                return (cast (Color) "#FF0000");
            }
            else if ((<switch>1 == Lime of (::demo::MyCategory)))
            {
                return (cast (Color) "#00FF00");
            }
            else if ((<switch>1 == Blue of (::demo::MyCategory)))
            {
                return (cast (Color) "#0000FF");
            }
            else if ((<switch>1 == White of (::demo::MyCategory)))
            {
                return (cast (Color) "#FFFFFF");
            }
        }
        return (cast (Color) "#000000");
    }

    func ToString(value : MyGender) : (string)
    {
        {
            var <switch>2 : ::demo::MyGender = value;
            if ((<switch>2 == Male of (::demo::MyGender)))
            {
                return "Male";
            }
            else if ((<switch>2 == Female of (::demo::MyGender)))
            {
                return "Female";
            }
        }
        return "";
    }

    func ToString(value : DateTime) : (string)
    {
        return ((((("" & value.month) & "/") & value.day) & "/") & value.year);
    }
}

================================(111/115)================================
module Animation;
using system::*;
using presentation::*;

namespace demo
{
    class ColorDef
    {
        @cpp:Private
        var <prop>Top : Color = (cast (Color) "#000000");

        func GetTop() : (Color)
        {
            return <prop>Top;
        }

        func SetTop(<value> : Color) : (void)
        {
            if ((<prop>Top != <value>))
            {
                (<prop>Top = <value>);
                TopChanged();
            }
        }

        event TopChanged();

        prop Top : Color{GetTop, SetTop : TopChanged}

        @cpp:Private
        var <prop>Bottom : Color = (cast (Color) "#000000");

        func GetBottom() : (Color)
        {
            return <prop>Bottom;
        }

        func SetBottom(<value> : Color) : (void)
        {
            if ((<prop>Bottom != <value>))
            {
                (<prop>Bottom = <value>);
                BottomChanged();
            }
        }

        event BottomChanged();

        prop Bottom : Color{GetBottom, SetBottom : BottomChanged}

        @cpp:Private
        var <prop>Shadow : Color = (cast (Color) "#000000A0");

        func GetShadow() : (Color)
        {
            return <prop>Shadow;
        }

        func SetShadow(<value> : Color) : (void)
        {
            if ((<prop>Shadow != <value>))
            {
                (<prop>Shadow = <value>);
                ShadowChanged();
            }
        }

        event ShadowChanged();

        prop Shadow : Color{GetShadow, SetShadow : ShadowChanged}

        @cpp:Private
        var <prop>Thickness : int = 0;

        func GetThickness() : (int)
        {
            return <prop>Thickness;
        }

        func SetThickness(<value> : int) : (void)
        {
            if ((<prop>Thickness != <value>))
            {
                (<prop>Thickness = <value>);
                ThicknessChanged();
            }
        }

        event ThicknessChanged();

        prop Thickness : int{GetThickness, SetThickness : ThicknessChanged}

        static func Dark() : (ColorDef^)
        {
            var def = new (ColorDef^)();
            (def.Top = (cast (Color) "#9999FF"));
            (def.Bottom = (cast (Color) "#5555FF"));
            (def.Thickness = 0);
            return def;
        }

        static func Light() : (ColorDef^)
        {
            var def = new (ColorDef^)();
            (def.Top = (cast (Color) "#DDDDFF"));
            (def.Bottom = (cast (Color) "#9999FF"));
            (def.Thickness = 0);
            return def;
        }

        static func Sink() : (ColorDef^)
        {
            var def = new (ColorDef^)();
            (def.Top = (cast (Color) "#5555FF"));
            (def.Bottom = (cast (Color) "#0000FF"));
            (def.Thickness = 10);
            return def;
        }

        new ()
        {
        }
    }

    func F(x : double) : (double)
    {
        var y = ((x * x) * 2);
        return y;
    }

    func G(x : double) : (double)
    {
        if ((x < 0.5))
        {
            return F(x);
        }
        else
        {
            return (1 - F((1 - x)));
        }
    }
}

================================(112/115)================================
module ribbonscript;
using presentation::*;

namespace demo
{
    class StyleItem
    {
        var Name : string = "";

        var Style : DocumentStyle^ = null;

        new (name : string, size : DocumentFontSize?, color : Color?, bold : bool?, italic : bool?, underline : bool?, strikeline : bool?)
        {
            (Name = name);
            (Style = new (DocumentStyle^)());
            (Style.parentStyleName = "#Context");
            (Style.styles = new (DocumentStyleProperties^)());
            (Style.styles.size = size);
            (Style.styles.color = color);
            (Style.styles.bold = bold);
            (Style.styles.italic = italic);
            (Style.styles.underline = underline);
            (Style.styles.strikeline = strikeline);
        }
    }

    class StyleGroup
    {
        var Name : string = "";

        var Items : observe StyleItem^[] = {};

        new ()
        {
        }
    }
}

================================(113/115)================================
module <localized-strings>demo::StringResource;

namespace demo
{
    interface IStringResourceStrings
    {
        func Currency(<ls>0 : ::system::String) : (::system::String);

        func DateFormat(<ls>0 : ::system::DateTime) : (::system::String);

        func Label() : (::system::String);

        func LongDate(<ls>0 : ::system::DateTime) : (::system::String);

        func LongTime(<ls>0 : ::system::DateTime) : (::system::String);

        func Number(<ls>0 : ::system::String) : (::system::String);

        func Sentence(<ls>0 : ::system::String) : (::system::String);

        func ShortDate(<ls>0 : ::system::DateTime) : (::system::String);

        func ShortTime(<ls>0 : ::system::DateTime) : (::system::String);

        func TimeFormat(<ls>0 : ::system::DateTime) : (::system::String);

        func Title() : (::system::String);

        func YearMonthDate(<ls>0 : ::system::DateTime) : (::system::String);
    }
}

namespace demo
{
    var <ls>StringResource : IStringResourceStrings^[::system::Locale] = {};
}

namespace demo
{
    class StringResource
    {
        static func <ls_en-US>BuildStrings(<ls>locale : ::system::Locale) : (::demo::IStringResourceStrings^)
        {
            return new (::demo::IStringResourceStrings^)
            {
                override func Currency(<ls>0 : ::system::String) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatCurrency(<ls>locale, <ls>0);
                    return ("Currency: " & <ls>_0);
                }

                override func DateFormat(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatDate(<ls>locale, "yyyy", <ls>0);
                    return ("DateFormat: " & <ls>_0);
                }

                override func Label() : (::system::String)
                {
                    return "Selected Locale:";
                }

                override func LongDate(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatDate(<ls>locale, ::presentation::helper_types::LocalizedStrings::FirstOrEmpty(::system::Localization::GetLongDateFormats(<ls>locale)), <ls>0);
                    return ("LongDate: " & <ls>_0);
                }

                override func LongTime(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatTime(<ls>locale, ::presentation::helper_types::LocalizedStrings::FirstOrEmpty(::system::Localization::GetLongTimeFormats(<ls>locale)), <ls>0);
                    return ("LongTime: " & <ls>_0);
                }

                override func Number(<ls>0 : ::system::String) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatNumber(<ls>locale, <ls>0);
                    return ("Number: " & <ls>_0);
                }

                override func Sentence(<ls>0 : ::system::String) : (::system::String)
                {
                    var <ls>_0 = <ls>0;
                    return (("$Good morning, " & <ls>_0) & "!$");
                }

                override func ShortDate(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatDate(<ls>locale, ::presentation::helper_types::LocalizedStrings::FirstOrEmpty(::system::Localization::GetShortDateFormats(<ls>locale)), <ls>0);
                    return ("ShortDate: " & <ls>_0);
                }

                override func ShortTime(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatTime(<ls>locale, ::presentation::helper_types::LocalizedStrings::FirstOrEmpty(::system::Localization::GetShortTimeFormats(<ls>locale)), <ls>0);
                    return ("ShortTime: " & <ls>_0);
                }

                override func TimeFormat(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatTime(<ls>locale, "HH", <ls>0);
                    return ("TimeFormat: " & <ls>_0);
                }

                override func Title() : (::system::String)
                {
                    return "Localization";
                }

                override func YearMonthDate(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatDate(<ls>locale, ::presentation::helper_types::LocalizedStrings::FirstOrEmpty(::system::Localization::GetYearMonthDateFormats(<ls>locale)), <ls>0);
                    return ("YearMonthDate: " & <ls>_0);
                }
            };
        }

        static func <ls_zh-CN>BuildStrings(<ls>locale : ::system::Locale) : (::demo::IStringResourceStrings^)
        {
            return new (::demo::IStringResourceStrings^)
            {
                override func Currency(<ls>0 : ::system::String) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatCurrency(<ls>locale, <ls>0);
                    return ("货币：" & <ls>_0);
                }

                override func DateFormat(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatDate(<ls>locale, "yyyy", <ls>0);
                    return ("日期格式：" & <ls>_0);
                }

                override func Label() : (::system::String)
                {
                    return "语言设置：";
                }

                override func LongDate(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatDate(<ls>locale, ::presentation::helper_types::LocalizedStrings::FirstOrEmpty(::system::Localization::GetLongDateFormats(<ls>locale)), <ls>0);
                    return ("长日期：" & <ls>_0);
                }

                override func LongTime(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatTime(<ls>locale, ::presentation::helper_types::LocalizedStrings::FirstOrEmpty(::system::Localization::GetLongTimeFormats(<ls>locale)), <ls>0);
                    return ("长时间：" & <ls>_0);
                }

                override func Number(<ls>0 : ::system::String) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatNumber(<ls>locale, <ls>0);
                    return ("数字：" & <ls>_0);
                }

                override func Sentence(<ls>0 : ::system::String) : (::system::String)
                {
                    var <ls>_0 = <ls>0;
                    return (("$" & <ls>_0) & "，早上好！$");
                }

                override func ShortDate(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatDate(<ls>locale, ::presentation::helper_types::LocalizedStrings::FirstOrEmpty(::system::Localization::GetShortDateFormats(<ls>locale)), <ls>0);
                    return ("短日期：" & <ls>_0);
                }

                override func ShortTime(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatTime(<ls>locale, ::presentation::helper_types::LocalizedStrings::FirstOrEmpty(::system::Localization::GetShortTimeFormats(<ls>locale)), <ls>0);
                    return ("短时间：" & <ls>_0);
                }

                override func TimeFormat(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatTime(<ls>locale, "HH", <ls>0);
                    return ("时间格式： " & <ls>_0);
                }

                override func Title() : (::system::String)
                {
                    return "本地化";
                }

                override func YearMonthDate(<ls>0 : ::system::DateTime) : (::system::String)
                {
                    var <ls>_0 = ::system::Localization::FormatDate(<ls>locale, ::presentation::helper_types::LocalizedStrings::FirstOrEmpty(::system::Localization::GetYearMonthDateFormats(<ls>locale)), <ls>0);
                    return ("年月：" & <ls>_0);
                }
            };
        }

        static func Install(<ls>locale : ::system::Locale, <ls>impl : IStringResourceStrings^) : (void)
        {
            if (<ls>StringResource.Keys.Contains(<ls>locale))
            {
                raise (("Localized strings \"demo::StringResource\" has already registered for locale \"" & <ls>locale) & "\".");
            }
            <ls>StringResource.Set(<ls>locale, <ls>impl);
        }

        static func Get(<ls>locale : ::system::Locale) : (IStringResourceStrings^)
        {
            if (<ls>StringResource.Keys.Contains(<ls>locale))
            {
                return <ls>StringResource[<ls>locale];
            }
            return <ls>StringResource[(cast (::system::Locale) "en-US")];
        }

        new ()
        {
        }
    }
}

namespace demo
{
    static
    {
        ::demo::StringResource::Install((cast (::system::Locale) "en-US"), StringResource::<ls_en-US>BuildStrings((cast (::system::Locale) "en-US")));
        ::demo::StringResource::Install((cast (::system::Locale) "zh-CN"), StringResource::<ls_zh-CN>BuildStrings((cast (::system::Locale) "zh-CN")));
    }
}

================================(114/115)================================
module refresh_viewmodel;
using system::*;
using presentation::*;

namespace demo
{
    class RefreshItem
    {
        @cpp:Private
        var <prop>Name : string = "";

        func GetName() : (string)
        {
            return <prop>Name;
        }

        func SetName(<value> : string) : (void)
        {
            (<prop>Name = <value>);
        }

        prop Name : string{GetName, SetName}

        @cpp:Private
        var <prop>Title : string = "";

        func GetTitle() : (string)
        {
            return <prop>Title;
        }

        func SetTitle(<value> : string) : (void)
        {
            (<prop>Title = <value>);
        }

        prop Title : string{GetTitle, SetTitle}

        @cpp:Private
        var <prop>Sub1 : string = "One";

        func GetSub1() : (string)
        {
            return <prop>Sub1;
        }

        func SetSub1(<value> : string) : (void)
        {
            (<prop>Sub1 = <value>);
        }

        prop Sub1 : string{GetSub1, SetSub1}

        @cpp:Private
        var <prop>Sub2 : string = "Two";

        func GetSub2() : (string)
        {
            return <prop>Sub2;
        }

        func SetSub2(<value> : string) : (void)
        {
            (<prop>Sub2 = <value>);
        }

        prop Sub2 : string{GetSub2, SetSub2}

        @cpp:Private
        var <prop>Sub3 : string = "Three";

        func GetSub3() : (string)
        {
            return <prop>Sub3;
        }

        func SetSub3(<value> : string) : (void)
        {
            (<prop>Sub3 = <value>);
        }

        prop Sub3 : string{GetSub3, SetSub3}

        @cpp:Private
        var <prop>Selected : bool = false;

        func GetSelected() : (bool)
        {
            return <prop>Selected;
        }

        func SetSelected(<value> : bool) : (void)
        {
            (<prop>Selected = <value>);
        }

        prop Selected : bool{GetSelected, SetSelected}

        @cpp:Private
        var <prop>LargeImage : GuiImageData^ = null;

        func GetLargeImage() : (GuiImageData^)
        {
            return <prop>LargeImage;
        }

        func SetLargeImage(<value> : GuiImageData^) : (void)
        {
            (<prop>LargeImage = <value>);
        }

        prop LargeImage : GuiImageData^{GetLargeImage, SetLargeImage}

        @cpp:Private
        var <prop>SmallImage : GuiImageData^ = null;

        func GetSmallImage() : (GuiImageData^)
        {
            return <prop>SmallImage;
        }

        func SetSmallImage(<value> : GuiImageData^) : (void)
        {
            (<prop>SmallImage = <value>);
        }

        prop SmallImage : GuiImageData^{GetSmallImage, SetSmallImage}

        @cpp:Private
        var <prop>Children : observe RefreshItem^[] = {};

        func GetChildren() : (observe RefreshItem^[])
        {
            return <prop>Children;
        }

        @cpp:Protected
        func SetChildren(<value> : observe RefreshItem^[]) : (void)
        {
            (<prop>Children = <value>);
        }

        prop Children : observe RefreshItem^[]{GetChildren}

        @cpp:Private
        var <prop>DoNotUse : object = null;

        func GetDoNotUse() : (object)
        {
            return <prop>DoNotUse;
        }

        func SetDoNotUse(<value> : object) : (void)
        {
            (<prop>DoNotUse = <value>);
        }

        prop DoNotUse : object{GetDoNotUse, SetDoNotUse}

        new (name : string, title : string)
        {
            (Name = name);
            (Title = title);
        }

        new (name : string, title : string, children : RefreshItem^{})
        {
            (Name = name);
            (Title = title);
            {
                var <for-enumerable>child = children of (::system::Enumerable^);
                var <for-enumerator>child = <for-enumerable>child.CreateEnumerator();
                while (<for-enumerator>child.Next())
                {
                    var child = (cast (::demo::RefreshItem^) <for-enumerator>child.GetCurrent());
                    {
                        Children.Add(child);
                    }
                }
            }
        }
    }
}

================================(115/115)================================
module fontHelper;
using presentation::*;

func ChangeFontSize(oldFont : FontProperties, deltaSize : int) : (FontProperties)
{
    return {fontFamily : oldFont.fontFamily; size : (oldFont.size + deltaSize); antialias : true;};
}

