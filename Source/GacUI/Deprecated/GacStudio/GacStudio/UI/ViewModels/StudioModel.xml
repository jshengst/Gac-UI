<?xml version="1.0" encoding="utf-8"?>
<Workflow-ViewModel>
  <![CDATA[
    module StudioModel;
    
    using system::*;
    using presentation::Gui*;
    
    namespace vm
    {
      interface IFileFactoryModel
      {
        func GetImage() : ImageData^;
        prop Image : ImageData^ {GetImage}
        
        func GetSmallImage() : ImageData^;
        prop SmallImage : ImageData^ {GetSmallImage}
        
        func GetName() : string;
        prop Name : string {GetName}
        
        func GetCategory() : string;
        prop Category : string {GetCategory}
        
        func GetDescription() : string;
        prop Description : string {GetDescription}
        
        func GetId() : string;
        prop Id : string {GetId}
        
        func GetDefaultFileExt() : string;
        prop DefaultFileExt : string {GetDefaultFileExt}
        
        func GetTextTemplate() : ITextTemplate^;
        prop TextTemplate : ITextTemplate^ {GetTextTemplate}
        
        func GetContentFactory() : IEditorContentFactoryModel^;
        prop ContentFactory : IEditorContentFactoryModel^ {GetContentFactory}
      }
      
      interface IProjectFactoryModel
      {
        func GetImage() : ImageData^;
        prop Image : ImageData^ {GetImage}
        
        func GetSmallImage() : ImageData^;
        prop SmallImage : ImageData^ {GetSmallImage}
        
        func GetName() : string;
        prop Name : string {GetName}
        
        func GetDescription() : string;
        prop Description : string {GetDescription}
        
        func GetId() : string;
        prop Id : string {GetId}
        
        func GetChildren() : IProjectFactoryModel^{};
        prop Children : IProjectFactoryModel^{} {GetChildren}
      }
      
      interface IStudioNewFileModel
      {
        func GetFileFilters() : IProjectFactoryModel^;
        prop FileFilters : IProjectFactoryModel^ {GetFileFilters}
        
        func GetSelectedFileFilter() : IProjectFactoryModel^;
        func SetSelectedFileFilter(value : IProjectFactoryModel^) : void;
        prop SelectedFileFilter : IProjectFactoryModel^ {GetSelectedFileFilter, SetSelectedFileFilter}
        
        func GetFilteredFileFactories() : ObservableList^;
        prop FilteredFileFactories : ObservableList^ {GetFilteredFileFactories}
      }
      
      interface IStudioFileReference
      {
        func GetName() : string;
        prop Name : string {GetName}
        
        func GetFolder() : string;
        prop Folder : string {GetFolder}
        
        func GetFileFactory() : IFileFactoryModel^;
        prop FileFactory : IFileFactoryModel^ {GetFileFactory}
      }
      
      interface IStudioAddExistingFilesModel
      {
        func GetSelectedFiles() : ObservableList^;
        prop SelectedFiles : ObservableList^ {GetSelectedFiles}
        
        func GetCurrentFileName() : string;
        func SetCurrentFileName(value : string) : void;
        prop CurrentFileName : string {GetCurrentFileName, SetCurrentFileName}
        
        func GetFilteredFileFactories() : ObservableList^;
        prop FilteredFileFactories : ObservableList^ {GetFilteredFileFactories}
        
        func AddFiles(fileNames: string{}) : void;
        func RemoveFiles(indices : int{}) : void;
      }
      
      interface IStudioModel
      {
        func GetProjectFactories() : IProjectFactoryModel^{};
        prop ProjectFactories : IProjectFactoryModel^{} {GetProjectFactories}
        
        func GetFileFactories() : IFileFactoryModel^{};
        prop FileFactories : IFileFactoryModel^{} {GetFileFactories}
        
        func GetContentFactories() : IEditorContentFactoryModel^{};
        prop ContentFactories : IEditorContentFactoryModel^{} {GetContentFactories}
        
        func GetEditorFactories() : IEditorFactoryModel^{};
        prop EditorFactories : IEditorFactoryModel^{} {GetEditorFactories}
        
        func CreateNewFileModel() : IStudioNewFileModel^;
        func CreateAddExistingFilesModel(action : IAddFileItemAction^) : IStudioAddExistingFilesModel^;
        
        func GetRootSolutionItem() : ISolutionItemModel^;
        prop RootSolutionItem : ISolutionItemModel^ {GetRootSolutionItem}
        
        func GetOpenedSolution() : ISolutionModel^;
        event OpenedSolutionChanged();
        prop OpenedSolution : ISolutionModel^ {GetOpenedSolution : OpenedSolutionChanged}
        
        func NotifySelectedSolutionItem(solutionItem : ISolutionItemModel^) : void;
        
        func GetWorkingItem() : ISolutionItemModel^;
        event WorkingItemChanged();
        prop WorkingItem : ISolutionItemModel^ {GetWorkingItem : WorkingItemChanged}
        
        func GetWorkingProject() : IProjectModel^;
        event WorkingProjectChanged();
        prop WorkingProject : IProjectModel^ {GetWorkingProject : WorkingProjectChanged}
        
        func GetWorkingDirectory() : string;
        event WorkingDirectoryChanged();
        prop WorkingDirectory : string {GetWorkingDirectory : WorkingDirectoryChanged}
        
        func GetProjectFactory(id : string) : IProjectFactoryModel^;
        func GetFileFactory(id : string) : IFileFactoryModel^;
        func GetEditorFactory(id : string) : IEditorFactoryModel^;
        func GetAssociatedEditors(contentFactory : IEditorContentFactoryModel^) : IEditorFactoryModel^{};
        
        func OpenSolution(filePath : string) : void;
        func NewSolution(filePath : string) : void;
        func CloseSolution() : void;
        func AddNewProject(createNewSolution : bool, projectFactory : IProjectFactoryModel^, projectName : string, solutionDirectory : string, solutionName : string) : IProjectModel^;
        func AddNewFile(action : IAddFileItemAction^, fileFactory : IFileFactoryModel^, fileDirectory : string, fileName : string) : IFileModel^;
        func AddExistingFiles(action : IAddFileItemAction^, files : IStudioFileReference^{}) : void;
        func RenameFile(action : IRenameItemAction^, solutionItem : ISolutionItemModel^, newName : string) : void;
        func RemoveFile(action : IRemoveItemAction^, solutionItem : ISolutionItemModel^) : void;
        
        func OpenBrowser(url : string) : void;
        func PromptError(message : string) : void;
        func SafeExecute(procedure : func():void) : bool;
        func ExecuteSaveItems(saveItems : ISaveItemAction^{}) : void;
      }
    }
  ]]>
</Workflow-ViewModel>