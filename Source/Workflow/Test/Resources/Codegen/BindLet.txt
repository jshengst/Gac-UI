module test;
using test::*;
using system::*;

var s = "";

class Bar
{
	prop value : int = 0 {}

	new()
	{
	}

	new(_value : int)
	{
		this.value = _value;
	}
}

class Foo
{
	prop bar : Bar^ = new Bar^() {}
}

func Callback(value : object) : void
{
	s = $"$(s)[$(cast int value)]";
}

func main() : string
{
	var x = new Foo^();
	var y = new Foo^();
	var z = new Foo^();
	var subscription = bind(
		let
			_x = x,
			_y = y.bar,
			_z = z.bar.value
			in (_x.bar.value + (_y.value + _y.value) + (_z + _z + _z))
		);
	subscription.Open();
	attach(subscription.ValueChanged, Callback);

	x.bar = new Bar^(1);
	x.bar.value = 2;
	y.bar = new Bar^(10);
	y.bar.value = 20;
	z.bar = new Bar^(100);
	z.bar.value = 200;
	
	subscription.Close();
	return s;
}